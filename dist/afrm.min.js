!function(){"use strict";angular.module("afrmApp",["ngMaterial","ngAnimate","ngRoute","angular.filter","md.data.table"]).config(["$mdThemingProvider","$mdDateLocaleProvider",function(e,n){n.formatDate=function(e){return moment(e).format("YYYY-MM-DD")},e.theme("forest").primaryPalette("blue").accentPalette("teal").warnPalette("red").backgroundPalette("grey")}])}(),function(){"use strict";function e(e,n,o){n.serverUrl="http://localhost:3000/",e.menu=function(e){o.path(e)},e.logout=function(){window.localStorage.removeItem("CREDENTIAL"),o.path("/login")},n.$on("$routeChangeSuccess",function(){e.credential=JSON.parse(window.localStorage.getItem("CREDENTIAL")),"/empresas"===o.path()?e.currentMenuIndex=0:"/solicitacoes"===o.path()?e.currentMenuIndex=1:"/logs"===o.path()?e.currentMenuIndex=2:e.currentMenuIndex=-1,n.isLogin="/login"===o.path()})}e.$inject=["$scope","$rootScope","$location"],angular.module("afrmApp").controller("MainController",e)}(),function(){"use strict";function e(e,n){e.when("/login",{templateUrl:"app/components/login/login.html",controller:"LoginController"}).when("/empresas",{templateUrl:"app/components/companies/companies.html",controller:"CompaniesController"}).when("/solicitacoes",{templateUrl:"app/components/internships/internships.html",controller:"InternshipsController"}).when("/logs",{templateUrl:"app/components/logs/logs.html",controller:"LogsController"}).when("/registro",{templateUrl:"app/components/login/register.html",controller:"RegisterController"}).otherwise({redirectTo:"/login"}),n.html5Mode(!0)}angular.module("afrmApp").config(["$routeProvider","$locationProvider",e])}(),function(){"use strict";function e(e,n,o){function t(n){o.get(n).success(function(n){e.companies=n}).error(function(e){console.log(e)})}e.showDialog=function(e){"Aguardando aprovação"===e.status&&n.show({controller:"ManageCompanyController",templateUrl:"app/shared/templates/modals/company-dialog.html",parent:angular.element(document.body),locals:{company:e},clickOutsideToClose:!0})},e.search=function(e){t(e)},function(){e.companySelected=[],t()}()}angular.module("afrmApp").controller("CompaniesController",e),e.$inject=["$scope","$mdDialog","companiesService"]}(),function(){"use strict";function e(e){e.approveSolicitation=function(){},e.insertSolicitation=function(){}}angular.module("afrmApp").controller("HomeController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,n,o){e.approveInternshipDialog=function(o,t,r){"Aguardando aprovação"!==o.status||"coordinator"!==e.credential.role&&"student"!==e.credential.role||n.show({controller:"ApproveInternshipDialogController",templateUrl:"app/shared/templates/modals/approve-internship-dialog.html",locals:{internship:o||{},credential:t},parent:angular.element(document.body),targetEvent:r,clickOutsideToClose:!0})},e.internshipDialog=function(e,o){n.show({controller:"InternshipDialogController",templateUrl:"app/shared/templates/modals/internship-dialog.html",locals:{internship:e||{}},parent:angular.element(document.body),targetEvent:o,clickOutsideToClose:!0})},e.search=function(n){var t={credentialId:e.credential._id};n.name&&(t.name=n.name.trim()),n.status&&"Todos"!==n.status.trim()&&(t.status=n.status.trim()),o.get(t).success(function(n){e.internships=n}).error(function(e){console.log(e)})},function(){var n={};e.query={},e.status=["Todos","Em andamento","Reprovado","Cancelado","Aguardando aprovação","Finalizado"],e.credential=JSON.parse(window.localStorage.getItem("CREDENTIAL"))||{},e.isStudent="student"===e.credential.role,n={credentialId:e.credential._id},o.get(n).success(function(n){e.internships=n}).error(function(e){console.log(e)})}()}angular.module("afrmApp").controller("InternshipsController",e),e.$inject=["$scope","$mdDialog","internshipsService"]}(),function(){"use strict";function e(e,n,o,t){e.login=function(r,i){var a={email:r,password:i};e.isLoading=!0,n.login(a).success(function(n){e.isLoading=!1,n?(window.localStorage.setItem("CREDENTIAL",JSON.stringify(n)),t.credential=n,o.path("/solicitacoes")):e.isWrongLogin=!0}).error(function(n){e.isLoading=!1,console.log(n)})}}angular.module("afrmApp").controller("LoginController",e),e.$inject=["$scope","credentialsService","$location","$rootScope"]}(),function(){"use strict";function e(e,n,o,t,r){e.createAccount=function(e){n.create(e).success(function(e){e&&(t.show(t.simple().textContent("Usuário criado com sucesso").position("bottom").hideDelay(3e3)),r(function(){o("/login")},3e3))}).error(function(e){console.log(e)})}}angular.module("afrmApp").controller("RegisterController",e),e.$inject=["$scope","credentialsService","$location","$mdToast","$timeout"]}(),function(){"use strict";function e(e,n){!function(){n.get().success(function(n){e.logs=n}).error(function(e){console.log(e)})}()}angular.module("afrmApp").controller("LogsController",e),e.$inject=["$scope","logsService"]}(),function(){"use strict";function e(e){e.approveSolicitation=function(){},e.insertSolicitation=function(){}}angular.module("afrmApp").controller("SolicitationController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,n){var o="companies";this.create=function(t){return e.post(n.serverUrl+o,t)},this.update=function(t){return t.changer=JSON.parse(window.localStorage.getItem("CREDENTIAL"))._id,e.put(n.serverUrl+o,t)},this.get=function(t){var r=n.serverUrl+o;return t&&(r=r+"/"+t),e.get(r)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("companiesService",e)}(),function(){"use strict";function e(e,n){var o="credentials";this.login=function(t){var r="?email="+t.email+"&password="+t.password;return e.get(n.serverUrl+o+"/"+r)},this.create=function(t){return e.post(n.serverUrl+o,t)},this.logout=function(t){return e.get(n.serverUrl+o+"/"+t)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("credentialsService",e)}(),function(){"use strict";function e(e,n){var o="internships";this.get=function(t){var r=n.serverUrl+o+"/?";return t.credentialId&&(r+="credentialId="+t.credentialId),t.status&&(r+="&status="+t.status),t.name&&(r+="&name="+t.name),e.get(r)},this.update=function(t){return t.changer=JSON.parse(window.localStorage.getItem("CREDENTIAL"))._id,e.put(n.serverUrl+o,t)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("internshipsService",e)}(),function(){"use strict";function e(e,n){var o="logs";this.get=function(){return e.get(n.serverUrl+o)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("logsService",e)}(),function(){"use strict";function e(e,n,o,t){function r(){e.isSaving=!0,o.update(e.internship).success(function(){e.isSaving=!1,n.hide(e.internship)}).error(function(o){console.log(o),e.isSaving=!1,n.hide()})}e.save=function(n){n&&"coordinator"===e.credential.role?(e.internship.status="Em andamento",e.internship.begin=moment().format("DD/MM/YYYY"),e.internship.end=moment(moment()).add(6,"months").format("DD/MM/YYYY")):n||"coordinator"!==e.credential.role?n||"student"!==e.credential.role||(e.internship.status="Cancelado"):e.internship.status="Reprovado",r()},e.closeDialog=function(){n.cancel()},function(){e.internship=t.internship||{},e.credential=t.credential||{}}()}e.$inject=["$scope","$mdDialog","internshipsService","locals"],angular.module("afrmApp").controller("ApproveInternshipDialogController",e)}(),function(){"use strict";function e(e,n,o,t){e.save=function(t,r){e.isLoadingCompany=!0,r===!0?t.status="Aprovado":t.status="Reprovado",o.update(t).success(function(){e.isLoadingCompany=!1,n.hide(t)}).error(function(n){e.isLoadingCompany=!1,console.log(n)})},e.closeDialog=function(){n.cancel()},function(){e.company=t.company||{}}()}e.$inject=["$scope","$mdDialog","companiesService","locals"],angular.module("afrmApp").controller("ManageCompanyController",e)}(),function(){"use strict";function e(e,n,o,t){e.closeDialog=function(){n.cancel()},function(){e.internship=t.internship||{}}()}e.$inject=["$scope","$mdDialog","internshipsService","locals"],angular.module("afrmApp").controller("InternshipDialogController",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC1tb2R1bGUuanMiLCJhcHAtY29udHJvbGxlci5qcyIsImFwcC1yb3V0ZXMuanMiLCJjb21wb25lbnRzL2NvbXBhbmllcy9jb21wYW5pZXMuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvaG9tZS9ob21lLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2ludGVybnNoaXBzL2ludGVybnNoaXBzLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2xvZ2luL2xvZ2luLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2xvZ2luL3JlZ2lzdGVyLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2xvZ3MvbG9ncy5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9zb2xpY2l0YXRpb24vc29saWNpdGF0aW9uLmNvbnRyb2xsZXIuanMiLCJzaGFyZWQvc2VydmljZXMvY29tcGFuaWVzLnNlcnZpY2UuanMiLCJzaGFyZWQvc2VydmljZXMvY3JlZGVudGlhbHMuc2VydmljZS5qcyIsInNoYXJlZC9zZXJ2aWNlcy9pbnRlcm5zaGlwcy5zZXJ2aWNlLmpzIiwic2hhcmVkL3NlcnZpY2VzL2xvZ3Muc2VydmljZS5qcyIsInNoYXJlZC90ZW1wbGF0ZXMvbW9kYWxzL2FwcHJvdmUuaW50ZXJuc2hpcC5kaWFsb2cuY29udHJvbGxlci5qcyIsInNoYXJlZC90ZW1wbGF0ZXMvbW9kYWxzL2NvbXBhbnkuZGlhbG9nLmNvbnRyb2xsZXIuanMiLCJzaGFyZWQvdGVtcGxhdGVzL21vZGFscy9pbnRlcm5zaGlwLmRpYWxvZy5jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCIkbWREYXRlTG9jYWxlUHJvdmlkZXIiLCJmb3JtYXREYXRlIiwiZGF0ZSIsIm1vbWVudCIsImZvcm1hdCIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwid2FyblBhbGV0dGUiLCJiYWNrZ3JvdW5kUGFsZXR0ZSIsIk1haW5Db250cm9sbGVyIiwiJHNjb3BlIiwiJHJvb3RTY29wZSIsIiRsb2NhdGlvbiIsInNlcnZlclVybCIsIm1lbnUiLCJwYXRoIiwibG9nb3V0Iiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsIiRvbiIsImNyZWRlbnRpYWwiLCJKU09OIiwicGFyc2UiLCJnZXRJdGVtIiwiY3VycmVudE1lbnVJbmRleCIsImlzTG9naW4iLCIkaW5qZWN0IiwiY29udHJvbGxlciIsIkFwcGxpY2F0aW9uQ29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJodG1sNU1vZGUiLCJDb21wYW5pZXNDb250cm9sbGVyIiwiJG1kRGlhbG9nIiwiY29tcGFuaWVzU2VydmljZSIsImdldENvbXBhbmllcyIsIm5hbWUiLCJnZXQiLCJzdWNjZXNzIiwiY29tcGFuaWVzIiwiZXJyb3IiLCJyZWFzb24iLCJjb25zb2xlIiwibG9nIiwic2hvd0RpYWxvZyIsImNvbXBhbnkiLCJzdGF0dXMiLCJzaG93IiwicGFyZW50IiwiZWxlbWVudCIsImRvY3VtZW50IiwiYm9keSIsImxvY2FscyIsImNsaWNrT3V0c2lkZVRvQ2xvc2UiLCJzZWFyY2giLCJjb21wYW55U2VsZWN0ZWQiLCJIb21lQ29udHJvbGxlciIsImFwcHJvdmVTb2xpY2l0YXRpb24iLCJpbnNlcnRTb2xpY2l0YXRpb24iLCJJbnRlcm5zaGlwc0NvbnRyb2xsZXIiLCJpbnRlcm5zaGlwc1NlcnZpY2UiLCJhcHByb3ZlSW50ZXJuc2hpcERpYWxvZyIsImludGVybnNoaXAiLCJldiIsInJvbGUiLCJ0YXJnZXRFdmVudCIsImludGVybnNoaXBEaWFsb2ciLCJxdWVyeSIsInEiLCJjcmVkZW50aWFsSWQiLCJfaWQiLCJ0cmltIiwiaW50ZXJuc2hpcHMiLCJpc1N0dWRlbnQiLCJMb2dpbkNvbnRyb2xsZXIiLCJjcmVkZW50aWFsc1NlcnZpY2UiLCJsb2dpbiIsImVtYWlsIiwicGFzcyIsInBhc3N3b3JkIiwiaXNMb2FkaW5nIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImlzV3JvbmdMb2dpbiIsIlJlZ2lzdGVyQ29udHJvbGxlciIsIiRtZFRvYXN0IiwiJHRpbWVvdXQiLCJjcmVhdGVBY2NvdW50IiwidXNyIiwiY3JlYXRlIiwicmVzdWx0Iiwic2ltcGxlIiwidGV4dENvbnRlbnQiLCJwb3NpdGlvbiIsImhpZGVEZWxheSIsIkxvZ3NDb250cm9sbGVyIiwibG9nc1NlcnZpY2UiLCJsb2dzIiwiU29saWNpdGF0aW9uQ29udHJvbGxlciIsIkNvbXBhbmllc1NlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJwb3N0IiwidXBkYXRlIiwiY2hhbmdlciIsInB1dCIsInVybCIsInNlcnZpY2UiLCJDcmVkZW50aWFsc1NlcnZpY2UiLCJxdWVyeXN0cmluZyIsInRva2VuIiwiSW50ZXJuc2hpcHNTZXJ2aWNlIiwiTG9nc1NlcnZpY2UiLCJBcHByb3ZlSW50ZXJuc2hpcERpYWxvZ0NvbnRyb2xsZXIiLCJ1cGRhdGVJbnRlcm5zaGlwIiwiaXNTYXZpbmciLCJoaWRlIiwic2F2ZSIsImlzQXBwcm92ZSIsImJlZ2luIiwiZW5kIiwiYWRkIiwiY2xvc2VEaWFsb2ciLCJjYW5jZWwiLCJNYW5hZ2VDb21wYW55Q29udHJvbGxlciIsImlzTG9hZGluZ0NvbXBhbnkiLCJJbnRlcm5zaGlwRGlhbG9nQ29udHJvbGxlciJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQUdBQSxTQUFBQyxPQUFBLFdBQ0EsYUFDQSxZQUNBLFVBQ0EsaUJBQ0Esa0JBR0FDLFFBQUEscUJBQUEsd0JBQUEsU0FBQUMsRUFBQUMsR0FHQUEsRUFBQUMsV0FBQSxTQUFBQyxHQUNBLE1BQUFDLFFBQUFELEdBQUFFLE9BQUEsZUFJQUwsRUFDQU0sTUFBQSxVQUNBQyxlQUFBLFFBQ0FDLGNBQUEsUUFDQUMsWUFBQSxPQUNBQyxrQkFBQSxjQ3pCQSxXQUNBLFlBV0EsU0FBQUMsR0FBQUMsRUFBQUMsRUFBQUMsR0FFQUQsRUFBQUUsVUFBQSx5QkFHQUgsRUFBQUksS0FBQSxTQUFBQyxHQUNBSCxFQUFBRyxLQUFBQSxJQUdBTCxFQUFBTSxPQUFBLFdBQ0FDLE9BQUFDLGFBQUFDLFdBQUEsY0FDQVAsRUFBQUcsS0FBQSxXQUdBSixFQUFBUyxJQUFBLHNCQUFBLFdBRUFWLEVBQUFXLFdBQUFDLEtBQUFDLE1BQUFOLE9BQUFDLGFBQUFNLFFBQUEsZUFFQSxjQUFBWixFQUFBRyxPQUNBTCxFQUFBZSxpQkFBQSxFQUVBLGtCQUFBYixFQUFBRyxPQUNBTCxFQUFBZSxpQkFBQSxFQUVBLFVBQUFiLEVBQUFHLE9BQ0FMLEVBQUFlLGlCQUFBLEVBR0FmLEVBQUFlLG9CQUVBZCxFQUFBZSxRQUFBLFdBQUFkLEVBQUFHLFNBdENBTixFQUFBa0IsU0FDQSxTQUFBLGFBQUEsYUFJQWhDLFFBQUFDLE9BQUEsV0FBQWdDLFdBQUEsaUJBQUFuQixNQ1RBLFdBQ0EsWUFJQSxTQUFBb0IsR0FBQUMsRUFBQUMsR0FDQUQsRUFFQUUsS0FBQSxVQUNBQyxZQUFBLGtDQUNBTCxXQUFBLG9CQUdBSSxLQUFBLGFBQ0FDLFlBQUEsMENBQ0FMLFdBQUEsd0JBR0FJLEtBQUEsaUJBQ0FDLFlBQUEsOENBQ0FMLFdBQUEsMEJBR0FJLEtBQUEsU0FDQUMsWUFBQSxnQ0FDQUwsV0FBQSxtQkFHQUksS0FBQSxhQUNBQyxZQUFBLHFDQUNBTCxXQUFBLHVCQUdBTSxXQUNBQyxXQUFBLFdBR0FKLEVBQUFLLFdBQUEsR0FsQ0F6QyxRQUFBQyxPQUFBLFdBQUFDLFFBQUEsaUJBQUEsb0JBQUFnQyxPQ0hBLFdBRUEsWUFNQSxTQUFBUSxHQUFBM0IsRUFBQTRCLEVBQUFDLEdBRUEsUUFBQUMsR0FBQUMsR0FFQUYsRUFBQUcsSUFBQUQsR0FDQUUsUUFBQSxTQUFBQyxHQUNBbEMsRUFBQWtDLFVBQUFBLElBRUFDLE1BQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQUYsS0FJQXBDLEVBQUF1QyxXQUFBLFNBQUFDLEdBRUEseUJBQUFBLEVBQUFDLFFBQ0FiLEVBQUFjLE1BQ0F4QixXQUFBLDBCQUNBSyxZQUFBLGtEQUNBb0IsT0FBQTFELFFBQUEyRCxRQUFBQyxTQUFBQyxNQUNBQyxRQUFBUCxRQUFBQSxHQUNBUSxxQkFBQSxLQUlBaEQsRUFBQWlELE9BQUEsU0FBQWxCLEdBQ0FELEVBQUFDLElBR0EsV0FFQS9CLEVBQUFrRCxtQkFDQXBCLE9BcENBN0MsUUFBQUMsT0FBQSxXQUFBZ0MsV0FBQSxzQkFBQVMsR0FFQUEsRUFBQVYsU0FBQSxTQUFBLFlBQUEsdUJDTkEsV0FFQSxZQU1BLFNBQUFrQyxHQUFBbkQsR0FFQUEsRUFBQW9ELG9CQUFBLGFBSUFwRCxFQUFBcUQsbUJBQUEsYUFWQXBFLFFBQUFDLE9BQUEsV0FBQWdDLFdBQUEsaUJBQUFpQyxHQUVBQSxFQUFBbEMsU0FBQSxhQ05BLFdBRUEsWUFNQSxTQUFBcUMsR0FBQXRELEVBQUE0QixFQUFBMkIsR0FFQXZELEVBQUF3RCx3QkFBQSxTQUFBQyxFQUFBOUMsRUFBQStDLEdBQ0EseUJBQUFELEVBQUFoQixRQUFBLGdCQUFBekMsRUFBQVcsV0FBQWdELE1BQUEsWUFBQTNELEVBQUFXLFdBQUFnRCxNQUNBL0IsRUFBQWMsTUFDQXhCLFdBQUEsb0NBQ0FLLFlBQUEsNkRBQ0F3QixRQUFBVSxXQUFBQSxNQUFBOUMsV0FBQUEsR0FDQWdDLE9BQUExRCxRQUFBMkQsUUFBQUMsU0FBQUMsTUFDQWMsWUFBQUYsRUFDQVYscUJBQUEsS0FJQWhELEVBQUE2RCxpQkFBQSxTQUFBSixFQUFBQyxHQUNBOUIsRUFBQWMsTUFDQXhCLFdBQUEsNkJBQ0FLLFlBQUEscURBQ0F3QixRQUFBVSxXQUFBQSxPQUNBZCxPQUFBMUQsUUFBQTJELFFBQUFDLFNBQUFDLE1BQ0FjLFlBQUFGLEVBQ0FWLHFCQUFBLEtBSUFoRCxFQUFBaUQsT0FBQSxTQUFBYSxHQUNBLEdBQUFDLElBQUFDLGFBQUFoRSxFQUFBVyxXQUFBc0QsSUFFQUgsR0FBQS9CLE9BQ0FnQyxFQUFBaEMsS0FBQStCLEVBQUEvQixLQUFBbUMsUUFFQUosRUFBQXJCLFFBQUEsVUFBQXFCLEVBQUFyQixPQUFBeUIsU0FDQUgsRUFBQXRCLE9BQUFxQixFQUFBckIsT0FBQXlCLFFBRUFYLEVBQUF2QixJQUFBK0IsR0FDQTlCLFFBQUEsU0FBQWtDLEdBQ0FuRSxFQUFBbUUsWUFBQUEsSUFFQWhDLE1BQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQUYsTUFJQSxXQUNBLEdBQUEwQixLQUVBOUQsR0FBQThELFNBRUE5RCxFQUFBeUMsUUFBQSxRQUFBLGVBQUEsWUFBQSxZQUFBLHVCQUFBLGNBRUF6QyxFQUFBVyxXQUFBQyxLQUFBQyxNQUFBTixPQUFBQyxhQUFBTSxRQUFBLG1CQUVBZCxFQUFBb0UsVUFBQSxZQUFBcEUsRUFBQVcsV0FBQWdELEtBRUFHLEdBQUFFLGFBQUFoRSxFQUFBVyxXQUFBc0QsS0FFQVYsRUFBQXZCLElBQUE4QixHQUNBN0IsUUFBQSxTQUFBa0MsR0FDQW5FLEVBQUFtRSxZQUFBQSxJQUVBaEMsTUFBQSxTQUFBQyxHQUNBQyxRQUFBQyxJQUFBRixRQWpFQW5ELFFBQUFDLE9BQUEsV0FBQWdDLFdBQUEsd0JBQUFvQyxHQUVBQSxFQUFBckMsU0FBQSxTQUFBLFlBQUEseUJDTkEsV0FFQSxZQU1BLFNBQUFvRCxHQUFBckUsRUFBQXNFLEVBQUFwRSxFQUFBRCxHQUVBRCxFQUFBdUUsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLEdBQUE5RCxJQUNBNkQsTUFBQUEsRUFDQUUsU0FBQUQsRUFHQXpFLEdBQUEyRSxXQUFBLEVBRUFMLEVBQUFDLE1BQUE1RCxHQUNBc0IsUUFBQSxTQUFBdEIsR0FFQVgsRUFBQTJFLFdBQUEsRUFFQWhFLEdBQ0FKLE9BQUFDLGFBQUFvRSxRQUFBLGFBQUFoRSxLQUFBaUUsVUFBQWxFLElBQ0FWLEVBQUFVLFdBQUFBLEVBQ0FULEVBQUFHLEtBQUEsa0JBR0FMLEVBQUE4RSxjQUFBLElBRUEzQyxNQUFBLFNBQUFDLEdBQ0FwQyxFQUFBMkUsV0FBQSxFQUNBdEMsUUFBQUMsSUFBQUYsTUE3QkFuRCxRQUFBQyxPQUFBLFdBQUFnQyxXQUFBLGtCQUFBbUQsR0FFQUEsRUFBQXBELFNBQUEsU0FBQSxxQkFBQSxZQUFBLGlCQ05BLFdBRUEsWUFNQSxTQUFBOEQsR0FBQS9FLEVBQUFzRSxFQUFBcEUsRUFBQThFLEVBQUFDLEdBRUFqRixFQUFBa0YsY0FBQSxTQUFBQyxHQUNBYixFQUFBYyxPQUFBRCxHQUNBbEQsUUFBQSxTQUFBb0QsR0FDQUEsSUFDQUwsRUFBQXRDLEtBQ0FzQyxFQUFBTSxTQUNBQyxZQUFBLDhCQUNBQyxTQUFBLFVBQ0FDLFVBQUEsTUFFQVIsRUFBQSxXQUNBL0UsRUFBQSxXQUNBLFFBSUFpQyxNQUFBLFNBQUFDLEdBQ0FDLFFBQUFDLElBQUFGLE1BdkJBbkQsUUFBQUMsT0FBQSxXQUFBZ0MsV0FBQSxxQkFBQTZELEdBRUFBLEVBQUE5RCxTQUFBLFNBQUEscUJBQUEsWUFBQSxXQUFBLGVDTkEsV0FFQSxZQU1BLFNBQUF5RSxHQUFBMUYsRUFBQTJGLElBRUEsV0FFQUEsRUFBQTNELE1BQ0FDLFFBQUEsU0FBQTJELEdBQ0E1RixFQUFBNEYsS0FBQUEsSUFFQXpELE1BQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQUYsUUFiQW5ELFFBQUFDLE9BQUEsV0FBQWdDLFdBQUEsaUJBQUF3RSxHQUVBQSxFQUFBekUsU0FBQSxTQUFBLGtCQ05BLFdBRUEsWUFNQSxTQUFBNEUsR0FBQTdGLEdBRUFBLEVBQUFvRCxvQkFBQSxhQUlBcEQsRUFBQXFELG1CQUFBLGFBVkFwRSxRQUFBQyxPQUFBLFdBQUFnQyxXQUFBLHlCQUFBMkUsR0FFQUEsRUFBQTVFLFNBQUEsYUNOQSxXQUVBLFlBRUEsU0FBQTZFLEdBQUFDLEVBQUE5RixHQUVBLEdBQUFmLEdBQUEsV0FFQThHLE1BQUFaLE9BQUEsU0FBQTVDLEdBQ0EsTUFBQXVELEdBQUFFLEtBQUFoRyxFQUFBRSxVQUFBakIsRUFBQXNELElBR0F3RCxLQUFBRSxPQUFBLFNBQUExRCxHQUVBLE1BREFBLEdBQUEyRCxRQUFBdkYsS0FBQUMsTUFBQU4sT0FBQUMsYUFBQU0sUUFBQSxlQUFBbUQsSUFDQThCLEVBQUFLLElBQUFuRyxFQUFBRSxVQUFBakIsRUFBQXNELElBR0F3RCxLQUFBaEUsSUFBQSxTQUFBRCxHQUNBLEdBQUFzRSxHQUFBcEcsRUFBQUUsVUFBQWpCLENBS0EsT0FIQTZDLEtBQ0FzRSxFQUFBQSxFQUFBLElBQUF0RSxHQUVBZ0UsRUFBQS9ELElBQUFxRSxJQUlBUCxFQUFBN0UsU0FBQSxRQUFBLGNBRUFoQyxRQUFBQyxPQUFBLFdBQUFvSCxRQUFBLG1CQUFBUixNQzdCQSxXQUVBLFlBRUEsU0FBQVMsR0FBQVIsRUFBQTlGLEdBRUEsR0FBQWYsR0FBQSxhQUVBOEcsTUFBQXpCLE1BQUEsU0FBQTVELEdBQ0EsR0FBQTZGLEdBQUEsVUFBQTdGLEVBQUE2RCxNQUFBLGFBQUE3RCxFQUFBK0QsUUFFQSxPQUFBcUIsR0FBQS9ELElBQUEvQixFQUFBRSxVQUFBakIsRUFBQSxJQUFBc0gsSUFHQVIsS0FBQVosT0FBQSxTQUFBRCxHQUNBLE1BQUFZLEdBQUFFLEtBQUFoRyxFQUFBRSxVQUFBakIsRUFBQWlHLElBR0FhLEtBQUExRixPQUFBLFNBQUFtRyxHQUNBLE1BQUFWLEdBQUEvRCxJQUFBL0IsRUFBQUUsVUFBQWpCLEVBQUEsSUFBQXVILElBSUFGLEVBQUF0RixTQUFBLFFBQUEsY0FFQWhDLFFBQUFDLE9BQUEsV0FBQW9ILFFBQUEscUJBQUFDLE1DekJBLFdBRUEsWUFFQSxTQUFBRyxHQUFBWCxFQUFBOUYsR0FFQSxHQUFBZixHQUFBLGFBRUE4RyxNQUFBaEUsSUFBQSxTQUFBOEIsR0FDQSxHQUFBdUMsR0FBQXBHLEVBQUFFLFVBQUFqQixFQUFBLElBV0EsT0FUQTRFLEdBQUFFLGVBQ0FxQyxHQUFBLGdCQUFBdkMsRUFBQUUsY0FFQUYsRUFBQXJCLFNBQ0E0RCxHQUFBLFdBQUF2QyxFQUFBckIsUUFFQXFCLEVBQUEvQixPQUNBc0UsR0FBQSxTQUFBdkMsRUFBQS9CLE1BRUFnRSxFQUFBL0QsSUFBQXFFLElBR0FMLEtBQUFFLE9BQUEsU0FBQXpDLEdBRUEsTUFEQUEsR0FBQTBDLFFBQUF2RixLQUFBQyxNQUFBTixPQUFBQyxhQUFBTSxRQUFBLGVBQUFtRCxJQUNBOEIsRUFBQUssSUFBQW5HLEVBQUFFLFVBQUFqQixFQUFBdUUsSUFLQWlELEVBQUF6RixTQUFBLFFBQUEsY0FFQWhDLFFBQUFDLE9BQUEsV0FBQW9ILFFBQUEscUJBQUFJLE1DaENBLFdBRUEsWUFFQSxTQUFBQyxHQUFBWixFQUFBOUYsR0FFQSxHQUFBZixHQUFBLE1BRUE4RyxNQUFBaEUsSUFBQSxXQUNBLE1BQUErRCxHQUFBL0QsSUFBQS9CLEVBQUFFLFVBQUFqQixJQUtBeUgsRUFBQTFGLFNBQUEsUUFBQSxjQUVBaEMsUUFBQUMsT0FBQSxXQUFBb0gsUUFBQSxjQUFBSyxNQ2hCQSxXQUVBLFlBRUEsU0FBQUMsR0FBQTVHLEVBQUE0QixFQUFBMkIsRUFBQVIsR0FFQSxRQUFBOEQsS0FDQTdHLEVBQUE4RyxVQUFBLEVBRUF2RCxFQUFBMkMsT0FBQWxHLEVBQUF5RCxZQUNBeEIsUUFBQSxXQUNBakMsRUFBQThHLFVBQUEsRUFDQWxGLEVBQUFtRixLQUFBL0csRUFBQXlELGNBRUF0QixNQUFBLFNBQUFDLEdBQ0FDLFFBQUFDLElBQUFGLEdBQ0FwQyxFQUFBOEcsVUFBQSxFQUNBbEYsRUFBQW1GLFNBSUEvRyxFQUFBZ0gsS0FBQSxTQUFBQyxHQUVBQSxHQUFBLGdCQUFBakgsRUFBQVcsV0FBQWdELE1BQ0EzRCxFQUFBeUQsV0FBQWhCLE9BQUEsZUFDQXpDLEVBQUF5RCxXQUFBeUQsTUFBQTFILFNBQUFDLE9BQUEsY0FDQU8sRUFBQXlELFdBQUEwRCxJQUFBM0gsT0FBQUEsVUFBQTRILElBQUEsRUFBQSxVQUFBM0gsT0FBQSxlQUVBd0gsR0FBQSxnQkFBQWpILEVBQUFXLFdBQUFnRCxLQUdBc0QsR0FBQSxZQUFBakgsRUFBQVcsV0FBQWdELE9BQ0EzRCxFQUFBeUQsV0FBQWhCLE9BQUEsYUFIQXpDLEVBQUF5RCxXQUFBaEIsT0FBQSxZQUtBb0UsS0FHQTdHLEVBQUFxSCxZQUFBLFdBQ0F6RixFQUFBMEYsVUFHQSxXQUNBdEgsRUFBQXlELFdBQUFWLEVBQUFVLGVBQ0F6RCxFQUFBVyxXQUFBb0MsRUFBQXBDLGtCQUlBaUcsRUFBQTNGLFNBQUEsU0FBQSxZQUFBLHFCQUFBLFVBRUFoQyxRQUFBQyxPQUFBLFdBQUFnQyxXQUFBLG9DQUFBMEYsTUNqREEsV0FFQSxZQUVBLFNBQUFXLEdBQUF2SCxFQUFBNEIsRUFBQUMsRUFBQWtCLEdBRUEvQyxFQUFBZ0gsS0FBQSxTQUFBeEUsRUFBQUMsR0FFQXpDLEVBQUF3SCxrQkFBQSxFQUVBL0UsS0FBQSxFQUNBRCxFQUFBQyxPQUFBLFdBRUFELEVBQUFDLE9BQUEsWUFHQVosRUFBQXFFLE9BQUExRCxHQUNBUCxRQUFBLFdBQ0FqQyxFQUFBd0gsa0JBQUEsRUFDQTVGLEVBQUFtRixLQUFBdkUsS0FFQUwsTUFBQSxTQUFBQyxHQUNBcEMsRUFBQXdILGtCQUFBLEVBQ0FuRixRQUFBQyxJQUFBRixNQUtBcEMsRUFBQXFILFlBQUEsV0FDQXpGLEVBQUEwRixVQUdBLFdBQ0F0SCxFQUFBd0MsUUFBQU8sRUFBQVAsZUFJQStFLEVBQUF0RyxTQUFBLFNBQUEsWUFBQSxtQkFBQSxVQUVBaEMsUUFBQUMsT0FBQSxXQUFBZ0MsV0FBQSwwQkFBQXFHLE1DdkNBLFdBRUEsWUFFQSxTQUFBRSxHQUFBekgsRUFBQTRCLEVBQUEyQixFQUFBUixHQUVBL0MsRUFBQXFILFlBQUEsV0FDQXpGLEVBQUEwRixVQUdBLFdBQ0F0SCxFQUFBeUQsV0FBQVYsRUFBQVUsa0JBSUFnRSxFQUFBeEcsU0FBQSxTQUFBLFlBQUEscUJBQUEsVUFFQWhDLFFBQUFDLE9BQUEsV0FBQWdDLFdBQUEsNkJBQUF1RyIsImZpbGUiOiJhZnJtLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gTW9kdWxlIGRlcGVuZGVuY2llcyBpbmplY3Rpb25cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcsIFtcbiAgICAgICAgJ25nTWF0ZXJpYWwnLFxuICAgICAgICAnbmdBbmltYXRlJyxcbiAgICAgICAgJ25nUm91dGUnLFxuICAgICAgICAnYW5ndWxhci5maWx0ZXInLFxuICAgICAgICAnbWQuZGF0YS50YWJsZSdcbiAgICBdKVxuXG4gICAgICAgIC5jb25maWcoZnVuY3Rpb24gKCRtZFRoZW1pbmdQcm92aWRlciwgJG1kRGF0ZUxvY2FsZVByb3ZpZGVyKSB7XG5cbiAgICAgICAgICAgIC8vIERhdGUgZm9ybWF0IGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICRtZERhdGVMb2NhbGVQcm92aWRlci5mb3JtYXREYXRlID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBUaGVtZSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXJcbiAgICAgICAgICAgICAgICAudGhlbWUoJ2ZvcmVzdCcpXG4gICAgICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdibHVlJylcbiAgICAgICAgICAgICAgICAuYWNjZW50UGFsZXR0ZSgndGVhbCcpXG4gICAgICAgICAgICAgICAgLndhcm5QYWxldHRlKCdyZWQnKVxuICAgICAgICAgICAgICAgIC5iYWNrZ3JvdW5kUGFsZXR0ZSgnZ3JleScpO1xuICAgICAgICB9KTtcblxufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gaW5qZWN0aW5nIGRlcGVuZGVuY2llc1xuICAgIE1haW5Db250cm9sbGVyLiRpbmplY3QgPSBbXG4gICAgICAgICckc2NvcGUnLCAnJHJvb3RTY29wZScsICckbG9jYXRpb24nXG4gICAgXTtcblxuICAgIC8vIHJlZ2lzdGVyaW5nIG9uIGFuZ3VsYXJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcpLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgTWFpbkNvbnRyb2xsZXIpO1xuXG4gICAgLy8gTWFpbiBDb250cm9sbGVyXG4gICAgZnVuY3Rpb24gTWFpbkNvbnRyb2xsZXIoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24pIHtcblxuICAgICAgICAkcm9vdFNjb3BlLnNlcnZlclVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvJztcbiAgICAgICAgLy8gJHJvb3RTY29wZS5zZXJ2ZXJVcmwgPSAnaHR0cHM6Ly9kZXYtc2lzdGVtYXMtc2VydmVyLmhlcm9rdWFwcC5jb20vJztcblxuICAgICAgICAkc2NvcGUubWVudSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5sb2dvdXQgPSAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdDUkVERU5USUFMJyk7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRyb3V0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICRzY29wZS5jcmVkZW50aWFsID0gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0NSRURFTlRJQUwnKSk7XG5cbiAgICAgICAgICAgIGlmICgkbG9jYXRpb24ucGF0aCgpID09PSAnL2VtcHJlc2FzJylcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudE1lbnVJbmRleCA9IDA7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKCRsb2NhdGlvbi5wYXRoKCkgPT09ICcvc29saWNpdGFjb2VzJylcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudE1lbnVJbmRleCA9IDE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVsc2UgaWYgKCRsb2NhdGlvbi5wYXRoKCkgPT09ICcvbG9ncycpXG4gICAgICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRNZW51SW5kZXggPSAyO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRNZW51SW5kZXggPSAtMTtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS5pc0xvZ2luID0gJGxvY2F0aW9uLnBhdGgoKSA9PT0gJy9sb2dpbicgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcpLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJywgQXBwbGljYXRpb25Db25maWddKTtcblxuICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uQ29uZmlnKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICAgICAkcm91dGVQcm92aWRlclxuXG4gICAgICAgICAgICAud2hlbignL2xvZ2luJywge1xuICAgICAgICAgICAgICAgICd0ZW1wbGF0ZVVybCcgOiAnYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uaHRtbCcsXG4gICAgICAgICAgICAgICAgJ2NvbnRyb2xsZXInICA6ICdMb2dpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAud2hlbignL2VtcHJlc2FzJywge1xuICAgICAgICAgICAgICAgICd0ZW1wbGF0ZVVybCcgOiAnYXBwL2NvbXBvbmVudHMvY29tcGFuaWVzL2NvbXBhbmllcy5odG1sJyxcbiAgICAgICAgICAgICAgICAnY29udHJvbGxlcicgIDogJ0NvbXBhbmllc0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAud2hlbignL3NvbGljaXRhY29lcycsIHtcbiAgICAgICAgICAgICAgICAndGVtcGxhdGVVcmwnIDogJ2FwcC9jb21wb25lbnRzL2ludGVybnNoaXBzL2ludGVybnNoaXBzLmh0bWwnLFxuICAgICAgICAgICAgICAgICdjb250cm9sbGVyJyAgOiAnSW50ZXJuc2hpcHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLndoZW4oJy9sb2dzJywge1xuICAgICAgICAgICAgICAgICd0ZW1wbGF0ZVVybCcgOiAnYXBwL2NvbXBvbmVudHMvbG9ncy9sb2dzLmh0bWwnLFxuICAgICAgICAgICAgICAgICdjb250cm9sbGVyJyAgOiAnTG9nc0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAud2hlbignL3JlZ2lzdHJvJywge1xuICAgICAgICAgICAgICAgICd0ZW1wbGF0ZVVybCcgOiAnYXBwL2NvbXBvbmVudHMvbG9naW4vcmVnaXN0ZXIuaHRtbCcsXG4gICAgICAgICAgICAgICAgJ2NvbnRyb2xsZXInICA6ICdSZWdpc3RlckNvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAub3RoZXJ3aXNlKHtcbiAgICAgICAgICAgICAgICAncmVkaXJlY3RUbyc6ICcvbG9naW4nXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG4gICAgfVxufSgpKTsiLCIoZnVuY3Rpb24oKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcpLmNvbnRyb2xsZXIoJ0NvbXBhbmllc0NvbnRyb2xsZXInLCBDb21wYW5pZXNDb250cm9sbGVyKTtcblxuICAgIENvbXBhbmllc0NvbnRyb2xsZXIuJGluamVjdCA9IFsgJyRzY29wZScsICckbWREaWFsb2cnLCAnY29tcGFuaWVzU2VydmljZScgXTtcblxuICAgIGZ1bmN0aW9uIENvbXBhbmllc0NvbnRyb2xsZXIoJHNjb3BlLCAkbWREaWFsb2csIGNvbXBhbmllc1NlcnZpY2UpIHtcblxuICAgICAgICBmdW5jdGlvbiBnZXRDb21wYW5pZXMobmFtZSkge1xuXG4gICAgICAgICAgICBjb21wYW5pZXNTZXJ2aWNlLmdldChuYW1lKVxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGNvbXBhbmllcykge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29tcGFuaWVzID0gY29tcGFuaWVzO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZWFzb24pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5zaG93RGlhbG9nID0gZnVuY3Rpb24oY29tcGFueSkge1xuXG4gICAgICAgICAgICBpZiAoY29tcGFueS5zdGF0dXMgPT09ICdBZ3VhcmRhbmRvIGFwcm92YcOnw6NvJylcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgICdjb250cm9sbGVyJyAgICAgICAgICA6ICdNYW5hZ2VDb21wYW55Q29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICd0ZW1wbGF0ZVVybCcgICAgICAgICA6ICdhcHAvc2hhcmVkL3RlbXBsYXRlcy9tb2RhbHMvY29tcGFueS1kaWFsb2cuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICdwYXJlbnQnICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgICAgICAgICAgJ2xvY2FscycgICAgICAgICAgICAgIDogeyAnY29tcGFueSc6IGNvbXBhbnkgfSxcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrT3V0c2lkZVRvQ2xvc2UnIDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zZWFyY2ggPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgZ2V0Q29tcGFuaWVzKG5hbWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIChmdW5jdGlvbiBpbml0KCkge1xuXG4gICAgICAgICAgICAkc2NvcGUuY29tcGFueVNlbGVjdGVkID0gW107XG4gICAgICAgICAgICBnZXRDb21wYW5pZXMoKTtcbiAgICAgICAgfSgpKTtcbiAgICB9XG59KCkpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2Fmcm1BcHAnKS5jb250cm9sbGVyKCdIb21lQ29udHJvbGxlcicsIEhvbWVDb250cm9sbGVyKTtcblxuICAgIEhvbWVDb250cm9sbGVyLiRpbmplY3QgPSBbICckc2NvcGUnIF07XG5cbiAgICBmdW5jdGlvbiBIb21lQ29udHJvbGxlcigkc2NvcGUpIHtcblxuICAgICAgICAkc2NvcGUuYXBwcm92ZVNvbGljaXRhdGlvbiA9ICBmdW5jdGlvbigpIHtcblxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5pbnNlcnRTb2xpY2l0YXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB9O1xuICAgIH1cbn0oKSk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcpLmNvbnRyb2xsZXIoJ0ludGVybnNoaXBzQ29udHJvbGxlcicsIEludGVybnNoaXBzQ29udHJvbGxlcik7XG5cbiAgICBJbnRlcm5zaGlwc0NvbnRyb2xsZXIuJGluamVjdCA9IFsgJyRzY29wZScsICckbWREaWFsb2cnLCAnaW50ZXJuc2hpcHNTZXJ2aWNlJyBdO1xuXG4gICAgZnVuY3Rpb24gSW50ZXJuc2hpcHNDb250cm9sbGVyKCRzY29wZSwgJG1kRGlhbG9nLCBpbnRlcm5zaGlwc1NlcnZpY2UpIHtcblxuICAgICAgICAkc2NvcGUuYXBwcm92ZUludGVybnNoaXBEaWFsb2cgPSBmdW5jdGlvbihpbnRlcm5zaGlwLCBjcmVkZW50aWFsLCBldikge1xuICAgICAgICAgICAgaWYgKGludGVybnNoaXAuc3RhdHVzID09PSAnQWd1YXJkYW5kbyBhcHJvdmHDp8OjbycgJiYgKCRzY29wZS5jcmVkZW50aWFsLnJvbGUgPT09ICdjb29yZGluYXRvcicgfHwgJHNjb3BlLmNyZWRlbnRpYWwucm9sZSA9PT0gJ3N0dWRlbnQnKSlcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgICdjb250cm9sbGVyJyAgICAgICAgICA6ICdBcHByb3ZlSW50ZXJuc2hpcERpYWxvZ0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICAndGVtcGxhdGVVcmwnICAgICAgICAgOiAnYXBwL3NoYXJlZC90ZW1wbGF0ZXMvbW9kYWxzL2FwcHJvdmUtaW50ZXJuc2hpcC1kaWFsb2cuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICdsb2NhbHMnICAgICAgICAgICAgICA6IHsgJ2ludGVybnNoaXAnOiBpbnRlcm5zaGlwIHx8IHt9LCAnY3JlZGVudGlhbCc6IGNyZWRlbnRpYWwgfSxcbiAgICAgICAgICAgICAgICAgICAgJ3BhcmVudCcgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgICAgICAgICAndGFyZ2V0RXZlbnQnICAgICAgICAgOiBldixcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrT3V0c2lkZVRvQ2xvc2UnIDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5pbnRlcm5zaGlwRGlhbG9nID0gZnVuY3Rpb24gKGludGVybnNoaXAsIGV2KSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICAgICAgJ2NvbnRyb2xsZXInICAgICAgICAgIDogJ0ludGVybnNoaXBEaWFsb2dDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAndGVtcGxhdGVVcmwnICAgICAgICAgOiAnYXBwL3NoYXJlZC90ZW1wbGF0ZXMvbW9kYWxzL2ludGVybnNoaXAtZGlhbG9nLmh0bWwnLFxuICAgICAgICAgICAgICAgICdsb2NhbHMnICAgICAgICAgICAgICA6IHsgJ2ludGVybnNoaXAnOiBpbnRlcm5zaGlwIHx8IHt9IH0sXG4gICAgICAgICAgICAgICAgJ3BhcmVudCcgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgICAgICd0YXJnZXRFdmVudCcgICAgICAgICA6IGV2LFxuICAgICAgICAgICAgICAgICdjbGlja091dHNpZGVUb0Nsb3NlJyA6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zZWFyY2ggPSBmdW5jdGlvbihxdWVyeSkge1xuICAgICAgICAgICAgdmFyIHEgPSB7J2NyZWRlbnRpYWxJZCc6ICRzY29wZS5jcmVkZW50aWFsLl9pZH07XG5cbiAgICAgICAgICAgIGlmIChxdWVyeS5uYW1lKVxuICAgICAgICAgICAgICAgIHEubmFtZSA9IHF1ZXJ5Lm5hbWUudHJpbSgpO1xuXG4gICAgICAgICAgICBpZiAocXVlcnkuc3RhdHVzICYmIHF1ZXJ5LnN0YXR1cy50cmltKCkgIT09ICdUb2RvcycpXG4gICAgICAgICAgICAgICAgcS5zdGF0dXMgPSBxdWVyeS5zdGF0dXMudHJpbSgpO1xuXG4gICAgICAgICAgICBpbnRlcm5zaGlwc1NlcnZpY2UuZ2V0KHEpXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oaW50ZXJuc2hpcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludGVybnNoaXBzID0gaW50ZXJuc2hpcHM7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlYXNvbik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIChmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0ge307XG5cbiAgICAgICAgICAgICRzY29wZS5xdWVyeSA9IHt9O1xuXG4gICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gWydUb2RvcycsICdFbSBhbmRhbWVudG8nLCAnUmVwcm92YWRvJywgJ0NhbmNlbGFkbycsICdBZ3VhcmRhbmRvIGFwcm92YcOnw6NvJywgJ0ZpbmFsaXphZG8nXTtcblxuICAgICAgICAgICAgJHNjb3BlLmNyZWRlbnRpYWwgPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnQ1JFREVOVElBTCcpKSB8fCB7fTtcblxuICAgICAgICAgICAgJHNjb3BlLmlzU3R1ZGVudCA9ICRzY29wZS5jcmVkZW50aWFsLnJvbGUgPT09ICdzdHVkZW50JyA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICAgICAgcXVlcnkgPSB7J2NyZWRlbnRpYWxJZCc6ICRzY29wZS5jcmVkZW50aWFsLl9pZH07XG5cbiAgICAgICAgICAgIGludGVybnNoaXBzU2VydmljZS5nZXQocXVlcnkpXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oaW50ZXJuc2hpcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludGVybnNoaXBzID0gaW50ZXJuc2hpcHM7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlYXNvbik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0oKSk7XG4gICAgfVxufSgpKTtcbiIsIihmdW5jdGlvbigpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhZnJtQXBwJykuY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJywgTG9naW5Db250cm9sbGVyKTtcblxuICAgIExvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWyAnJHNjb3BlJywgJ2NyZWRlbnRpYWxzU2VydmljZScsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScgXTtcblxuICAgIGZ1bmN0aW9uIExvZ2luQ29udHJvbGxlcigkc2NvcGUsIGNyZWRlbnRpYWxzU2VydmljZSwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlKSB7XG5cbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oZW1haWwsIHBhc3MpIHtcbiAgICAgICAgICAgIHZhciBjcmVkZW50aWFsID0ge1xuICAgICAgICAgICAgICAgICdlbWFpbCc6IGVtYWlsLFxuICAgICAgICAgICAgICAgICdwYXNzd29yZCc6IHBhc3NcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICRzY29wZS5pc0xvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjcmVkZW50aWFsc1NlcnZpY2UubG9naW4oY3JlZGVudGlhbClcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoY3JlZGVudGlhbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0xvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3JlZGVudGlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdDUkVERU5USUFMJywgSlNPTi5zdHJpbmdpZnkoY3JlZGVudGlhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5jcmVkZW50aWFsID0gY3JlZGVudGlhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvc29saWNpdGFjb2VzJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzV3JvbmdMb2dpbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVhc29uKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgKGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgICAgICAgfSgpKTtcbiAgICB9XG59KCkpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2Fmcm1BcHAnKS5jb250cm9sbGVyKCdSZWdpc3RlckNvbnRyb2xsZXInLCBSZWdpc3RlckNvbnRyb2xsZXIpO1xuXG4gICAgUmVnaXN0ZXJDb250cm9sbGVyLiRpbmplY3QgPSBbICckc2NvcGUnLCAnY3JlZGVudGlhbHNTZXJ2aWNlJywgJyRsb2NhdGlvbicsICckbWRUb2FzdCcsICckdGltZW91dCcgXTtcblxuICAgIGZ1bmN0aW9uIFJlZ2lzdGVyQ29udHJvbGxlcigkc2NvcGUsIGNyZWRlbnRpYWxzU2VydmljZSwgJGxvY2F0aW9uLCAkbWRUb2FzdCwgJHRpbWVvdXQpIHtcblxuICAgICAgICAkc2NvcGUuY3JlYXRlQWNjb3VudCA9IGZ1bmN0aW9uKHVzcikge1xuICAgICAgICAgICAgY3JlZGVudGlhbHNTZXJ2aWNlLmNyZWF0ZSh1c3IpXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdVc3XDoXJpbyBjcmlhZG8gY29tIHN1Y2Vzc28nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oJ2JvdHRvbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24oJy9sb2dpbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZWFzb24pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgIH1cbn0oKSk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcpLmNvbnRyb2xsZXIoJ0xvZ3NDb250cm9sbGVyJywgTG9nc0NvbnRyb2xsZXIpO1xuXG4gICAgTG9nc0NvbnRyb2xsZXIuJGluamVjdCA9IFsgJyRzY29wZScsICdsb2dzU2VydmljZScgXTtcblxuICAgIGZ1bmN0aW9uIExvZ3NDb250cm9sbGVyKCRzY29wZSwgbG9nc1NlcnZpY2UpIHtcblxuICAgICAgICAoZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICBcbiAgICAgICAgICAgIGxvZ3NTZXJ2aWNlLmdldCgpXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24obG9ncykge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9ncyA9IGxvZ3M7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlYXNvbik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0oKSk7XG4gICAgfVxufSgpKTtcbiIsIihmdW5jdGlvbigpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhZnJtQXBwJykuY29udHJvbGxlcignU29saWNpdGF0aW9uQ29udHJvbGxlcicsIFNvbGljaXRhdGlvbkNvbnRyb2xsZXIpO1xuXG4gICAgU29saWNpdGF0aW9uQ29udHJvbGxlci4kaW5qZWN0ID0gWyAnJHNjb3BlJyBdO1xuXG4gICAgZnVuY3Rpb24gU29saWNpdGF0aW9uQ29udHJvbGxlcigkc2NvcGUpIHtcblxuICAgICAgICAkc2NvcGUuYXBwcm92ZVNvbGljaXRhdGlvbiA9ICBmdW5jdGlvbigpIHtcblxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5pbnNlcnRTb2xpY2l0YXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB9O1xuXG4gICAgICAgIChmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB9KCkpO1xuXG4gICAgfVxufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBDb21wYW5pZXNTZXJ2aWNlKCRodHRwLCAkcm9vdFNjb3BlKSB7XG5cbiAgICAgICAgdmFyIG1vZHVsZSA9ICdjb21wYW5pZXMnO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKGNvbXBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCRyb290U2NvcGUuc2VydmVyVXJsICsgbW9kdWxlLCBjb21wYW55KTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uIChjb21wYW55KSB7XG4gICAgICAgICAgICBjb21wYW55LmNoYW5nZXIgPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnQ1JFREVOVElBTCcpKS5faWQ7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucHV0KCRyb290U2NvcGUuc2VydmVyVXJsICsgbW9kdWxlLCBjb21wYW55KTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gJHJvb3RTY29wZS5zZXJ2ZXJVcmwgKyBtb2R1bGU7XG5cbiAgICAgICAgICAgIGlmIChuYW1lKVxuICAgICAgICAgICAgICAgIHVybCA9IHVybCArICcvJyArIG5hbWU7XG5cbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBDb21wYW5pZXNTZXJ2aWNlLiRpbmplY3QgPSBbICckaHR0cCcsICckcm9vdFNjb3BlJyBdO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2Fmcm1BcHAnKS5zZXJ2aWNlKCdjb21wYW5pZXNTZXJ2aWNlJywgQ29tcGFuaWVzU2VydmljZSk7XG5cbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIENyZWRlbnRpYWxzU2VydmljZSgkaHR0cCwgJHJvb3RTY29wZSkge1xuXG4gICAgICAgIHZhciBtb2R1bGUgPSAnY3JlZGVudGlhbHMnO1xuXG4gICAgICAgIHRoaXMubG9naW4gPSBmdW5jdGlvbiAoY3JlZGVudGlhbCkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5c3RyaW5nID0gJz9lbWFpbD0nICsgY3JlZGVudGlhbC5lbWFpbCArICcmcGFzc3dvcmQ9JyArIGNyZWRlbnRpYWwucGFzc3dvcmQ7XG5cbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJHJvb3RTY29wZS5zZXJ2ZXJVcmwgKyBtb2R1bGUgKyAnLycgKyBxdWVyeXN0cmluZyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5jcmVhdGUgPSAgZnVuY3Rpb24odXNyKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgkcm9vdFNjb3BlLnNlcnZlclVybCArIG1vZHVsZSwgdXNyKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgkcm9vdFNjb3BlLnNlcnZlclVybCArIG1vZHVsZSArICcvJyArIHRva2VuKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBDcmVkZW50aWFsc1NlcnZpY2UuJGluamVjdCA9IFsgJyRodHRwJywgJyRyb290U2NvcGUnIF07XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcpLnNlcnZpY2UoJ2NyZWRlbnRpYWxzU2VydmljZScsIENyZWRlbnRpYWxzU2VydmljZSk7XG5cbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIEludGVybnNoaXBzU2VydmljZSgkaHR0cCwgJHJvb3RTY29wZSkge1xuXG4gICAgICAgIHZhciBtb2R1bGUgPSAnaW50ZXJuc2hpcHMnO1xuXG4gICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gJHJvb3RTY29wZS5zZXJ2ZXJVcmwgKyBtb2R1bGUgKyAnLz8nO1xuXG4gICAgICAgICAgICBpZiAocXVlcnkuY3JlZGVudGlhbElkKVxuICAgICAgICAgICAgICAgIHVybCArPSAnY3JlZGVudGlhbElkPScgKyBxdWVyeS5jcmVkZW50aWFsSWQ7XG5cbiAgICAgICAgICAgIGlmIChxdWVyeS5zdGF0dXMpXG4gICAgICAgICAgICAgICAgdXJsICs9ICcmc3RhdHVzPScgKyBxdWVyeS5zdGF0dXM7XG5cbiAgICAgICAgICAgIGlmIChxdWVyeS5uYW1lKVxuICAgICAgICAgICAgICAgIHVybCArPSAnJm5hbWU9JyArIHF1ZXJ5Lm5hbWU7XG5cbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uIChpbnRlcm5zaGlwKSB7XG4gICAgICAgICAgICBpbnRlcm5zaGlwLmNoYW5nZXIgPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnQ1JFREVOVElBTCcpKS5faWQ7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucHV0KCRyb290U2NvcGUuc2VydmVyVXJsICsgbW9kdWxlLCBpbnRlcm5zaGlwKTtcbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIEludGVybnNoaXBzU2VydmljZS4kaW5qZWN0ID0gWyAnJGh0dHAnLCAnJHJvb3RTY29wZScgXTtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhZnJtQXBwJykuc2VydmljZSgnaW50ZXJuc2hpcHNTZXJ2aWNlJywgSW50ZXJuc2hpcHNTZXJ2aWNlKTtcblxufSgpKTsiLCIoZnVuY3Rpb24gKCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gTG9nc1NlcnZpY2UoJGh0dHAsICRyb290U2NvcGUpIHtcblxuICAgICAgICB2YXIgbW9kdWxlID0gJ2xvZ3MnO1xuXG4gICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgkcm9vdFNjb3BlLnNlcnZlclVybCArIG1vZHVsZSk7XG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBMb2dzU2VydmljZS4kaW5qZWN0ID0gWyAnJGh0dHAnLCAnJHJvb3RTY29wZScgXTtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhZnJtQXBwJykuc2VydmljZSgnbG9nc1NlcnZpY2UnLCBMb2dzU2VydmljZSk7XG5cbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIEFwcHJvdmVJbnRlcm5zaGlwRGlhbG9nQ29udHJvbGxlcigkc2NvcGUsICRtZERpYWxvZywgaW50ZXJuc2hpcHNTZXJ2aWNlLCBsb2NhbHMpIHtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVJbnRlcm5zaGlwKCkge1xuICAgICAgICAgICAgJHNjb3BlLmlzU2F2aW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgaW50ZXJuc2hpcHNTZXJ2aWNlLnVwZGF0ZSgkc2NvcGUuaW50ZXJuc2hpcClcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCRzY29wZS5pbnRlcm5zaGlwKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVhc29uKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1NhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbihpc0FwcHJvdmUpIHtcblxuICAgICAgICAgICAgaWYgKGlzQXBwcm92ZSAmJiAkc2NvcGUuY3JlZGVudGlhbC5yb2xlID09PSAnY29vcmRpbmF0b3InKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmludGVybnNoaXAuc3RhdHVzID0gJ0VtIGFuZGFtZW50byc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmludGVybnNoaXAuYmVnaW4gID0gbW9tZW50KCkuZm9ybWF0KCdERC9NTS9ZWVlZJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmludGVybnNoaXAuZW5kICAgID0gbW9tZW50KG1vbWVudCgpKS5hZGQoNiwgJ21vbnRocycpLmZvcm1hdCgnREQvTU0vWVlZWScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzQXBwcm92ZSAmJiAkc2NvcGUuY3JlZGVudGlhbC5yb2xlID09PSAnY29vcmRpbmF0b3InKVxuICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcm5zaGlwLnN0YXR1cyA9ICdSZXByb3ZhZG8nO1xuXG4gICAgICAgICAgICBlbHNlIGlmICghaXNBcHByb3ZlICYmICRzY29wZS5jcmVkZW50aWFsLnJvbGUgPT09ICdzdHVkZW50JylcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW50ZXJuc2hpcC5zdGF0dXMgPSAnQ2FuY2VsYWRvJztcblxuICAgICAgICAgICAgdXBkYXRlSW50ZXJuc2hpcCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5jbG9zZURpYWxvZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIChmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgJHNjb3BlLmludGVybnNoaXAgPSBsb2NhbHMuaW50ZXJuc2hpcCB8fCB7fTtcbiAgICAgICAgICAgICRzY29wZS5jcmVkZW50aWFsID0gbG9jYWxzLmNyZWRlbnRpYWwgfHwge307XG4gICAgICAgIH0pKCk7XG4gICAgfVxuXG4gICAgQXBwcm92ZUludGVybnNoaXBEaWFsb2dDb250cm9sbGVyLiRpbmplY3QgPSBbICckc2NvcGUnLCAnJG1kRGlhbG9nJywgJ2ludGVybnNoaXBzU2VydmljZScsICdsb2NhbHMnIF07XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcpLmNvbnRyb2xsZXIoJ0FwcHJvdmVJbnRlcm5zaGlwRGlhbG9nQ29udHJvbGxlcicsIEFwcHJvdmVJbnRlcm5zaGlwRGlhbG9nQ29udHJvbGxlcik7XG5cbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIE1hbmFnZUNvbXBhbnlDb250cm9sbGVyKCRzY29wZSwgJG1kRGlhbG9nLCBjb21wYW5pZXNTZXJ2aWNlLCBsb2NhbHMpIHtcblxuICAgICAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uKGNvbXBhbnksIHN0YXR1cykge1xuXG4gICAgICAgICAgICAkc2NvcGUuaXNMb2FkaW5nQ29tcGFueSA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgY29tcGFueS5zdGF0dXMgPSAnQXByb3ZhZG8nO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbXBhbnkuc3RhdHVzID0gJ1JlcHJvdmFkbyc7XG5cblxuICAgICAgICAgICAgY29tcGFuaWVzU2VydmljZS51cGRhdGUoY29tcGFueSlcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0xvYWRpbmdDb21wYW55ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKGNvbXBhbnkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzTG9hZGluZ0NvbXBhbnkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVhc29uKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY2xvc2VEaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAoZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgICRzY29wZS5jb21wYW55ID0gbG9jYWxzLmNvbXBhbnkgfHwge307XG4gICAgICAgIH0pKCk7XG4gICAgfVxuXG4gICAgTWFuYWdlQ29tcGFueUNvbnRyb2xsZXIuJGluamVjdCA9IFsgJyRzY29wZScsICckbWREaWFsb2cnLCAnY29tcGFuaWVzU2VydmljZScsICdsb2NhbHMnIF07XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWZybUFwcCcpLmNvbnRyb2xsZXIoJ01hbmFnZUNvbXBhbnlDb250cm9sbGVyJywgTWFuYWdlQ29tcGFueUNvbnRyb2xsZXIpO1xuXG59KCkpOyIsIihmdW5jdGlvbiAoKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBJbnRlcm5zaGlwRGlhbG9nQ29udHJvbGxlcigkc2NvcGUsICRtZERpYWxvZywgaW50ZXJuc2hpcHNTZXJ2aWNlLCBsb2NhbHMpIHtcblxuICAgICAgICAkc2NvcGUuY2xvc2VEaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAoZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgICRzY29wZS5pbnRlcm5zaGlwID0gbG9jYWxzLmludGVybnNoaXAgfHwge307XG4gICAgICAgIH0pKCk7XG4gICAgfVxuXG4gICAgSW50ZXJuc2hpcERpYWxvZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsgJyRzY29wZScsICckbWREaWFsb2cnLCAnaW50ZXJuc2hpcHNTZXJ2aWNlJywgJ2xvY2FscycgXTtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhZnJtQXBwJykuY29udHJvbGxlcignSW50ZXJuc2hpcERpYWxvZ0NvbnRyb2xsZXInLCBJbnRlcm5zaGlwRGlhbG9nQ29udHJvbGxlcik7XG5cbn0oKSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
