!function(){"use strict";angular.module("afrmApp",["ngMaterial","ngAnimate","ngRoute","angular.filter","md.data.table"]).config(["$mdThemingProvider","$mdDateLocaleProvider",function(e,n){n.formatDate=function(e){return moment(e).format("YYYY-MM-DD")},e.theme("forest").primaryPalette("blue").accentPalette("teal").warnPalette("red").backgroundPalette("grey")}])}(),function(){"use strict";function e(e,n,t){n.serverUrl="https://dev-sistemas-server.herokuapp.com/",e.menu=function(e){t.path(e)},e.logout=function(){window.localStorage.removeItem("CREDENTIAL"),t.path("/login")},n.$on("$routeChangeSuccess",function(){e.credential=JSON.parse(window.localStorage.getItem("CREDENTIAL")),"/empresas"===t.path()?e.currentMenuIndex=0:"/solicitacoes"===t.path()?e.currentMenuIndex=1:e.currentMenuIndex=-1,n.isLogin="/login"===t.path()})}e.$inject=["$scope","$rootScope","$location"],angular.module("afrmApp").controller("MainController",e)}(),function(){"use strict";function e(e,n){e.when("/login",{templateUrl:"app/components/login/login.html",controller:"LoginController"}).when("/empresas",{templateUrl:"app/components/companies/companies.html",controller:"CompaniesController"}).when("/solicitacoes",{templateUrl:"app/components/internships/internships.html",controller:"InternshipsController"}).when("/registro",{templateUrl:"app/components/login/register.html",controller:"RegisterController"}).otherwise({redirectTo:"/login"}),n.html5Mode(!0)}angular.module("afrmApp").config(["$routeProvider","$locationProvider",e])}(),function(){"use strict";function e(e,n,t){function o(n){t.get(n).success(function(n){e.companies=n}).error(function(e){console.log(e)})}e.showDialog=function(e){"Aguardando aprovação"===e.status&&n.show({controller:"ManageCompanyController",templateUrl:"app/shared/templates/modals/company-dialog.html",parent:angular.element(document.body),locals:{company:e},clickOutsideToClose:!0})},e.search=function(e){o(e)},function(){e.companySelected=[],o()}()}angular.module("afrmApp").controller("CompaniesController",e),e.$inject=["$scope","$mdDialog","companiesService"]}(),function(){"use strict";function e(e){e.approveSolicitation=function(){},e.insertSolicitation=function(){}}angular.module("afrmApp").controller("HomeController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,n,t){e.approveInternshipDialog=function(t,o,r){"Aguardando aprovação"!==t.status||"coordinator"!==e.credential.role&&"student"!==e.credential.role||n.show({controller:"ApproveInternshipDialogController",templateUrl:"app/shared/templates/modals/approve-internship-dialog.html",locals:{internship:t||{},credential:o},parent:angular.element(document.body),targetEvent:r,clickOutsideToClose:!0})},e.internshipDialog=function(e,t){n.show({controller:"InternshipDialogController",templateUrl:"app/shared/templates/modals/internship-dialog.html",locals:{internship:e||{}},parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0})},e.search=function(n){var o={credentialId:e.credential._id};n.name&&(o.name=n.name.trim()),n.status&&"Todos"!==n.status.trim()&&(o.status=n.status.trim()),t.get(o).success(function(n){e.internships=n}).error(function(e){console.log(e)})},function(){var n={};e.query={},e.status=["Todos","Em andamento","Reprovado","Cancelado","Aguardando aprovação","Finalizado"],e.credential=JSON.parse(window.localStorage.getItem("CREDENTIAL"))||{},e.isStudent="student"===e.credential.role,n={credentialId:e.credential._id},t.get(n).success(function(n){e.internships=n}).error(function(e){console.log(e)})}()}angular.module("afrmApp").controller("InternshipsController",e),e.$inject=["$scope","$mdDialog","internshipsService"]}(),function(){"use strict";function e(e,n,t,o){e.login=function(r,i){var a={email:r,password:i};e.isLoading=!0,n.login(a).success(function(n){e.isLoading=!1,n?(window.localStorage.setItem("CREDENTIAL",JSON.stringify(n)),o.credential=n,t.path("/solicitacoes")):e.isWrongLogin=!0}).error(function(n){e.isLoading=!1,console.log(n)})}}angular.module("afrmApp").controller("LoginController",e),e.$inject=["$scope","credentialsService","$location","$rootScope"]}(),function(){"use strict";function e(e,n,t,o,r){e.createAccount=function(e){n.create(e).success(function(e){e&&(o.show(o.simple().textContent("Usuário criado com sucesso").position("bottom").hideDelay(3e3)),r(function(){t("/login")},3e3))}).error(function(e){console.log(e)})}}angular.module("afrmApp").controller("RegisterController",e),e.$inject=["$scope","credentialsService","$location","$mdToast","$timeout"]}(),function(){"use strict";function e(e){e.approveSolicitation=function(){},e.insertSolicitation=function(){}}angular.module("afrmApp").controller("SolicitationController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,n){var t="companies";this.create=function(o){return e.post(n.serverUrl+t,o)},this.update=function(o){return e.put(n.serverUrl+t,o)},this.get=function(o){var r=n.serverUrl+t;return o&&(r=r+"/"+o),e.get(r)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("companiesService",e)}(),function(){"use strict";function e(e,n){var t="credentials";this.login=function(o){var r="?email="+o.email+"&password="+o.password;return e.get(n.serverUrl+t+"/"+r)},this.create=function(o){return e.post(n.serverUrl+t,o)},this.logout=function(o){return e.get(n.serverUrl+t+"/"+o)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("credentialsService",e)}(),function(){"use strict";function e(e,n){var t="internships";this.get=function(o){var r=n.serverUrl+t+"/?";return o.credentialId&&(r+="credentialId="+o.credentialId),o.status&&(r+="&status="+o.status),o.name&&(r+="&name="+o.name),e.get(r)},this.update=function(o){return e.put(n.serverUrl+t,o)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("internshipsService",e)}(),function(){"use strict";function e(e,n,t,o){function r(){e.isSaving=!0,t.update(e.internship).success(function(){e.isSaving=!1,n.hide(e.internship)}).error(function(t){console.log(t),e.isSaving=!1,n.hide()})}e.save=function(n){n&&"coordinator"===e.credential.role?(e.internship.status="Em andamento",e.internship.begin=moment().format("DD/MM/YYYY"),e.internship.end=moment(moment()).add(6,"months").format("DD/MM/YYYY")):n||"coordinator"!==e.credential.role?n||"student"!==e.credential.role||(e.internship.status="Cancelado"):e.internship.status="Reprovado",r()},e.closeDialog=function(){n.cancel()},function(){e.internship=o.internship||{},e.credential=o.credential||{}}()}e.$inject=["$scope","$mdDialog","internshipsService","locals"],angular.module("afrmApp").controller("ApproveInternshipDialogController",e)}(),function(){"use strict";function e(e,n,t,o){e.save=function(o,r){e.isLoadingCompany=!0,r===!0?o.status="Aprovado":o.status="Reprovado",t.update(o).success(function(){e.isLoadingCompany=!1,n.hide(o)}).error(function(n){e.isLoadingCompany=!1,console.log(n)})},e.closeDialog=function(){n.cancel()},function(){e.company=o.company||{}}()}e.$inject=["$scope","$mdDialog","companiesService","locals"],angular.module("afrmApp").controller("ManageCompanyController",e)}(),function(){"use strict";function e(e,n,t,o){e.closeDialog=function(){n.cancel()},function(){e.internship=o.internship||{}}()}e.$inject=["$scope","$mdDialog","internshipsService","locals"],angular.module("afrmApp").controller("InternshipDialogController",e)}();
//# sourceMappingURL=data:application/json;base64,
