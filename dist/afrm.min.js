!function(){"use strict";angular.module("afrmApp",["ngMaterial","ngAnimate","ngRoute","angular.filter","md.data.table"]).config(["$mdThemingProvider","$mdDateLocaleProvider",function(o,n){n.formatDate=function(o){return moment(o).format("YYYY-MM-DD")},o.theme("forest").primaryPalette("blue").accentPalette("teal").warnPalette("red").backgroundPalette("grey")}])}(),function(){"use strict";function o(o,n,e){n.serverUrl="http://localhost:3000/",o.menu=function(o){e.path(o)}}o.$inject=["$scope","$rootScope","$location"],angular.module("afrmApp").controller("MainController",o)}(),function(){"use strict";function o(o,n){o.when("/",{templateUrl:"app/components/home/home.html",controller:"HomeController"}).when("/login",{templateUrl:"app/components/login/login.html",controller:"LoginController"}).when("/solicitacao",{templateUrl:"app/components/solicitation/solicitation.html",controller:"SolicitationController"}).when("/empresas",{templateUrl:"app/components/companies/companies.html",controller:"CompaniesController"}).when("/registro",{templateUrl:"app/components/login/register.html",controller:"RegisterController"}).otherwise({redirectTo:"/"}),n.html5Mode(!0)}angular.module("afrmApp").config(["$routeProvider","$locationProvider",o])}(),function(){"use strict";function o(o,n,e){o.showDialog=function(e){n.show({controller:"ManageCompanyController",templateUrl:"app/shared/templates/modals/manage-company.html",parent:angular.element(document.body),locals:{company:e||null},clickOutsideToClose:!0}).then(function(n,e){n&&(e?o.companies.push(n):o.companies.forEach(function(o){o._id===n._id&&(o=n)}))},function(){})},function(){e.get().success(function(n){o.companies=n}).error(function(o){console.log(o)})}()}angular.module("afrmApp").controller("CompaniesController",o),o.$inject=["$scope","$mdDialog","companiesService"]}(),function(){"use strict";function o(o){o.approveSolicitation=function(){},o.insertSolicitation=function(){}}angular.module("afrmApp").controller("HomeController",o),o.$inject=["$scope"]}(),function(){"use strict";function o(o,n){o.login=function(o,e){var t={email:o,password:e};n.login(t).success(function(o){o&&window.sessionStorage.setItem("TOKEN",o)}).error(function(o){console.log(o)})},function(){console.log("logincontroller")}()}angular.module("afrmApp").controller("LoginController",o),o.$inject=["$scope","credentialsService"]}(),function(){"use strict";function o(o,n,e,t,r){o.createAccount=function(o){n.create(o).success(function(o){o&&(t.show(t.simple().textContent("Usu√°rio criado com sucesso").position("bottom").hideDelay(3e3)),r(function(){e("/login")},3e3))}).error(function(o){console.log(o)})}}angular.module("afrmApp").controller("RegisterController",o),o.$inject=["$scope","credentialsService","$location","$mdToast","$timeout"]}(),function(){"use strict";function o(o){o.approveSolicitation=function(){},o.insertSolicitation=function(){}}angular.module("afrmApp").controller("SolicitationController",o),o.$inject=["$scope"]}(),function(){"use strict";function o(o,n){var e="companies";this.create=function(t){return o.post(n.serverUrl+e,t)},this.update=function(t){return o.put(n.serverUrl+e,t)},this.get=function(){return o.get(n.serverUrl+e)}}o.$inject=["$http","$rootScope"],angular.module("afrmApp").service("companiesService",o)}(),function(){"use strict";function o(o,n){var e="credentials";this.login=function(t){var r="?email="+t.email+"&password="+t.password;return o.get(n.serverUrl+e+r)},this.create=function(t){return o.post(n.serverUrl+e,t)},this.logout=function(t){return o.get(n.serverUrl+e+"/"+t)}}o.$inject=["$http","$rootScope"],angular.module("afrmApp").service("credentialsService",o)}(),function(){"use strict";function o(o,n,e,t){o.save=function(t){var r;o.isLoadingCompany=!0,o.isEditing?(r=!1,e.update(t).success(function(e){o.isLoadingCompany=!1,n.hide(e,r)}).error(function(n){o.isLoadingCompany=!1,console.log(n)})):(r=!0,e.create(t).success(function(e){o.isLoadingCompany=!1,n.hide(e,r)}).error(function(n){o.isLoadingCompany=!1,console.log(n)}))},function(){t.company&&(o.isEditing=!0),o.company=t.company||{}}()}o.$inject=["$scope","$mdDialog","companiesService","locals"],angular.module("afrmApp").controller("ManageCompanyController",o)}();
//# sourceMappingURL=data:application/json;base64,
