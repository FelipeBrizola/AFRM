!function(){"use strict";angular.module("afrmApp",["ngMaterial","ngAnimate","ngRoute","angular.filter","md.data.table"]).config(["$mdThemingProvider","$mdDateLocaleProvider",function(n,o){o.formatDate=function(n){return moment(n).format("YYYY-MM-DD")},n.theme("forest").primaryPalette("blue").accentPalette("teal").warnPalette("red").backgroundPalette("grey")}])}(),function(){"use strict";function n(n,o,e){o.serverUrl="http://localhost:3000/",n.menu=function(n){e.path(n)}}n.$inject=["$scope","$rootScope","$location"],angular.module("afrmApp").controller("MainController",n)}(),function(){"use strict";function n(n,o){n.when("/",{templateUrl:"app/components/home/home.html",controller:"HomeController"}).when("/login",{templateUrl:"app/components/login/login.html",controller:"LoginController"}).when("/solicitacao",{templateUrl:"app/components/solicitation/solicitation.html",controller:"SolicitationController"}).when("/empresas",{templateUrl:"app/components/companies/companies.html",controller:"CompaniesController"}).when("/estagios",{templateUrl:"app/components/internships/internships.html",controller:"InternshipsController"}).when("/registro",{templateUrl:"app/components/login/register.html",controller:"RegisterController"}).otherwise({redirectTo:"/"}),o.html5Mode(!0)}angular.module("afrmApp").config(["$routeProvider","$locationProvider",n])}(),function(){"use strict";function n(n,o,e){n.showDialog=function(e){o.show({controller:"ManageCompanyController",templateUrl:"app/shared/templates/modals/manage-company.html",parent:angular.element(document.body),locals:{company:e||null},clickOutsideToClose:!0}).then(function(o,e){o&&(e?n.companies.push(o):n.companies.forEach(function(n){n._id===o._id&&(n=o)}))},function(){})},function(){e.get().success(function(o){n.companies=o}).error(function(n){console.log(n)})}()}angular.module("afrmApp").controller("CompaniesController",n),n.$inject=["$scope","$mdDialog","companiesService"]}(),function(){"use strict";function n(n){n.approveSolicitation=function(){},n.insertSolicitation=function(){}}angular.module("afrmApp").controller("HomeController",n),n.$inject=["$scope"]}(),function(){"use strict";function n(n,o){n.showDialog=function(n){o.show({controller:"InternshipDialogController",templateUrl:"app/shared/templates/modals/internship-dialog.html",parent:angular.element(document.body),locals:{internship:n||null},clickOutsideToClose:!0}).then(function(){},function(){})},function(){n.status=["Aprovado","Em andamento","Aguardando aprovação"],n.internships=[{company:"HP",student:"Felipe","class":"Ciencia da comp.",begin:"10/06/2016",end:"10/12/2016",status:!0},{company:"HP",student:"Felipe","class":"Ciencia da comp.",begin:"10/06/2016",end:"10/12/2016",status:!0},{company:"Pling",student:"Teste","class":"Eng da comp.",begin:"10/06/2016",end:"10/12/2016",status:!1}]}()}angular.module("afrmApp").controller("InternshipsController",n),n.$inject=["$scope","$mdDialog"]}(),function(){"use strict";function n(n,o){n.login=function(n,e){var t={email:n,password:e};o.login(t).success(function(n){n&&window.sessionStorage.setItem("TOKEN",n)}).error(function(n){console.log(n)})},function(){console.log("logincontroller")}()}angular.module("afrmApp").controller("LoginController",n),n.$inject=["$scope","credentialsService"]}(),function(){"use strict";function n(n,o,e,t,r){n.createAccount=function(n){o.create(n).success(function(n){n&&(t.show(t.simple().textContent("Usuário criado com sucesso").position("bottom").hideDelay(3e3)),r(function(){e("/login")},3e3))}).error(function(n){console.log(n)})}}angular.module("afrmApp").controller("RegisterController",n),n.$inject=["$scope","credentialsService","$location","$mdToast","$timeout"]}(),function(){"use strict";function n(n){n.approveSolicitation=function(){},n.insertSolicitation=function(){}}angular.module("afrmApp").controller("SolicitationController",n),n.$inject=["$scope"]}(),function(){"use strict";function n(n,o){var e="companies";this.create=function(t){return n.post(o.serverUrl+e,t)},this.update=function(t){return n.put(o.serverUrl+e,t)},this.get=function(){return n.get(o.serverUrl+e)}}n.$inject=["$http","$rootScope"],angular.module("afrmApp").service("companiesService",n)}(),function(){"use strict";function n(n,o){var e="credentials";this.login=function(t){var r="?email="+t.email+"&password="+t.password;return n.get(o.serverUrl+e+r)},this.create=function(t){return n.post(o.serverUrl+e,t)},this.logout=function(t){return n.get(o.serverUrl+e+"/"+t)}}n.$inject=["$http","$rootScope"],angular.module("afrmApp").service("credentialsService",n)}(),function(){"use strict";function n(n,o,e){n.save=function(n){return n},function(){n.internship=e.internship||{}}()}n.$inject=["$scope","$mdDialog","locals"],angular.module("afrmApp").controller("InternshipDialogController",n)}(),function(){"use strict";function n(n,o,e,t){n.save=function(t){var r;n.isLoadingCompany=!0,n.isEditing?(r=!1,e.update(t).success(function(e){n.isLoadingCompany=!1,o.hide(e,r)}).error(function(o){n.isLoadingCompany=!1,console.log(o)})):(r=!0,e.create(t).success(function(e){n.isLoadingCompany=!1,o.hide(e,r)}).error(function(o){n.isLoadingCompany=!1,console.log(o)}))},function(){t.company&&(n.isEditing=!0),n.company=t.company||{}}()}n.$inject=["$scope","$mdDialog","companiesService","locals"],angular.module("afrmApp").controller("ManageCompanyController",n)}();
//# sourceMappingURL=data:application/json;base64,
