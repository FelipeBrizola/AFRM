!function(){"use strict";angular.module("afrmApp",["ngMaterial","ngAnimate","ngRoute","angular.filter","md.data.table"]).config(["$mdThemingProvider","$mdDateLocaleProvider",function(e,n){n.formatDate=function(e){return moment(e).format("YYYY-MM-DD")},e.theme("forest").primaryPalette("blue").accentPalette("teal").warnPalette("red").backgroundPalette("grey")}])}(),function(){"use strict";function e(e,n,o){n.serverUrl="https://dev-sistemas-server.herokuapp.com/",e.menu=function(e){o.path(e)},e.logout=function(){window.localStorage.removeItem("CREDENTIAL"),o.path("/login")},n.$on("$routeChangeSuccess",function(){e.credential=JSON.parse(window.localStorage.getItem("CREDENTIAL")),"/empresas"===o.path()?e.currentMenuIndex=0:"/solicitacoes"===o.path()?e.currentMenuIndex=1:"/logs"===o.path()?e.currentMenuIndex=2:e.currentMenuIndex=-1,n.isLogin="/login"===o.path()})}e.$inject=["$scope","$rootScope","$location"],angular.module("afrmApp").controller("MainController",e)}(),function(){"use strict";function e(e,n){e.when("/login",{templateUrl:"app/components/login/login.html",controller:"LoginController"}).when("/empresas",{templateUrl:"app/components/companies/companies.html",controller:"CompaniesController"}).when("/solicitacoes",{templateUrl:"app/components/internships/internships.html",controller:"InternshipsController"}).when("/logs",{templateUrl:"app/components/logs/logs.html",controller:"LogsController"}).when("/registro",{templateUrl:"app/components/login/register.html",controller:"RegisterController"}).otherwise({redirectTo:"/login"}),n.html5Mode(!0)}angular.module("afrmApp").config(["$routeProvider","$locationProvider",e])}(),function(){"use strict";function e(e,n,o){function t(n){e.isLoadingCompanies=!0,o.get(n).success(function(n){e.companies=n,e.isLoadingCompanies=!1}).error(function(n){console.log(n),e.isLoadingCompanies=!1})}e.showDialog=function(e){"Aguardando aprovação"===e.status&&n.show({controller:"ManageCompanyController",templateUrl:"app/shared/templates/modals/company-dialog.html",parent:angular.element(document.body),locals:{company:e},clickOutsideToClose:!0})},e.search=function(e){t(e)},function(){e.companySelected=[],t()}()}angular.module("afrmApp").controller("CompaniesController",e),e.$inject=["$scope","$mdDialog","companiesService"]}(),function(){"use strict";function e(e){e.approveSolicitation=function(){},e.insertSolicitation=function(){}}angular.module("afrmApp").controller("HomeController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,n,o){e.approveInternshipDialog=function(o,t,r){"Aguardando aprovação"!==o.status||"coordinator"!==e.credential.role&&"student"!==e.credential.role||n.show({controller:"ApproveInternshipDialogController",templateUrl:"app/shared/templates/modals/approve-internship-dialog.html",locals:{internship:o||{},credential:t},parent:angular.element(document.body),targetEvent:r,clickOutsideToClose:!0})},e.internshipDialog=function(o,t){n.show({controller:"InternshipDialogController",templateUrl:"app/shared/templates/modals/internship-dialog.html",locals:{internship:angular.copy(o)||{}},parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!0}).then(function(n){var o=0;for(o;o<e.internships.length;o+=1)if(e.internships[o]._id===n._id){e.internships[o]=n;break}})},e.search=function(n){var t={credentialId:e.credential._id};n.name&&(t.name=n.name.trim()),n.status&&"Todos"!==n.status.trim()&&(t.status=n.status.trim()),o.get(t).success(function(n){e.internships=n}).error(function(e){console.log(e)})},function(){var n={};e.query={},e.status=["Todos","Em andamento","Reprovado","Cancelado","Aguardando aprovação","Finalizado"],e.credential=JSON.parse(window.localStorage.getItem("CREDENTIAL"))||{},e.isStudent="student"===e.credential.role,n={credentialId:e.credential._id},e.isLoadingInternships=!0,o.get(n).success(function(n){e.internships=n,e.isLoadingInternships=!1}).error(function(n){console.log(n),e.isLoadingInternships=!1})}()}angular.module("afrmApp").controller("InternshipsController",e),e.$inject=["$scope","$mdDialog","internshipsService"]}(),function(){"use strict";function e(e,n,o,t){e.login=function(r,i){var a={email:r,password:i};e.isLoading=!0,n.login(a).success(function(n){e.isLoading=!1,n?(window.localStorage.setItem("CREDENTIAL",JSON.stringify(n)),t.credential=n,o.path("/solicitacoes")):e.isWrongLogin=!0}).error(function(n){e.isLoading=!1,console.log(n)})}}angular.module("afrmApp").controller("LoginController",e),e.$inject=["$scope","credentialsService","$location","$rootScope"]}(),function(){"use strict";function e(e,n,o,t,r){e.createAccount=function(e){n.create(e).success(function(e){e&&(t.show(t.simple().textContent("Usuário criado com sucesso").position("bottom").hideDelay(3e3)),r(function(){o("/login")},3e3))}).error(function(e){console.log(e)})}}angular.module("afrmApp").controller("RegisterController",e),e.$inject=["$scope","credentialsService","$location","$mdToast","$timeout"]}(),function(){"use strict";function e(e){e.approveSolicitation=function(){},e.insertSolicitation=function(){}}angular.module("afrmApp").controller("SolicitationController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,n){!function(){e.tableParams={limit:5,page:1},e.isLoadingLogs=!0,n.get().success(function(n){e.logs=n,e.isLoadingLogs=!1,e.tableParams.total=n.length}).error(function(n){e.isLoadingLogs=!1,console.log(n)})}()}angular.module("afrmApp").controller("LogsController",e),e.$inject=["$scope","logsService"]}(),function(){"use strict";function e(e,n){var o="companies";this.create=function(t){return e.post(n.serverUrl+o,t)},this.update=function(t){return t.changer=JSON.parse(window.localStorage.getItem("CREDENTIAL"))._id,e.put(n.serverUrl+o,t)},this.get=function(t){var r=n.serverUrl+o;return t&&(r=r+"/"+t),e.get(r)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("companiesService",e)}(),function(){"use strict";function e(e,n){var o="credentials";this.login=function(t){var r="?email="+t.email+"&password="+t.password;return e.get(n.serverUrl+o+"/"+r)},this.create=function(t){return e.post(n.serverUrl+o,t)},this.logout=function(t){return e.get(n.serverUrl+o+"/"+t)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("credentialsService",e)}(),function(){"use strict";function e(e,n){var o="internships";this.get=function(t){var r=n.serverUrl+o+"/?";return t.credentialId&&(r+="credentialId="+t.credentialId),t.status&&(r+="&status="+t.status),t.name&&(r+="&name="+t.name),e.get(r)},this.update=function(t){return t.changer=JSON.parse(window.localStorage.getItem("CREDENTIAL"))._id,e.put(n.serverUrl+o,t)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("internshipsService",e)}(),function(){"use strict";function e(e,n){var o="logs";this.get=function(){return e.get(n.serverUrl+o)}}e.$inject=["$http","$rootScope"],angular.module("afrmApp").service("logsService",e)}(),function(){"use strict";function e(e,n,o,t){function r(){e.isSaving=!0,o.update(e.internship).success(function(){e.isSaving=!1,n.hide(e.internship)}).error(function(o){console.log(o),e.isSaving=!1,n.hide()})}e.save=function(n){n&&"coordinator"===e.credential.role?(e.internship.status="Em andamento",e.internship.begin=moment().format("DD/MM/YYYY"),e.internship.end=moment(moment()).add(6,"months").format("DD/MM/YYYY")):n||"coordinator"!==e.credential.role?n||"student"!==e.credential.role||(e.internship.status="Cancelado"):e.internship.status="Reprovado",r()},e.closeDialog=function(){n.cancel()},function(){e.internship=t.internship||{},e.credential=t.credential||{}}()}e.$inject=["$scope","$mdDialog","internshipsService","locals"],angular.module("afrmApp").controller("ApproveInternshipDialogController",e)}(),function(){"use strict";function e(e,n,o,t){e.save=function(t,r){e.isLoadingCompany=!0,r===!0?t.status="Aprovado":t.status="Reprovado",o.update(t).success(function(){e.isLoadingCompany=!1,n.hide(t)}).error(function(n){e.isLoadingCompany=!1,console.log(n)})},e.closeDialog=function(){n.cancel()},function(){e.company=t.company||{}}()}e.$inject=["$scope","$mdDialog","companiesService","locals"],angular.module("afrmApp").controller("ManageCompanyController",e)}(),function(){"use strict";function e(e,n,o,t){e.closeDialog=function(){n.cancel()},e.update=function(e){o.update(e).success(function(o){n.hide(e)}).error(function(e){})},function(){var n=JSON.parse(window.localStorage.getItem("CREDENTIAL")).role;e.internship=t.internship||{},e.isEditable="student"===n&&e.internship&&"Aguardando aprovação"===e.internship.status}()}e.$inject=["$scope","$mdDialog","internshipsService","locals"],angular.module("afrmApp").controller("InternshipDialogController",e)}();
//# sourceMappingURL=data:application/json;base64,
