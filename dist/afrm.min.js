!function(){"use strict";angular.module("afrmApp",["ngMaterial","ngAnimate","ngRoute","angular.filter","md.data.table"]).config(["$mdThemingProvider","$mdDateLocaleProvider",function(n,e){e.formatDate=function(n){return moment(n).format("YYYY-MM-DD")},n.theme("forest").primaryPalette("blue").accentPalette("teal").warnPalette("red").backgroundPalette("grey")}])}(),function(){"use strict";function n(n,e,o){e.serverUrl="https://dev-sistemas.herokuapp.com/",n.menu=function(n){o.path(n)},e.$on("$routeChangeSuccess",function(){"/empresas"===o.path()?n.currentMenuIndex=1:"/solicitacao"===o.path()?n.currentMenuIndex=0:"/estagios"===o.path()?n.currentMenuIndex=2:n.currentMenuIndex=-1,e.isLogin="/login"===o.path()})}n.$inject=["$scope","$rootScope","$location"],angular.module("afrmApp").controller("MainController",n)}(),function(){"use strict";function n(n,e){n.when("/login",{templateUrl:"app/components/login/login.html",controller:"LoginController"}).when("/solicitacao",{templateUrl:"app/components/solicitation/solicitation.html",controller:"SolicitationController"}).when("/empresas",{templateUrl:"app/components/companies/companies.html",controller:"CompaniesController"}).when("/estagios",{templateUrl:"app/components/internships/internships.html",controller:"InternshipsController"}).when("/registro",{templateUrl:"app/components/login/register.html",controller:"RegisterController"}).otherwise({redirectTo:"/login"}),e.html5Mode(!0)}angular.module("afrmApp").config(["$routeProvider","$locationProvider",n])}(),function(){"use strict";function n(n,e,o){n.showDialog=function(o){e.show({controller:"ManageCompanyController",templateUrl:"app/shared/templates/modals/manage-company.html",parent:angular.element(document.body),locals:{company:o||null},clickOutsideToClose:!0}).then(function(e,o){e&&(o?n.companies.push(e):n.companies.forEach(function(n){n._id===e._id&&(n=e)}))},function(){})},function(){o.get().success(function(e){n.companies=e}).error(function(n){console.log(n)})}()}angular.module("afrmApp").controller("CompaniesController",n),n.$inject=["$scope","$mdDialog","companiesService"]}(),function(){"use strict";function n(n){n.approveSolicitation=function(){},n.insertSolicitation=function(){}}angular.module("afrmApp").controller("HomeController",n),n.$inject=["$scope"]}(),function(){"use strict";function n(n,e,o){n.showDialog=function(n){e.show({controller:"InternshipDialogController",templateUrl:"app/shared/templates/modals/internship-dialog.html",parent:angular.element(document.body),locals:{internship:n||null},clickOutsideToClose:!0}).then(function(){console.log("ok")},function(){})},n.search=function(e){var t={credentialId:n.credential._id};e.name&&(t.name=e.name.trim()),e.status&&"Todos"!==e.status.trim()&&(t.status=e.status.trim()),o.get(t).success(function(e){n.internships=e}).error(function(n){console.log(n)})},function(){var e={};n.query={},n.status=["Todos","Aprovado","Em andamento","Reprovado","Cancelado","Aguardando aprovação"],n.credential=JSON.parse(window.localStorage.getItem("CREDENTIAL")),n.isStudent="student"===n.credential.role,e={credentialId:n.credential._id},o.get(e).success(function(e){n.internships=e}).error(function(n){console.log(n)})}()}angular.module("afrmApp").controller("InternshipsController",n),n.$inject=["$scope","$mdDialog","internshipsService"]}(),function(){"use strict";function n(n,e,o){n.login=function(n,t){var r={email:n,password:t};e.login(r).success(function(n){n&&(window.localStorage.setItem("CREDENTIAL",JSON.stringify(n)),o.path("/estagios"))}).error(function(n){console.log(n)})},function(){console.log("logincontroller")}()}angular.module("afrmApp").controller("LoginController",n),n.$inject=["$scope","credentialsService","$location"]}(),function(){"use strict";function n(n,e,o,t,r){n.createAccount=function(n){e.create(n).success(function(n){n&&(t.show(t.simple().textContent("Usuário criado com sucesso").position("bottom").hideDelay(3e3)),r(function(){o("/login")},3e3))}).error(function(n){console.log(n)})}}angular.module("afrmApp").controller("RegisterController",n),n.$inject=["$scope","credentialsService","$location","$mdToast","$timeout"]}(),function(){"use strict";function n(n){n.approveSolicitation=function(){},n.insertSolicitation=function(){}}angular.module("afrmApp").controller("SolicitationController",n),n.$inject=["$scope"]}(),function(){"use strict";function n(n,e){var o="companies";this.create=function(t){return n.post(e.serverUrl+o,t)},this.update=function(t){return n.put(e.serverUrl+o,t)},this.get=function(){return n.get(e.serverUrl+o)}}n.$inject=["$http","$rootScope"],angular.module("afrmApp").service("companiesService",n)}(),function(){"use strict";function n(n,e){var o="credentials";this.login=function(t){var r="?email="+t.email+"&password="+t.password;return n.get(e.serverUrl+o+"/"+r)},this.create=function(t){return n.post(e.serverUrl+o,t)},this.logout=function(t){return n.get(e.serverUrl+o+"/"+t)}}n.$inject=["$http","$rootScope"],angular.module("afrmApp").service("credentialsService",n)}(),function(){"use strict";function n(n,e){var o="internships";this.get=function(t){var r=e.serverUrl+o+"/?";return t.credentialId&&(r+="credentialId="+t.credentialId),t.status&&(r+="&status="+t.status),t.name&&(r+="&name="+t.name),n.get(r)}}n.$inject=["$http","$rootScope"],angular.module("afrmApp").service("internshipsService",n)}(),function(){"use strict";function n(n,e,o){n.save=function(n){return n},function(){n.internship=o.internship||{}}()}n.$inject=["$scope","$mdDialog","locals"],angular.module("afrmApp").controller("InternshipDialogController",n)}(),function(){"use strict";function n(n,e,o,t){n.save=function(t){var r;n.isLoadingCompany=!0,n.isEditing?(r=!1,o.update(t).success(function(o){n.isLoadingCompany=!1,e.hide(o,r)}).error(function(e){n.isLoadingCompany=!1,console.log(e)})):(r=!0,o.create(t).success(function(o){n.isLoadingCompany=!1,e.hide(o,r)}).error(function(e){n.isLoadingCompany=!1,console.log(e)}))},function(){t.company&&(n.isEditing=!0),n.company=t.company||{}}()}n.$inject=["$scope","$mdDialog","companiesService","locals"],angular.module("afrmApp").controller("ManageCompanyController",n)}();
//# sourceMappingURL=data:application/json;base64,
