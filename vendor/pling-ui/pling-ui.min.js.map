{"version":3,"sources":["main.js","app.module.js","components/#template_demo/myComponentSample.js","components/plgAppBar/plgAppBar.js","components/plgBackgroundImage/plgBackgroundImage.js","components/plgCalendar/plgCalendar.js","components/plgCalendar/plgCalendarFactory.js","components/plgChangeIconView/plgChangeIconView.js","components/plgChangeTypeList/plgChangeTypeList.js","components/plgComboBox/plgComboBox.js","components/plgDataTable/plgDataTable.js","components/plgDataTableFilters/plgDataTableFilters.js","components/plgDataTableSearch/plgDataTableSearch.js","components/plgDatePicker/plgDatePicker.js","components/plgDragAndDropLists/plgDragAndDropLists.js","components/plgDynamicFilter/plgDynamicFilter.js","components/plgEditFabSpeedDial/plgEditFabSpeedDial.controller.js","components/plgEditFabSpeedDial/plgEditFabSpeedDial.js","components/plgElasticSearch/plgElasticSearch.js","components/plgElasticSearch/plgElasticSearchService.js","components/PlgFormCard/PlgFormCard.js","components/plgFormFields/plgFormFields.js","components/plgFormList/PlgFormList.js","components/plgGroupFilters/plgGroupFilters.js","components/plgImgCrop/ng-img-crop.js","components/plgInfiniteScroll/plgInfiniteScroll.js","components/plgLabelLoadingContent/plgLabelLoadingContent.js","components/plgListView/plgListView.js","components/plgLoadingLayer/plgLoadingLayer.js","components/plgScroller/plg-scroller.js","components/plgScrollTo/plgScrollTo.js","components/plgScrollTo/plgScrollToOptions.js","components/plgScrollTo/plgScrollToService.js","components/plgServiceBar/plgServiceBar.js","components/plgSetFocus/plgSetFocus.js","components/plgSimpleCombo/plgSimpleCombo.js","components/plgSimpleCombo/plgSimpleComboFactory.js","components/plgTimePicker/plgTimePicker.js","components/plgToolbarList/plgToolbarList.js","core/apis/applications-service.js","core/apis/cep-service.js","core/apis/coreapi-service.js","core/apis/credentials-service.js","core/apis/drive-service.js","core/apis/elastic-service.js","core/apis/http-helper.js","core/apis/http-service.js","core/apis/profiles-service.js","core/apis/token-service.js","core/apis/websocket-service.js","core/boot/bootstrapper.js","core/boot/index.js","core/boot/loader.js","core/caching/caching-service.js","core/commons/localstorage-service.js","core/commons/sessionstorage-service.js","core/commons/toastr-service.js","core/config/interceptor.js","core/debugging/error-handler.js","core/debugging/logger.js","app.templates.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnrxthjtjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACppnlEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvltZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvppCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pling-ui.min.js","sourcesContent":["(function (context) {\r\n    'use strict';\r\n\r\n    // starting global context\r\n    context.pling = {};\r\n\r\n}(window));\r\n","(function () {\r\n    'use strict';\r\n\r\n    /*\r\n        Unfortunately when you use window.history.replaceState with angular-route you have big problems\r\n        (angular-issue:6172)\r\n        The reason for this is that Angular can't change anything before the hash without the browser reloading the page\r\n    */\r\n    var clean_uri = location.protocol + \"//\" + location.host + location.pathname, // eslint-disable-line\r\n        hash_pos = location.href.indexOf(\"#\"), // eslint-disable-line\r\n        hash,\r\n        queryString = '';\r\n\r\n    if (hash_pos > 0) {\r\n        hash = location.href.substring(hash_pos, location.href.length); // eslint-disable-line\r\n        clean_uri += hash;\r\n    }\r\n\r\n    if (window && window.location && window.location.search) {\r\n        localStorage.setItem('PLING-QUERY-STRING', window.location.search); // eslint-disable-line\r\n        queryString = window.location.search;\r\n\r\n        // Checking if it comes from other applications with querystring token\r\n        if (queryString.indexOf('token=') === 1) {\r\n\r\n            // Will set token to localStorage\r\n            localStorage.setItem('PLING-TOKEN', queryString.split('=')[1]); // eslint-disable-line\r\n        }\r\n    }\r\n\r\n    // Clear URL\r\n    window.history.replaceState({}, document.title, clean_uri);\r\n\r\n    // Config method\r\n    function PlingUiConfig($provide, $httpProvider) {\r\n\r\n        $provide.decorator('$log', function ($delegate, shadowLogger) {\r\n            return shadowLogger($delegate);\r\n        });\r\n\r\n        // Interceptor that add token in each Header Request\r\n        $httpProvider.interceptors.push('plingRequestInterceptor');\r\n    }\r\n\r\n    // Run method\r\n    function PlingUiRun(options, $injector) {\r\n        var cache = null;\r\n\r\n        if (options.onRun && options.onRun.cacheViews) {\r\n            cache = $injector.get('cacheService');\r\n            cache.cacheViews();\r\n        }\r\n    }\r\n\r\n    // Injeção de Dependência\r\n    angular.module('plingUi', [\r\n        'plingUi.templates',\r\n        'ngMaterial',\r\n        'datetime',\r\n        'angular.filter',\r\n        'md.data.table',\r\n        'dndLists',\r\n        'luegg.directives'\r\n    ]);\r\n\r\n    angular.module('plingUi').config(['$provide', '$httpProvider', PlingUiConfig]);\r\n    angular.module('plingUi').run(['boot.options', '$injector', PlingUiRun]);\r\n}());\r\n","/* global angular */\r\n\r\n/* More about AngularJS Directives:\r\n    http://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-i-the-fundamentals */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    /* AQUI SE CRIA A DIRETIVA */\r\n    angular.module('plingUi').directive('plgSample', function () {\r\n\r\n        return {\r\n\r\n            // E = element, A = attribute, C = class, M = comment\r\n            'restrict'    : 'E',\r\n\r\n            // Your Controller\r\n            'controller'  : 'MyController',\r\n\r\n            // Your HTML Template\r\n            // You can also use 'template': <div>{{yourScopeVar}}</div>' intead of 'templateUrl'\r\n            'templateUrl' : 'myComponentSample.html',\r\n\r\n            // DOM manipulation\r\n            'link' : function ($scope, element, attrs) {\r\n\r\n                element.css('background-color', 'white');\r\n                $scope.tagline = 'it Works! Attrs: ' + attrs;\r\n\r\n            }\r\n        };\r\n\r\n    });\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Injeção de dependências\r\n    plgAppBarController.$inject = [\r\n        '$scope',\r\n        'applicationsService',\r\n        '$rootScope'\r\n    ];\r\n\r\n    // Component configuration\r\n    angular.module('plingUi').component('plgAppBar', {\r\n        'templateUrl' : 'plg-app-bar.html',\r\n        'restrict'      : 'E',\r\n        'controller'  : plgAppBarController,\r\n        'bindings'    : {}\r\n    });\r\n\r\n    // CREATING CONTROLLER\r\n    function plgAppBarController($scope, applicationsService, $rootScope) {\r\n\r\n        var currentApp = {};\r\n\r\n        function getCurrentApplication (apps) {\r\n            var i, app;\r\n\r\n            for (i = 0; i < apps.length; i += 1)\r\n                if (apps[i].appModule === currentApp.appModule && apps[i].env === currentApp.env) {\r\n                    app = {\r\n                        'name': apps[i].name,\r\n                        'iconPath': apps[i].iconPath\r\n                    };\r\n\r\n                    /* Remove app atual para nao mostar na lista */\r\n                    apps.splice(i, 1);\r\n\r\n                    return app;\r\n                }\r\n        }\r\n\r\n        function redirect(url) {\r\n            applicationsService.redirect(url);\r\n        }\r\n\r\n        $scope.getCallbackUrl = function (app) {\r\n\r\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\r\n\r\n            applicationsService.getCallbackUrl(app._id, function (err, callbackUrl) {\r\n                if (err) {\r\n                    console.error('[ERROR]: ', err); // eslint-disable-line\r\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\r\n\r\n                    if (typeof $rootScope.toast === 'function')\r\n                        $rootScope.toast('Erro ao obter endereço URL da aplicação');\r\n\r\n                    return false;\r\n                }\r\n\r\n                redirect(callbackUrl);\r\n            });\r\n        };\r\n\r\n        $scope.openMenu = function($mdOpenMenu, ev) {\r\n            $mdOpenMenu(ev);\r\n        };\r\n\r\n        (function () {\r\n\r\n            $scope.hasMenu      = pling.loader.settings.menu && pling.loader.settings.menu.length > 0 ? true : false; // eslint-disable-line\r\n            currentApp          = applicationsService.getCurrentApp();\r\n            $scope.applications = applicationsService.getLocal();\r\n            $scope.currentApp   = getCurrentApplication($scope.applications);\r\n        }());\r\n    }\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function PlgBackgroundImageDirective() {\r\n\r\n        return function (scope, element, attrs) {\r\n            var url = attrs.plgBackImg;\r\n\r\n            element.css({\r\n                'background-image': 'url(' + url + ')',\r\n                'background-size' : 'cover'\r\n            });\r\n        };\r\n    }\r\n\r\n    PlgBackgroundImageDirective.$inject = [];\r\n\r\n    angular.module('plingUi').directive('plgBackImg', PlgBackgroundImageDirective);\r\n}());\r\n","(function () {\r\n    function PlgCalendarCtrl($scope, $rootScope, $attrs, plgCalendarFactory) {\r\n        var ctrl = this,\r\n            i,\r\n            currentMoment = moment(Date.now()),\r\n            todayDate     = moment(currentMoment),\r\n            secondClick   = false,\r\n            fromDateCopy,\r\n            currentDate;\r\n\r\n        ctrl.selected    = ctrl.selected && ctrl.selected.fromDate && ctrl.selected.toDate ? ctrl.selected : { 'fromDate': currentMoment.format('YYYY-MM-DD'), 'toDate': currentMoment.format('YYYY-MM-DD') };\r\n        ctrl.weekDays    = moment.weekdaysShort();\r\n        ctrl.todayYear   = currentMoment.format('YYYY');\r\n        $rootScope.$broadcast('PLGCALENDAR_UPDATE', ctrl.selected, currentMoment);\r\n\r\n        buildDisplay();\r\n\r\n        function buildDisplay() {\r\n            ctrl.selected.display = moment(ctrl.selected.fromDate).format('DD/MM/YYYY') + (ctrl.selected.toDate ? ' - ' + moment(ctrl.selected.toDate).format('DD/MM/YYYY') : '');\r\n        }\r\n\r\n        /* Responsable to update bindings values in the view */\r\n        function updateValues(isDayChanged, isMonthOrYearChange) {\r\n            ctrl.weekDays    = moment.weekdaysMin();\r\n            ctrl.todayYear   = currentMoment.format('YYYY');\r\n            ctrl.daysInMonth = plgCalendarFactory.getDaysInMonths(ctrl.monthsLimit, currentMoment, ctrl.events);\r\n\r\n            $rootScope.$broadcast('PLGCALENDAR_UPDATE', ctrl.selected, currentMoment, isDayChanged, isMonthOrYearChange);\r\n        }\r\n\r\n        /* Responsable to get the full date in format YYYY-MM-DD */\r\n        function getCurrentDate(day, i) {\r\n            return moment(currentMoment).add(i, 'month').date(day).format('YYYY-MM-DD');\r\n        }\r\n\r\n        /* Responsable to convert integer number to array */\r\n        function convertIntegerToArray(n) {\r\n            var range = [];\r\n\r\n            for (i = 0; i < n && i < 12; i++) {\r\n                range.push(i);\r\n            }\r\n            return range;\r\n        }\r\n\r\n        /* Select the date that user clicked */\r\n        ctrl.selectDate = function (day, i) {\r\n            currentDate = moment(currentMoment).add(i, 'months').date(day);\r\n\r\n            if (!ctrl.disableRange) {\r\n                if (!secondClick) {\r\n                    ctrl.selected.fromDate = currentDate.format('YYYY-MM-DD');\r\n                    ctrl.selected.toDate   = currentDate.format('YYYY-MM-DD');\r\n                } else {\r\n                    ctrl.selected.toDate = currentDate.format('YYYY-MM-DD');\r\n                }\r\n\r\n                if (ctrl.selected.fromDate > ctrl.selected.toDate) {\r\n                    fromDateCopy  = ctrl.selected.fromDate;\r\n                    ctrl.selected.fromDate = ctrl.selected.toDate;\r\n                    ctrl.selected.toDate   = fromDateCopy;\r\n                }\r\n            } else {\r\n                ctrl.selected.fromDate = currentDate.format('YYYY-MM-DD');\r\n                ctrl.selected.toDate   = currentDate.format('YYYY-MM-DD');\r\n            }\r\n\r\n            buildDisplay();\r\n\r\n            secondClick = !secondClick;\r\n\r\n            updateValues(true);\r\n        };\r\n\r\n        /* Get days in month by int params i (exp.: currentMonth + 1) */\r\n        ctrl.getDaysInMonth = function (i, wantFullDay) {\r\n            var month    = moment(currentMoment).add(i, 'months'),\r\n                days     = month.daysInMonth(),\r\n                firstDay = moment(month).date(1).day(),\r\n                arr      = [],\r\n                position,\r\n                day;\r\n\r\n            for (position = 1; position <= firstDay + days; position += 1) {\r\n\r\n                day = position > firstDay ? position - firstDay : false;\r\n\r\n                if (wantFullDay && day !== false) {\r\n                    day = getCurrentDate(day, i);\r\n                }\r\n\r\n                arr.push(day);\r\n            }\r\n\r\n            return arr;\r\n        };\r\n\r\n        /* Set the current month */\r\n        ctrl.setToday = function () {\r\n            secondClick = false;\r\n\r\n            currentMoment = moment(todayDate);\r\n\r\n            ctrl.selectDate(currentMoment.date(), 0);\r\n            ctrl.selectDate(currentMoment.date(), 0);\r\n        };\r\n\r\n        /* Set the current month */\r\n        ctrl.setThisMonth = function () {\r\n            secondClick = false;\r\n\r\n            ctrl.selectDate(1, 0);\r\n            ctrl.selectDate(moment(currentMoment).daysInMonth(), 0);\r\n        };\r\n\r\n        /* Set the current year */\r\n        ctrl.setThisYear = function () {\r\n            secondClick = false;\r\n\r\n            ctrl.selectDate(1, currentMoment.format('M') * -1 + 1);\r\n            ctrl.selectDate(moment(currentMoment).add(12 - currentMoment.format('M')).daysInMonth(), 12 - currentMoment.format('M'));\r\n        };\r\n\r\n        /* Get the month format by number */\r\n        ctrl.getMonth = function (i, format) {\r\n            return moment(currentMoment).add(i, 'months').format(format || 'MMMM');\r\n        };\r\n\r\n        /* Check if the day is selected by day and month */\r\n        ctrl.isSelected = function (day, i) {\r\n            return getCurrentDate(day, i) === ctrl.selected.fromDate || getCurrentDate(day, i) === ctrl.selected.toDate;\r\n        };\r\n\r\n        /* Check if the day is in range by day and month number */\r\n        ctrl.isInRange = function (day, i) {\r\n            return getCurrentDate(day, i) > ctrl.selected.fromDate && getCurrentDate(day, i) < ctrl.selected.toDate;\r\n        };\r\n\r\n        /* Check if is today */\r\n        ctrl.isToday = function (day, i) {\r\n            return getCurrentDate(day, i) === moment().format('YYYY-MM-DD');\r\n        };\r\n\r\n        /* Go to the next month or year */\r\n        ctrl.nextDate = function (monthOrYear) {\r\n            currentMoment.add(1, monthOrYear);\r\n            updateValues(false, true);\r\n        };\r\n\r\n        /* Go to the previous month or year */\r\n        ctrl.prevDate = function (monthOrYear) {\r\n            currentMoment.subtract(1, monthOrYear);\r\n            updateValues(false, true);\r\n        };\r\n\r\n        /* Define Shared methods */\r\n        if ($attrs.shared) {\r\n            delete ctrl.shared;\r\n            delete ctrl.events;\r\n            ctrl.shared = angular.copy(ctrl);\r\n        }\r\n\r\n        $scope.$watch(function () {\r\n            return ctrl.events;\r\n        }, function (newVal) {\r\n            ctrl.daysInMonth = plgCalendarFactory.getDaysInMonths(ctrl.monthsLimit, currentMoment, newVal);\r\n        });\r\n\r\n        ctrl.monthsNumbers = convertIntegerToArray(ctrl.monthsLimit);\r\n    }\r\n\r\n    PlgCalendarCtrl.$inject = ['$scope', '$rootScope', '$attrs', 'plgCalendarFactory'];\r\n\r\n    angular.module('plingUi').component('plgCalendar', {\r\n        'bindings'  : {\r\n            'monthsLimit'        : '=',\r\n            'selected'           : '=',\r\n            'shared'             : '=',\r\n            'disableRange'       : '=',\r\n            'disableDayChoice'   : '=',\r\n            'disableMonthChoice' : '=',\r\n            'disableYearChoice'  : '=',\r\n            'events'             : '='\r\n        },\r\n        'transclude': true,\r\n        'controller' : PlgCalendarCtrl,\r\n        'templateUrl' : 'plgCalendar.html'\r\n    });\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function plgCalendarFactory() {\r\n        var daysInMonths = {}, i, j, output = [];\r\n\r\n        return {\r\n            'getDaysInMonths': function (monthsLimit, currentMoment, events) {\r\n                var month, days, firstDay, arr = [], position, objDay;\r\n\r\n                for (i = monthsLimit - 1; i >= 0; i--) {\r\n                    month      = moment(currentMoment).add(i, 'months');\r\n                    days       = month.daysInMonth();\r\n                    firstDay   = moment(month).date(1).day();\r\n                    arr.length = 0;\r\n\r\n                    for (position = 1; position <= firstDay + days; position += 1) {\r\n\r\n                        objDay = position > firstDay ? position - firstDay : false;\r\n\r\n                        /*\r\n                        if (wantFullDay && day !== false) {\r\n                            day = moment(currentMoment).add(i, 'month').date(day).format('YYYY-MM-DD');\r\n                        }*/\r\n\r\n                        objDay = { 'day': objDay };\r\n\r\n                        if (events && events.length > 0 && objDay.day) {\r\n                            objDay.events = this.filterEventsInDay(events, month.date(objDay.day));\r\n                        }\r\n\r\n                        arr.push(objDay);\r\n                    }\r\n                    daysInMonths[i] = arr;\r\n                }\r\n                return daysInMonths;\r\n            },\r\n            'filterEventsInDay': function (events, day) {\r\n                output.length = 0;\r\n                for (j = events.length - 1; j >= 0; j--) {\r\n                    if (moment(typeof events[j] === 'object' ? events[j].date : events[j]).utc().format('YYYY-MM-DD') === moment(day).utc().format('YYYY-MM-DD')) {\r\n                        output.push(events[j]);\r\n                    }\r\n                }\r\n                return angular.copy(output);\r\n            }\r\n        };\r\n    }\r\n\r\n    plgCalendarFactory.$inject = [];\r\n\r\n    angular.module('plingUi').factory('plgCalendarFactory', plgCalendarFactory);\r\n}());\r\n","/* global angular, console, document, $, window */\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgChangeIconView($log, $compile, $rootScope) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'obj': '=',\r\n                'serviceModule': '='\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.obj) {\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n                            scope.viewListSelected  = this.viewListSelected;\r\n                            scope.changeIcon        = this.changeIcon;\r\n\r\n                            // Update value to default, if click previous ou next page in pagination DATATABLE\r\n                            scope.$watch('obj', function() {\r\n                                scope.iconView          = 'expand_more';\r\n                                scope.iconViewLabel     = 'Expandir linha';\r\n                            });\r\n\r\n                            template =  '<md-button class=\"md-icon-button\" aria-label=\"expand\" ng-click=\"viewListSelected(obj, serviceModule.isExpandLineList); changeIcon(iconView)\">' +\r\n                                        '    <md-tooltip>{{iconViewLabel}}</md-tooltip>' +\r\n                                        '    <md-icon class=\"icons\" aria-hidden=\"true\">{{iconView}}</md-icon>' +\r\n                                        '</md-button>';\r\n\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        'changeIcon': function (iconLabel) {\r\n                            if (iconLabel === 'expand_more') {\r\n                                scope.iconView = 'expand_less';\r\n                                scope.iconViewLabel = 'Retrair linha';\r\n                            } else {\r\n                                scope.iconView = 'expand_more';\r\n                                scope.iconViewLabel = 'Expandir linha';\r\n                            }\r\n                        },\r\n\r\n                        // View effect collapse \"open/closed\"\r\n                        'viewListSelected': function (obj, visualize) {\r\n                            if (visualize) {\r\n                                $rootScope.$emit('viewListSelected', obj);\r\n                            }\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgChangeIconView.$inject = ['$log', '$compile', '$rootScope'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgChangeIconView', PlgChangeIconView);\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgChangeTypeList($log, $compile, $localstorage, $rootScope) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'listType' : '=',\r\n                'chkList'  : '=',\r\n                'remove'   : '@'\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm, defaultOption = 'list', options = ['list', 'cards', 'datatable'];\r\n\r\n                if (scope.remove && options.indexOf(scope.remove) !== -1) {\r\n                    options.splice(options.indexOf(scope.remove), 1);\r\n                }\r\n\r\n                if (!$localstorage.get('listCardsDatatable')) {\r\n                    if (scope.remove === defaultOption) {\r\n                        defaultOption = 'datatable';\r\n                    }\r\n                    $localstorage.set('listCardsDatatable', defaultOption);\r\n                    scope.listType = defaultOption;\r\n                } else {\r\n                    scope.listType = $localstorage.get('listCardsDatatable');\r\n                }\r\n\r\n                // validating bind value\r\n                if (scope.listType) {\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n                            scope.changeListType = this.changeListType;\r\n\r\n                            template = '<md-button class=\"md-icon-button btnFilterListing\" ng-click=\"changeListType();\" ng-switch on=\"listType\">' +\r\n                                        (scope.remove !== 'datatable'\r\n                                            ? '    <md-tooltip md-direction=\"bottom\" ng-show=\"listType === ' + builder.getPrevious('datatable') + '\">Alterar para tabela</md-tooltip>' +\r\n                                       '        <i class=\"material-icons\" ng-switch-when=\"' + builder.getPrevious('datatable') + '\">view_list</i>' : '' ) +\r\n                                        (scope.remove !== 'cards'\r\n                                            ? '    <md-tooltip md-direction=\"bottom\" ng-show=\"listType === ' + builder.getPrevious('cards') + '\">Alterar para cards</md-tooltip>' +\r\n                                       '        <i class=\"material-icons\" ng-switch-default>view_module</i>' : '' ) +\r\n                                        (scope.remove !== 'list'\r\n                                            ? '    <md-tooltip md-direction=\"bottom\" ng-show=\"listType === ' + builder.getPrevious('list') + '\">Alterar para listagem</md-tooltip>' +\r\n                                       '        <i class=\"material-icons\" ng-switch-when=\"' + builder.getPrevious('list') + '\">view_headline</i>' : '' ) +\r\n\r\n                                       '</md-button>';\r\n\r\n                            cb(null, template);\r\n                            angular.noop(scope);\r\n                        },\r\n\r\n\r\n                        'changeListType': function () {\r\n\r\n                            // ### Reset bind CHECKBOX \"Select Items\"\r\n                            scope.chkList = [];\r\n\r\n                            // ### Send scroll from UP page\r\n                            window.scrollTo(0, 0);\r\n\r\n                            scope.listType = builder.getNext(scope.listType);\r\n\r\n                            $localstorage.set('listCardsDatatable', scope.listType);\r\n\r\n                            $rootScope.$broadcast('resetViewsItems', true);\r\n                        },\r\n\r\n                        'getNext': function (listType) {\r\n                            var i = options.indexOf(listType);\r\n\r\n                            return options[i < options.length - 1 ? i + 1 : 0];\r\n                        },\r\n\r\n                        'getPrevious': function (listType) {\r\n                            var i = options.indexOf(listType);\r\n\r\n                            return options[i > 0 ? i - 1 : options.length - 1];\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgChangeTypeList.$inject = [ '$log', '$compile', '$localstorage', '$rootScope' ];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgChangeTypeList', PlgChangeTypeList);\r\n}());\r\n","(function() {\r\n\r\n    'use strict';\r\n\r\n    // CREATING CONTROLLER\r\n    function plgComboBoxController($scope, $rootScope, $timeout) {\r\n        var i,\r\n            j,\r\n            ctrl = this,\r\n            id,\r\n            ngModelCopy = [];\r\n\r\n        ctrl.filterSelect       = this.filterSelect;\r\n        ctrl.newChoiceSave      = this.newChoiceSave;\r\n        ctrl.saveLine           = this.saveLine;\r\n        ctrl.reloadChoiceAction = this.reloadChoiceAction;\r\n        ctrl.params             = this.params;\r\n        ctrl.params.refName     = ctrl.params.refName || 'name';\r\n        ctrl.loading            = this.loading;\r\n        ctrl.choices            = this.choices || [];\r\n        ctrl.ngModel            = this.ngModel || [];\r\n        ctrl.focus              = this.focus;\r\n        ctrl.getOut             = this.getOut;\r\n        ctrl.selectChoice       = this.selectChoice;\r\n        ctrl.filterChoices      = this.filterChoices;\r\n        ctrl.createFilterFor    = this.createFilterFor;\r\n        ctrl.allNoneChoice      = this.allNoneChoice;\r\n        ctrl.noneChoice         = this.noneChoice;\r\n        ctrl.saveChoice         = this.saveChoice;\r\n        ctrl.addChoice          = false;\r\n        ctrl.focusChoice        = false;\r\n        ctrl.selectChoiceName   = this.selectChoiceName || '';\r\n        ctrl.loadingStart       = false;\r\n\r\n        $timeout(function () {\r\n            if (ctrl.choices.length > 0) {\r\n                for (i = 0; i < ctrl.choices.length; i += 1) {\r\n                    if (ctrl.choices[i]._id || ctrl.choices[i].id) {\r\n                        ctrl.choices[i].icon = 'check_box_outline_blank';\r\n                        if (ctrl.ngModel) {\r\n                            if (ctrl.params.isMultiple) {\r\n                                for (j = 0; j < ctrl.ngModel.length; j += 1) {\r\n                                    id = typeof ctrl.ngModel[j] === 'object' ? ctrl.ngModel[j]._id || ctrl.ngModel[j]._id : ctrl.ngModel[j];\r\n                                    if (id === ctrl.choices[i]._id || id === ctrl.choices[i].id) {\r\n                                        ctrl.choices[i].icon   = 'check_box';\r\n                                        ngModelCopy.push(ctrl.choices[i]);\r\n                                        if (ctrl.ngModel.length > 1) {\r\n                                            ctrl.selectChoiceName  = ctrl.ngModel.length + ' Selecionados';\r\n                                        } else {\r\n                                            ctrl.selectChoiceName  = ctrl.choices[i][ctrl.params.refName];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (ctrl.ngModel === ctrl.choices[i]._id || ctrl.ngModel === ctrl.choices[i].id) {\r\n                                ctrl.choices[i].icon = 'check_box';\r\n                                ctrl.selectChoiceName = ctrl.choices[i][ctrl.params.refName];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ctrl.loadingStart       = true;\r\n\r\n            if (ctrl.simpleCombo) {\r\n                ctrl.ngModel = ngModelCopy;\r\n            }\r\n        });\r\n\r\n        ctrl.createFilterFor = function (query) {\r\n            var lowercaseQuery = angular.lowercase(query);\r\n\r\n            return function filterFn(termChoice) {\r\n                var lowercaseOptions = angular.lowercase(termChoice[ctrl.params.refName]);\r\n\r\n                return lowercaseOptions.indexOf(lowercaseQuery) >= 0;\r\n            };\r\n        };\r\n\r\n        ctrl.filterChoices = function (scope, term) {\r\n            var results = term ? scope.$ctrl.choices.filter(scope.$ctrl.createFilterFor(term)) : scope.$ctrl.choices;\r\n\r\n            scope.$ctrl.addChoice = false;\r\n            if (results && term) {\r\n                if (results.length === 0 && term.length > 0) {\r\n                    scope.$ctrl.addChoice = true;\r\n                }\r\n            }\r\n            return results;\r\n        };\r\n\r\n        ctrl.noneChoice = function (scope) {\r\n            // console.log(scope); // eslint-disable-line\r\n            scope.$ctrl.ngModel           = [];\r\n            scope.$ctrl.selectChoiceName  = '';\r\n            scope.$ctrl.focusChoice       = false;\r\n            scope.$ctrl.focusBlur         = true;\r\n            scope.$ctrl.saveLine(scope.$ctrl.$parent);\r\n        };\r\n\r\n        ctrl.allNoneChoice = function (scope, result, icon) {\r\n            var l= 0;\r\n\r\n            if (result.length > 0) {\r\n                if (scope.$ctrl.choices.length === result.length) {\r\n                    scope.$ctrl.ngModel           = [];\r\n                    scope.$ctrl.selectChoiceName  = '';\r\n                    for (i = 0; i < scope.$ctrl.choices.length; i += 1) {\r\n                        scope.$ctrl.choices[i].icon           = icon;\r\n                        if (icon === 'check_box') {\r\n                            l += 1;\r\n                            scope.$ctrl.ngModel.push(ctrl.simpleCombo ? scope.$ctrl.choices[i] : scope.$ctrl.choices[i]._id || scope.$ctrl.choices[i].id);\r\n                            scope.$ctrl.selectChoiceName  = scope.$ctrl.choices[i][ctrl.params.refName];\r\n                            if (l > 1) {\r\n                                scope.$ctrl.selectChoiceName  = l + ' Selecionados';\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (j = 0; j < result.length; j += 1) {\r\n                        for (i = 0; i < scope.$ctrl.choices.length; i += 1) {\r\n                            if (result[j]._id === scope.$ctrl.choices[i]._id || result[j].id === scope.$ctrl.choices[i].id) {\r\n                                if (icon === 'check_box' && scope.$ctrl.choices[i].icon === 'check_box_outline_blank') {\r\n                                    scope.$ctrl.ngModel.push(ctrl.simpleCombo ? scope.$ctrl.choices[i] : scope.$ctrl.choices[i]._id || scope.$ctrl.choices[i].id);\r\n                                    scope.$ctrl.choices[i].icon       = icon;\r\n                                    scope.$ctrl.selectChoiceName  = scope.$ctrl.choices[i][ctrl.params.refName];\r\n                                    if (scope.$ctrl.ngModel.length > 1) {\r\n                                        scope.$ctrl.selectChoiceName  = scope.$ctrl.ngModel.length + ' Selecionados';\r\n                                    }\r\n                                } else if (icon === 'check_box_outline_blank' && scope.$ctrl.choices[i].icon === 'check_box') {\r\n                                    scope.$ctrl.choices[i].icon       = icon;\r\n                                    for (l = 0; l < scope.$ctrl.ngModel.length; l += 1) {\r\n                                        if (scope.$ctrl.ngModel[l] === scope.$ctrl.choices[i]._id || scope.$ctrl.ngModel[l] === scope.$ctrl.choices[i].id || ctrl.simpleCombo && (scope.$ctrl.ngModel[l]._id === scope.$ctrl.choices[i]._id && scope.$ctrl.choices[i]._id || scope.$ctrl.ngModel[l].id === scope.$ctrl.choices[i].id && scope.$ctrl.choices[i].id)) {\r\n                                            scope.$ctrl.ngModel.splice(l, 1);\r\n                                            if (scope.$ctrl.ngModel.length > 1) {\r\n                                                scope.$ctrl.selectChoiceName  = scope.$ctrl.ngModel.length + ' Selecionados';\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else if (scope.$ctrl.ngModel.length === 1) {\r\n                                    scope.$ctrl.selectChoiceName  = scope.$ctrl.choices[i][ctrl.params.refName];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        ctrl.selectChoice = function (scope, choice) {\r\n            var nameChecked = '';\r\n\r\n            if (scope.params.isMultiple) {\r\n                if (choice.icon === 'check_box_outline_blank') {\r\n                    for (i = 0; i < scope.choices.length; i += 1) {\r\n                        if (scope.ngModel.length > 1) {\r\n                            for (j = 0; j < scope.ngModel.length; j += 1) {\r\n                                if (scope.ngModel[j] === scope.choices[i]._id || scope.ngModel[j] === scope.choices[i].id) {\r\n                                    scope.choices[i].icon   = 'check_box';\r\n                                }\r\n                            }\r\n                        }\r\n                        if (choice._id === scope.choices[i]._id && choice._id || choice.id === scope.choices[i].id && choice.id) {\r\n                            scope.choices[i].icon   = 'check_box';\r\n                            scope.ngModel.push(ctrl.simpleCombo ? choice : choice._id || choice.id);\r\n                            scope.selectChoiceName  = choice[ctrl.params.refName];\r\n                            if (scope.ngModel.length > 1) {\r\n                                scope.selectChoiceName  = scope.ngModel.length + ' Selecionados';\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (i = 0; i < scope.choices.length; i += 1) {\r\n                        if (choice._id === scope.choices[i]._id && choice._id || choice.id === scope.choices[i].id && choice.id) {\r\n                            scope.choices[i].icon   = 'check_box_outline_blank';\r\n                        }\r\n                        if (scope.choices[i].icon === 'check_box') {\r\n                            nameChecked = scope.choices[i][ctrl.params.refName];\r\n                        }\r\n                    }\r\n                    if (scope.ngModel) {\r\n                        for (j = 0; j < scope.ngModel.length; j += 1) {\r\n                            if (scope.ngModel[j] === choice._id || scope.ngModel[j] === choice.id || ctrl.simpleCombo && (scope.ngModel[j]._id === choice._id && choice._id || scope.ngModel[j].id === choice.id && choice.id)) {\r\n                                scope.ngModel.splice(j, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.selectChoiceName  = nameChecked;\r\n                    if (scope.ngModel.length > 1) {\r\n                        scope.selectChoiceName  = scope.ngModel.length + ' Selecionados';\r\n                    }\r\n                }\r\n                scope.saveLine(scope);\r\n            }\r\n            if (!scope.params.isMultiple) {\r\n                scope.ngModel           = choice._id || choice.id;\r\n                scope.selectChoiceName  = choice[ctrl.params.refName];\r\n                scope.focusChoice       = false;\r\n                scope.focusBlur         = true;\r\n                scope.saveLine(scope);\r\n            }\r\n        };\r\n\r\n        ctrl.focus = function (scope) {\r\n            if (scope.$ctrl.focusChoice) {\r\n                scope.$ctrl.focusChoice   = false;\r\n                scope.$ctrl.focusBlur     = true;\r\n            } else {\r\n                scope.$ctrl.focusChoice   = true;\r\n                // angular.element(document.body).append('<div class=\"md-multiple-select-div\" ng-click=\"$ctrl.getOut(this)\" ></div>');\r\n            }\r\n            if (scope.$ctrl.reloadChoiceAction) {\r\n                $rootScope.$emit('reloadChoice', scope.$ctrl);\r\n            }\r\n        };\r\n\r\n        ctrl.getOut = function (scope) {\r\n            if (!scope.$ctrl.loading) {\r\n                if (scope.$ctrl.focusChoice) {\r\n                    // console.log(scope); // eslint-disable-line\r\n                    scope.$ctrl.focusChoice   = false;\r\n                    scope.$ctrl.focusBlur     = true;\r\n                } else {\r\n                    scope.$ctrl.focusChoice   = true;\r\n                }\r\n            }\r\n            // scope.$ctrl.saveLine(scope);\r\n        };\r\n\r\n        ctrl.saveChoice = function (scope) {\r\n            scope.$ctrl.loading         = true;\r\n            scope.$ctrl.newChoiceSave   = null;\r\n            $rootScope.$emit('newChoiceSave', scope.$ctrl);\r\n            $timeout(function () {\r\n                if (scope.$ctrl.newChoiceSave) {\r\n                    scope.$ctrl.choices.push(scope.$ctrl.newChoiceSave);\r\n                    scope.$ctrl.loading         = false;\r\n                    scope.$ctrl.filterSelect    = '';\r\n                    scope.$ctrl.selectChoice(scope.$ctrl, scope.$ctrl.newChoiceSave);\r\n                }\r\n            }, 3000);\r\n        };\r\n    }\r\n\r\n    plgComboBoxController.$inject = ['$scope', '$rootScope', '$timeout'];\r\n\r\n    // CREATING COMPONENT WITH BINDINGS\r\n    angular.module('plingUi').component('plgComboBox', {\r\n        'bindings'  : {\r\n            'params'            : '=',\r\n            'choices'           : '=',\r\n            'ngModel'           : '=',\r\n            'selectChoiceName'  : '=?',\r\n            'loading'           : '=',\r\n            'filterSelect'      : '=?',\r\n            'reloadChoiceAction': '=',\r\n            'saveLine'          : '&',\r\n            'simpleCombo'       : '='\r\n        },\r\n        'controller' : plgComboBoxController,\r\n        'templateUrl' : 'plgComboBox.html'\r\n    });\r\n}());\r\n","/* global angular, console, document, $, window */\r\n(function() {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgDataTable($log, $compile, $location) {\r\n        return {\r\n            'transclude': true,\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'objPk'              : '@',\r\n                'byEvent'            : '=',\r\n                'paginateByRequest'  : '=',\r\n                'params'             : '=',\r\n                'module'             : '=',\r\n                'dynamicForm'        : '=',\r\n                'filterDefault'      : '=',\r\n                'query'              : '=',\r\n                'chkList'            : '=',\r\n                'callbacks'          : '=',\r\n                'disableCellView'    : '=',\r\n                'disableCellExpand'  : '=',\r\n                'mdOnSelect'         : '=',\r\n                'mdOnDeselect'       : '=',\r\n                'mdOnReorder'        : '=',\r\n                'mdProgress'         : '=',\r\n                'mdOnPageSelect'     : '=',\r\n                'mdOnPaginate'       : '&'\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function(scope, element, attribute, controller, transclude) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.params) {\r\n\r\n                    scope.objPk = scope.objPk || '_id';\r\n\r\n                    builder = {\r\n                        'buildTemplate': function(scope, cb) {\r\n                            var template,\r\n                                temp,\r\n                                dictionary = {};\r\n\r\n                            scope.editView = this.editView;\r\n                            scope.itemExpand = this.itemExpand;\r\n\r\n                            scope.options = {\r\n                                'autoSelect': false,\r\n                                'boundaryLinks': false,\r\n                                'largeEditDialog': false,\r\n                                'pageSelector': false,\r\n                                'rowSelection': true\r\n                            };\r\n\r\n\r\n                            // Display \"show / hide\" buttons actions, ex: Inativar, Excluir... (Click \"checkall\" checkbox)\r\n                            // And md-select \"select none, select all\"\r\n                            // ----- IMPORTANT! We can't clear scope.chkList with new array -----\r\n                            scope.$on('checkedAllItens', function (event, arg) {\r\n                                angular.noop(event);\r\n\r\n                                if (arg) {\r\n                                    scope.params.forEach(function (i) {\r\n                                        if (scope.chkList.filter(function (s) { return s[scope.objPk] === i[scope.objPk]; }).length <= 0) {\r\n                                            scope.chkList.push(i);\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    scope.chkList.length = 0;\r\n                                    dictionary = {};\r\n                                }\r\n                            });\r\n\r\n                            // Reset value default \"limit\" Infinity Scroll\r\n                            // Reset to \"page = 1\"\r\n                            scope.$on('resetViewsItems', function (event, arg) {\r\n                                angular.noop(event);\r\n                                if (arg && scope.params.length > 0) {\r\n                                    scope.query.page = 1;\r\n                                }\r\n                            });\r\n\r\n                            // Datatable - Control checkbox per page, \"Check All\", \"Check None\" and simple checked\r\n                            scope.$on('chkListPage', function (event, list_dt) {\r\n                                scope.chkList.forEach(function (ch) {\r\n                                    dictionary[ch[scope.objPk]] = true;\r\n                                });\r\n\r\n                                list_dt.forEach(function (dt) {\r\n                                    if (dictionary[dt[scope.objPk]]) {\r\n                                        temp = scope.chkList.every(function (el, index) {\r\n                                            if (el[scope.objPk] === dt[scope.objPk]) {\r\n                                                scope.chkList[index] = dt;\r\n                                            }\r\n                                            return el[scope.objPk] !== dt[scope.objPk];\r\n                                        });\r\n                                        if (temp) {\r\n                                            scope.chkList.push(dt);\r\n                                        }\r\n                                    }\r\n\r\n                                });\r\n                            });\r\n\r\n\r\n                            template = '<md-table-container style=\"background-color : #FFFFFF;overflow: hidden;\">' +\r\n                                       '    <table md-table md-row-select=\"options.rowSelection\" ng-model=\"chkList\" md-progress=\"mdProgress\">' +\r\n                                       '        <thead md-head md-order=\"query.order\" md-on-reorder=\"mdOnReader\">' +\r\n                                       '            <tr md-row class=\"hideSelectAll\">' +\r\n                                       '               <th md-column md-order-by=\"{{ header.ref }}\" ng-repeat=\"header in dynamicForm.isListCollumn\"><span>{{ header.label }}</span></th>' +\r\n                                       '            </tr>' +\r\n                                       '        </thead>' +\r\n                                       '        <tbody md-body ng-repeat=\"obj in params | filterDynamic:query.filter | orderBy: query.order' +  (scope.paginateByRequest ? '' : '| limitTo: query.limit : (query.page -1) * query.limit') + ' track by $index\">' +\r\n                                       '            <tr md-row md-select=\"obj\" md-on-select=\"mdOnSelect\" md-on-deselect=\"mdOnDeselect\" md-auto-select=\"options.autoSelect\" style=\"cursor: pointer !important\">' +\r\n                                       '                <td md-cell ng-repeat=\"prop in dynamicForm.isListCollumn\" ng-click=\"editView(module.module, obj[objPk])\">' +\r\n                                       '                    <!--CELL-->' +\r\n                                       '                    <div ng-if=\"prop.type === \\'number\\' || prop.type === \\'numeric\\'\">{{ obj[prop.ref] | number: 2 }}</div>' +\r\n                                       '                    <div ng-if=\"prop.type === \\'date\\'\">{{ obj[prop.ref] | date: \\'dd/MM/yyyy\\' }}</div>' +\r\n                                       '                    <div ng-if=\"prop.type !== \\'number\\' && prop.type !== \\'numeric\\' && prop.type !== \\'img\\' && prop.type !== \\'date\\'\">{{ obj[prop.ref] }}</div>' +\r\n                                       '                    <div ng-if=\"prop.type === \\'img\\'\">' +\r\n                                       '                        <img class=\"plg-data-table-component-cell-icon\" ng-if=\"obj[prop.ref]\" ng-src=\"{{ obj[prop.ref] }}\" err-src=\"/assets/img/ic_person_black_48dp_2x.png\" class=\"plg-data-table-component-cell-img\">' +\r\n                                       '                        <data-md-icon ng-if=\"!obj[prop.ref]\" class=\"plg-data-table-component-cell-icon\">person</data-md-icon>' +\r\n                                       '                    </div>' +\r\n                                       '                    <!--/CELL-->' +\r\n                                       '                </td>' +\r\n                                                        (scope.disableCellExpand ? ''\r\n                                      :'                <td md-cell style=\"padding:0px !important;\">' +\r\n                                       '                    <md-menu-item layout-align=\"end right\" role=\"menuitem\" class=\"layout-align-center-right\" aria-hidden=\"false\">' +\r\n                                       '                        <div class=\"plg-data-table-cell-expand-icon\" ng-click=\"itemExpand($event, obj)\">' +\r\n                                       '                            <plg-change-icon-view obj=\"obj\" service-module=\"module\"></plg-change-icon-view>' +\r\n                                       '                        </div>' +\r\n                                       '                    </md-menu-item>' +\r\n                                       '                 </td>') +\r\n                                       '                <td md-cell style=\"padding:0 13px 0 0 !important; text-align: right; width:58px;\" class=\"plg-data-table-cell-group\">' +\r\n                                       '                    <plg-group-filters type=\"single\" by-event=\"byEvent\" service-module=\"module\" filter-default=\"filterDefault\" params=\"obj\">' +\r\n                                       '                    </plg-group-filters>' +\r\n                                       '                </td>' +\r\n                                       '            </tr>' +\r\n                                       '            <tr md-row ng-if=\"obj.isExpand\" style=\"background-color: #ffffff !important;\">' +\r\n                                       '                <td md-cell colspan=\"60\">' +\r\n                                       '                    <DYNAMIC_TEMPLATE/>' +\r\n                                       '                </td>' +\r\n                                       '            </tr>' +\r\n                                       '        </tbody>' +\r\n                                       '    </table>' +\r\n                                       '</md-table-container>' +\r\n                                       '<md-table-pagination md-limit=\"query.limit\" md-page=\"query.page\" md-page-select=\"mdOnPageSelect\" md-total=\"{{query.total || params.length}}\" md-on-paginate=\"mdOnPaginate()\" md-label=\"{page: \\'Página:\\', rowsPerPage: \\'Linhas por página:\\', of: \\'de\\'}\"></md-table-pagination>';\r\n\r\n                            transclude(scope, function(clone) {\r\n                                if (!scope.disableCellExpand) {\r\n                                    template = template.replace('<DYNAMIC_TEMPLATE/>', clone[1].data);\r\n                                }\r\n                            });\r\n\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        'editView': function(path, id) {\r\n                            if (!scope.disableCellView) {\r\n                                $location.path(path + '/' + id);\r\n                            }\r\n                        },\r\n\r\n                        'itemExpand': function(evt, item) {\r\n                            evt.preventDefault();\r\n                            item.isExpand = !item.isExpand;\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function(err, template) {\r\n\r\n                        scope.chkList.length = 0;\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgDataTable.$inject = ['$log', '$compile', '$location'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgDataTable', PlgDataTable);\r\n}());\r\n","/* global angular, console, document, $, window */\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgDataTableFilters($rootScope, $log, $compile, $http, core, formatResultList) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'params': '=',\r\n                'serviceModule': '=',\r\n                'dynamicForm': '=',\r\n                'filterDefault': '='\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.params) {\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n\r\n                            scope.actionsList = this.actionsList;\r\n\r\n                            scope.collection    = scope.serviceModule.collection;\r\n                            scope.module        = scope.serviceModule.module;\r\n\r\n                            if (scope.serviceModule.subModuleEdit) {\r\n                                scope.module    = scope.serviceModule.module + '/' + scope.serviceModule.subModuleEdit;\r\n                            }\r\n\r\n                            scope.resultViewItems = formatResultList.action(scope.filterDefault.action, scope.serviceModule.viewItems);\r\n\r\n                            template =  '<md-menu md-offset=\"0 -7\" md-position-mode=\"target-right target\">' +\r\n                                        '    <md-button aria-label=\"\" class=\"md-icon-button\" ng-click=\"$mdOpenMenu($event)\" >' +\r\n                                        '        <md-tooltip>Ações</md-tooltip>' +\r\n                                        '        <md-icon md-svg-src=\"assets/images/icone_mais.svg\"></md-icon>' +\r\n                                        '    </md-button>' +\r\n                                        '    <md-menu-content layout=\"column\" layout-wrap width=\"4\" >' +\r\n                                        '        <md-menu-item flex ng-show=\"module\">' +\r\n                                        '           <p><font color=\"#959595\">Alterar Status</font></p>' +\r\n                                        '        </md-menu-item>' +\r\n                                        '        <md-menu-item flex ng-repeat=\"item in resultViewItems\">' +\r\n                                        '            <md-button ng-click=\"actionsList(params, \\'Registro\\', item, collection)\" style=\"margin-left: 15px !important\">' +\r\n                                        '                 <md-icon md-svg-src=\"{{item.moduleIcon}}\"></md-icon>' +\r\n                                        '                 {{item.name}}' +\r\n                                        '            </md-button>' +\r\n                                        '        </md-menu-item>' +\r\n                                        '    </md-menu-content>' +\r\n                                        '</md-menu>';\r\n\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        'actionsList': function (param, label, item, collection) {\r\n                            var payload = {},\r\n                                getParam;\r\n\r\n                            getParam             = param._id;\r\n                            payload[item.method] = item.action;\r\n\r\n                            // localhost:500/api/v1/integra\r\n                            $http.patch(core.getAppCoreUrl('integra', collection + '/' + getParam), payload)\r\n                                .success(function (data) {\r\n                                    if (data) {\r\n                                        $rootScope.$emit('saveRecordSuccess', label + ' ' + item.msg + ' com sucesso.');\r\n                                        $rootScope.$emit('research', [param], item.method, item.action);\r\n                                    } else {\r\n                                        $rootScope.$emit('recordError', 'Ocorreu um erro ao ' + item.msg + ' ' + collection);\r\n                                    }\r\n                                });\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgDataTableFilters.$inject = ['$rootScope', '$log', '$compile', '$http', 'coreApiService', 'formatResultList'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgDataTableFilters', PlgDataTableFilters);\r\n}());\r\n","/*  angular, console, document, $, jQuery, window, URL */\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgDataTableSearch($log, $compile, $rootScope) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'dynamicForm': '=',\r\n                'offline': '@',\r\n                'disableGeneralSearch': '@',\r\n                'disableSearchIcons': '@'\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm, fields = [], fieldsType;\r\n\r\n                builder = {\r\n                    'buildTemplate': function (scope, cb) {\r\n\r\n                        var template;\r\n\r\n                        scope.serializeQueryString  = this.serializeQueryString;\r\n                        scope.searchPeople          = this.searchPeople;\r\n                        scope.searchColorActive     = this.searchColorActive;\r\n                        scope.searchColorInactivate = this.searchColorInactivate;\r\n                        scope.colorIconsTrash       = this.colorIconsTrash;\r\n                        scope.setHideInputs         = this.setHideInputs;\r\n\r\n                        scope.search                   = {};\r\n                        scope.searchIconsTrash         = 'checkOffColorIconFilter';\r\n                        scope.searchIconsActive        = 'checkOffColorIconFilter';\r\n                        scope.searchIconsInactivate    = 'checkOffColorIconFilter';\r\n                        scope.show = {\r\n                            'date': false,\r\n                            'default': true\r\n                        };\r\n                        if (scope.disableGeneralSearch) {\r\n                            scope.dynamicForm          = scope.dynamicForm || {};\r\n                            scope.dynamicForm.allField = scope.dynamicForm.allField || [];\r\n                            scope.search.fieldtable    = scope.search.fieldtable || [];\r\n\r\n                            scope.dynamicForm.allField.forEach(function (f) {\r\n                                scope.search.fieldtable.push(f.ref);\r\n                            });\r\n                        }\r\n\r\n                        template =  '<div class=\"search-inputs\" ng-if=\"show.default && !disableGeneralSearch\">' +\r\n                                    '    <md-input-container>' +\r\n                                    '        <label>Pesquisar</label>' +\r\n                                    '        <input ng-model=\"search.searchDefault\">' +\r\n                                    '    </md-input-container>' +\r\n                                    '</div>' +\r\n                                    '<div class=\"search-inputs\" style=\"padding-top: 5px;margin-right:30px;\" ng-if=\"show.date\">' +\r\n                                    '    <plg-date-picker selected=\"search.searchDate\"></plg-date-picker>' +\r\n                                    '</div>' +\r\n\r\n                                    '<div style=\"margin-left: 20px !important;max-height:72px;\">' +\r\n                                    '    <md-input-container>' +\r\n                                    '        <md-select multiple ng-model=\"search.fieldtable\" ng-change=\"setHideInputs(search.fieldtable)\" placeholder=\"Selecione\">' +\r\n                                    '            <md-option ng-repeat=\"table in dynamicForm.allField\" value=\"{{table.ref}}\">{{table.label}}</md-option>' +\r\n                                    '        </md-select>' +\r\n                                    '    </md-input-container>' +\r\n                                    '</div>' +\r\n\r\n                                    '<div style=\"width: 140px;margin-left: 10px;\" ng-if=\"!disableSearchIcons\">' +\r\n                                    '    <md-input-container>' +\r\n                                    '        <md-button ng-class=\"searchIconsActive\" class=\"md-icon-button search-md-button\" ng-click=\"searchColorActive()\">' +\r\n                                    '            <md-tooltip md-direction=\"bottom\">Ativos</md-tooltip>' +\r\n                                    '            <i class=\"material-icons\">done_all</i>' +\r\n                                    '        </md-button>' +\r\n                                    '        <md-button ng-class=\"searchIconsInactivate\" class=\"md-icon-button search-md-button\" ng-click=\"searchColorInactivate()\">' +\r\n                                    '            <md-tooltip md-direction=\"bottom\">Inativos</md-tooltip>' +\r\n                                    '            <i class=\"material-icons\">highlight_off</i>' +\r\n                                    '        </md-button>' +\r\n                                    '        <md-button ng-class=\"searchIconsTrash\" class=\"md-icon-button search-md-button\" ng-click=\"colorIconsTrash()\">' +\r\n                                    '            <md-tooltip md-direction=\"bottom\">Excluídos</md-tooltip>' +\r\n                                    '            <i class=\"material-icons\">delete</i>' +\r\n                                    '        </md-button>' +\r\n                                    '    </md-input-container>' +\r\n                                    '</div>' +\r\n\r\n                                    '<md-button ng-click=\"searchPeople(search)\" class=\"md-raised\" style=\"font-size: 11px !important;\">Pesquisar</md-button>';\r\n\r\n                        cb(null, template);\r\n                    },\r\n\r\n                    'serializeQueryString' : function (obj) {\r\n                        var str = [], p, offlineObj = {};\r\n\r\n                        if (scope.offline) {\r\n\r\n                            if (obj.fieldtable && obj.fieldtable.length > 0) {\r\n                                fieldsType = builder.getFields(obj.fieldtable);\r\n                                fieldsType.forEach(function (f) {\r\n                                    if (f.type === 'date') {\r\n                                        offlineObj[f.ref] = angular.copy(obj.searchDate);\r\n                                    } else {\r\n                                        offlineObj[f.ref] = obj.searchDefault;\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                offlineObj = obj.searchDefault;\r\n                            }\r\n\r\n                            return offlineObj;\r\n                        }\r\n\r\n                        for (p in obj) {\r\n                            if (obj.hasOwnProperty(p) && encodeURIComponent(obj[p])) {\r\n                                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\r\n                            }\r\n                        }\r\n\r\n                        if (str.length > 0) {\r\n                            return '&' + str.join('&');\r\n                        }\r\n\r\n                        return str.join('&');\r\n                    },\r\n\r\n                    'searchPeople' : function (search) {\r\n                        $rootScope.$emit('searchPeople', scope.serializeQueryString(search));\r\n                    },\r\n\r\n                    'searchColorActive' : function () {\r\n                        if (scope.searchIconsActive === 'checkOffColorIconFilter') {\r\n                            scope.searchIconsActive = 'checkOnColorIconFilter';\r\n                            scope.search.active     = true;\r\n                        } else {\r\n                            scope.searchIconsActive = 'checkOffColorIconFilter';\r\n                            delete scope.search.active;\r\n                        }\r\n                    },\r\n\r\n                    'searchColorInactivate' : function () {\r\n                        if (scope.searchIconsInactivate === 'checkOffColorIconFilter') {\r\n                            scope.searchIconsInactivate = 'checkOnColorIconFilter';\r\n                            scope.search.inactive       = true;\r\n                        } else {\r\n                            scope.searchIconsInactivate = 'checkOffColorIconFilter';\r\n                            delete scope.search.inactive;\r\n                        }\r\n                    },\r\n\r\n                    'colorIconsTrash' : function () {\r\n                        if (scope.searchIconsTrash === 'checkOffColorIconFilter') {\r\n                            scope.searchIconsTrash = 'checkOnColorIconFilter';\r\n                            scope.search.trash     = true;\r\n                        } else {\r\n                            scope.searchIconsTrash = 'checkOffColorIconFilter';\r\n                            delete scope.search.trash;\r\n                        }\r\n                    },\r\n\r\n                    'getFields': function (names) {\r\n                        fields.length = 0;\r\n\r\n                        if (scope.dynamicForm.allField && scope.dynamicForm.allField.length > 0) {\r\n                            names.forEach(function (n) {\r\n                                scope.dynamicForm.allField.every(function (field) {\r\n                                    if (field.ref === n) {\r\n                                        fields.push(field);\r\n                                        return false;\r\n                                    }\r\n                                    return true;\r\n                                });\r\n                            });\r\n                        }\r\n                        return fields;\r\n                    },\r\n\r\n                    'setHideInputs': function (names) {\r\n\r\n                        if (names && names.length > 0) {\r\n                            fieldsType = builder.getFields(names);\r\n                            fieldsType.forEach(function (field) {\r\n                                if (field.type === 'date') {\r\n                                    scope.show.date = true;\r\n                                } else {\r\n                                    scope.show.default = true;\r\n                                }\r\n\r\n                                if (fieldsType.length === 1) {\r\n                                    scope.show.default = !scope.show.date;\r\n                                    scope.show.date = !scope.show.default;\r\n                                }\r\n                            });\r\n                        } else {\r\n                            scope.show.default = true;\r\n                            scope.show.date = false;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // defining template\r\n                builder.buildTemplate(scope, function (err, template) {\r\n\r\n                    // handling error\r\n                    if (err) {\r\n                        $log.warn(err);\r\n                        return;\r\n                    }\r\n\r\n                    // compiling template\r\n                    compiledElm = $compile(template)(scope);\r\n\r\n                    // handling post compile hooks\r\n                    if (builder.postCompile) {\r\n                        builder.postCompile(compiledElm);\r\n                    }\r\n\r\n                    // replacing into DOM\r\n                    element.replaceWith(compiledElm);\r\n\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgDataTableSearch.$inject = ['$log', '$compile', '$rootScope'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgDataTableSearch', PlgDataTableSearch);\r\n}());\r\n","(function () {\r\n\r\n    angular.module('plingUi').component('plgDatePicker', {\r\n        'bindings'  : {\r\n            'selected'    : '=',\r\n            'disableRange': '=',\r\n            'monthsLimit' : '@',\r\n            'label'       : '='\r\n        },\r\n        'controller' : PlgDatePickerCtrl,\r\n        'templateUrl' : 'plgDatePicker.html'\r\n    });\r\n\r\n    function PlgDatePickerCtrl() {\r\n        var ctrl = this,\r\n            fromDate,\r\n            toDate,\r\n            dateFormat;\r\n\r\n        ctrl.mask = ctrl.disableRange ? '?9?9/?9?9/?9?9?9?9' : '?9?9/?9?9/?9?9?9?9 - ?9?9/?9?9/?9?9?9?9';\r\n\r\n        ctrl.setDates = function (select) {\r\n            if (select.display && select.display.length >= 8 && !select.$invalid) {\r\n                createDates(select.display);\r\n                handleDates(select);\r\n            } else {\r\n                select.fromDate = null;\r\n                select.toDate   = null;\r\n            }\r\n        };\r\n\r\n        ctrl.validate = function (select) {\r\n            if (select && select.display) {\r\n                dateFormat = select.display.replace(new RegExp('(_\\/|\\/_|_)', 'g'), '') || '';\r\n\r\n                if (dateFormat) {\r\n                    fromDate = dateFormat.split(' - ')[0];\r\n                    toDate   = dateFormat.split(' - ')[1];\r\n\r\n                    if (!isValid(fromDate) || toDate && !isValid(toDate)) {\r\n                        select.$invalid = true;\r\n                        select.fromDate = null;\r\n                        select.toDate   = null;\r\n                        return false;\r\n                    }\r\n\r\n                    select.$invalid = false;\r\n                }\r\n            }\r\n        };\r\n\r\n        function isValid(date) {\r\n            return moment(date, 'DD/MM/YYYY', true).isValid();\r\n        }\r\n\r\n        function createDates(display) {\r\n            dateFormat = display.replace(new RegExp('(_\\/|\\/_|_)', 'g'), '') || '';\r\n            fromDate = dateFormat.split(' - ')[0];\r\n            toDate   = dateFormat.split(' - ')[1];\r\n            fromDate = fromDate.slice(-4) + '-' + fromDate.slice(3, 5) + '-' + fromDate.slice(0, 2);\r\n            toDate   = toDate ? toDate.slice(-4) + '-' + toDate.slice(3, 5) + '-' + toDate.slice(0, 2) : '';\r\n        }\r\n\r\n        function handleDates(select) {\r\n            if (toDate && fromDate > toDate) {\r\n                select.fromDate = toDate;\r\n                select.toDate   = fromDate;\r\n\r\n                select.display  = select.display.slice(-10) + ' - ' + select.display.slice(0, 10);\r\n            } else {\r\n                select.fromDate = fromDate;\r\n                select.toDate   = toDate || fromDate;\r\n            }\r\n        }\r\n    }\r\n}());\r\n","angular.module('dndLists', [])\r\n\r\n  /**\r\n   * Use the dnd-draggable attribute to make your element draggable\r\n   *\r\n   * Attributes:\r\n   * - dnd-draggable      Required attribute. The value has to be an object that represents the data\r\n   *                      of the element. In case of a drag and drop operation the object will be\r\n   *                      serialized and unserialized on the receiving end.\r\n   * - dnd-selected       Callback that is invoked when the element was clicked but not dragged.\r\n   *                      The original click event will be provided in the local event variable.\r\n   * - dnd-effect-allowed Use this attribute to limit the operations that can be performed. Options:\r\n   *                      - 'move': The drag operation will move the element. This is the default.\r\n   *                      - 'copy': The drag operation will copy the element. Shows a copy cursor.\r\n   *                      - 'copyMove': The user can choose between copy and move by pressing the\r\n   *                        ctrl or shift key. *Not supported in IE:* In Internet Explorer this\r\n   *                        option will be the same as 'copy'. *Not fully supported in Chrome on\r\n   *                        Windows:* In the Windows version of Chrome the cursor will always be the\r\n   *                        move cursor. However, when the user drops an element and has the ctrl\r\n   *                        key pressed, we will perform a copy anyways.\r\n   *                      - HTML5 also specifies the 'link' option, but this library does not\r\n   *                        actively support it yet, so use it at your own risk.\r\n   * - dnd-moved          Callback that is invoked when the element was moved. Usually you will\r\n   *                      remove your element from the original list in this callback, since the\r\n   *                      directive is not doing that for you automatically. The original dragend\r\n   *                      event will be provided in the local event variable.\r\n   * - dnd-canceled       Callback that is invoked if the element was dragged, but the operation was\r\n   *                      canceled and the element was not dropped. The original dragend event will\r\n   *                      be provided in the local event variable.\r\n   * - dnd-copied         Same as dnd-moved, just that it is called when the element was copied\r\n   *                      instead of moved. The original dragend event will be provided in the local\r\n   *                      event variable.\r\n   * - dnd-dragstart      Callback that is invoked when the element was dragged. The original\r\n   *                      dragstart event will be provided in the local event variable.\r\n   * - dnd-dragend        Callback that is invoked when the drag operation ended. Available local\r\n   *                      variables are event and dropEffect.\r\n   * - dnd-type           Use this attribute if you have different kinds of items in your\r\n   *                      application and you want to limit which items can be dropped into which\r\n   *                      lists. Combine with dnd-allowed-types on the dnd-list(s). This attribute\r\n   *                      should evaluate to a string, although this restriction is not enforced.\r\n   * - dnd-disable-if     You can use this attribute to dynamically disable the draggability of the\r\n   *                      element. This is useful if you have certain list items that you don't want\r\n   *                      to be draggable, or if you want to disable drag & drop completely without\r\n   *                      having two different code branches (e.g. only allow for admins).\r\n   *                      **Note**: If your element is not draggable, the user is probably able to\r\n   *                      select text or images inside of it. Since a selection is always draggable,\r\n   *                      this breaks your UI. You most likely want to disable user selection via\r\n   *                      CSS (see user-select).\r\n   *\r\n   * CSS classes:\r\n   * - dndDragging        This class will be added to the element while the element is being\r\n   *                      dragged. It will affect both the element you see while dragging and the\r\n   *                      source element that stays at it's position. Do not try to hide the source\r\n   *                      element with this class, because that will abort the drag operation.\r\n   * - dndDraggingSource  This class will be added to the element after the drag operation was\r\n   *                      started, meaning it only affects the original element that is still at\r\n   *                      it's source position, and not the 'element' that the user is dragging with\r\n   *                      his mouse pointer.\r\n   */\r\n    .directive('dndDraggable', ['$parse', '$timeout', 'dndDropEffectWorkaround', 'dndDragTypeWorkaround', function($parse,   $timeout,   dndDropEffectWorkaround,   dndDragTypeWorkaround) {\r\n\r\n        return function(scope, element, attr) {\r\n\r\n            // Set the HTML5 draggable attribute on the element\r\n            element.attr('draggable', 'true');\r\n\r\n            // If the dnd-disable-if attribute is set, we have to watch that\r\n            if (attr.dndDisableIf) {\r\n                scope.$watch(attr.dndDisableIf, function(disabled) {\r\n                    element.attr('draggable', !disabled);\r\n                });\r\n            }\r\n\r\n            /**\r\n            * When the drag operation is started we have to prepare the dataTransfer object,\r\n            * which is the primary way we communicate with the target element\r\n            */\r\n            element.on('dragstart', function(event) {\r\n                event = event.originalEvent || event;\r\n\r\n                // Check whether the element is draggable, since dragstart might be triggered on a child.\r\n                if (element.attr('draggable') == 'false') return true; // eslint-disable-line\r\n\r\n                // Serialize the data associated with this element. IE only supports the Text drag type\r\n                event.dataTransfer.setData('Text', angular.toJson(scope.$eval(attr.dndDraggable)));\r\n\r\n                // Only allow actions specified in dnd-effect-allowed attribute\r\n                event.dataTransfer.effectAllowed = attr.dndEffectAllowed || 'move';\r\n\r\n                // Add CSS classes. See documentation above\r\n                element.addClass('dndDragging');\r\n                $timeout(function() { element.addClass('dndDraggingSource'); }, 0);\r\n\r\n                // Workarounds for stupid browsers, see description below\r\n                dndDropEffectWorkaround.dropEffect = 'none';\r\n                dndDragTypeWorkaround.isDragging = true;\r\n\r\n                // Save type of item in global state. Usually, this would go into the dataTransfer\r\n                // typename, but we have to use 'Text' there to support IE\r\n                dndDragTypeWorkaround.dragType = attr.dndType ? scope.$eval(attr.dndType) : undefined; // eslint-disable-line\r\n\r\n                // Try setting a proper drag image if triggered on a dnd-handle (won't work in IE).\r\n                if (event._dndHandle && event.dataTransfer.setDragImage) {\r\n                    event.dataTransfer.setDragImage(element[0], 0, 0);\r\n                }\r\n\r\n                // Invoke callback\r\n                $parse(attr.dndDragstart)(scope, { 'event': event });\r\n\r\n                event.stopPropagation();\r\n            });\r\n\r\n        /**\r\n        * The dragend event is triggered when the element was dropped or when the drag\r\n        * operation was aborted (e.g. hit escape button). Depending on the executed action\r\n        * we will invoke the callbacks specified with the dnd-moved or dnd-copied attribute.\r\n        */\r\n            element.on('dragend', function(event) {\r\n                var dropEffect;\r\n\r\n                event = event.originalEvent || event;\r\n\r\n                // Invoke callbacks. Usually we would use event.dataTransfer.dropEffect to determine\r\n                // the used effect, but Chrome has not implemented that field correctly. On Windows\r\n                // it always sets it to 'none', while Chrome on Linux sometimes sets it to something\r\n                // else when it's supposed to send 'none' (drag operation aborted).\r\n                dropEffect = dndDropEffectWorkaround.dropEffect;\r\n\r\n                scope.$apply(function() {\r\n                    switch (dropEffect) {\r\n                    case 'move':\r\n                        $parse(attr.dndMoved)(scope, { 'event': event });\r\n                        break;\r\n                    case 'copy':\r\n                        $parse(attr.dndCopied)(scope, { 'event': event });\r\n                        break;\r\n                    case 'none':\r\n                        $parse(attr.dndCanceled)(scope, { 'event': event });\r\n                        break;\r\n                    }\r\n\r\n                    $parse(attr.dndDragend)(scope, { 'event': event, 'dropEffect': dropEffect });\r\n                });\r\n\r\n                // Clean up\r\n                element.removeClass('dndDragging');\r\n                $timeout(function() { element.removeClass('dndDraggingSource'); }, 0);\r\n                dndDragTypeWorkaround.isDragging = false;\r\n                event.stopPropagation();\r\n            });\r\n\r\n            /**\r\n            * When the element is clicked we invoke the callback function\r\n            * specified with the dnd-selected attribute.\r\n            */\r\n            element.on('click', function(event) {\r\n                if (!attr.dndSelected) return;\r\n\r\n                event = event.originalEvent || event;\r\n                scope.$apply(function() {\r\n                    $parse(attr.dndSelected)(scope, { 'event': event });\r\n                });\r\n\r\n            // Prevent triggering dndSelected in parent elements.\r\n                event.stopPropagation();\r\n            });\r\n\r\n            /**\r\n            * Workaround to make element draggable in IE9\r\n            */\r\n            element.on('selectstart', function() {\r\n                if (this.dragDrop) this.dragDrop();\r\n            });\r\n        };\r\n    }])\r\n\r\n  /**\r\n   * Use the dnd-list attribute to make your list element a dropzone. Usually you will add a single\r\n   * li element as child with the ng-repeat directive. If you don't do that, we will not be able to\r\n   * position the dropped element correctly. If you want your list to be sortable, also add the\r\n   * dnd-draggable directive to your li element(s). Both the dnd-list and it's direct children must\r\n   * have position: relative CSS style, otherwise the positioning algorithm will not be able to\r\n   * determine the correct placeholder position in all browsers.\r\n   *\r\n   * Attributes:\r\n   * - dnd-list             Required attribute. The value has to be the array in which the data of\r\n   *                        the dropped element should be inserted.\r\n   * - dnd-allowed-types    Optional array of allowed item types. When used, only items that had a\r\n   *                        matching dnd-type attribute will be dropable.\r\n   * - dnd-disable-if       Optional boolean expresssion. When it evaluates to true, no dropping\r\n   *                        into the list is possible. Note that this also disables rearranging\r\n   *                        items inside the list.\r\n   * - dnd-horizontal-list  Optional boolean expresssion. When it evaluates to true, the positioning\r\n   *                        algorithm will use the left and right halfs of the list items instead of\r\n   *                        the upper and lower halfs.\r\n   * - dnd-dragover         Optional expression that is invoked when an element is dragged over the\r\n   *                        list. If the expression is set, but does not return true, the element is\r\n   *                        not allowed to be dropped. The following variables will be available:\r\n   *                        - event: The original dragover event sent by the browser.\r\n   *                        - index: The position in the list at which the element would be dropped.\r\n   *                        - type: The dnd-type set on the dnd-draggable, or undefined if unset.\r\n   *                        - external: Whether the element was dragged from an external source.\r\n   * - dnd-drop             Optional expression that is invoked when an element is dropped on the\r\n   *                        list. The following variables will be available:\r\n   *                        - event: The original drop event sent by the browser.\r\n   *                        - index: The position in the list at which the element would be dropped.\r\n   *                        - item: The transferred object.\r\n   *                        - type: The dnd-type set on the dnd-draggable, or undefined if unset.\r\n   *                        - external: Whether the element was dragged from an external source.\r\n   *                        The return value determines the further handling of the drop:\r\n   *                        - false: The drop will be canceled and the element won't be inserted.\r\n   *                        - true: Signalises that the drop is allowed, but the dnd-drop\r\n   *                          callback already took care of inserting the element.\r\n   *                        - otherwise: All other return values will be treated as the object to\r\n   *                          insert into the array. In most cases you want to simply return the\r\n   *                          item parameter, but there are no restrictions on what you can return.\r\n   * - dnd-inserted         Optional expression that is invoked after a drop if the element was\r\n   *                        actually inserted into the list. The same local variables as for\r\n   *                        dnd-drop will be available. Note that for reorderings inside the same\r\n   *                        list the old element will still be in the list due to the fact that\r\n   *                        dnd-moved was not called yet.\r\n   * - dnd-external-sources Optional boolean expression. When it evaluates to true, the list accepts\r\n   *                        drops from sources outside of the current browser tab. This allows to\r\n   *                        drag and drop accross different browser tabs. Note that this will allow\r\n   *                        to drop arbitrary text into the list, thus it is highly recommended to\r\n   *                        implement the dnd-drop callback to check the incoming element for\r\n   *                        sanity. Furthermore, the dnd-type of external sources can not be\r\n   *                        determined, therefore do not rely on restrictions of dnd-allowed-type.\r\n   *\r\n   * CSS classes:\r\n   * - dndPlaceholder       When an element is dragged over the list, a new placeholder child\r\n   *                        element will be added. This element is of type li and has the class\r\n   *                        dndPlaceholder set. Alternatively, you can define your own placeholder\r\n   *                        by creating a child element with dndPlaceholder class.\r\n   * - dndDragover          Will be added to the list while an element is dragged over the list.\r\n   */\r\n    .directive('dndList', ['$parse', '$timeout', 'dndDropEffectWorkaround', 'dndDragTypeWorkaround', function($parse,   $timeout,   dndDropEffectWorkaround,   dndDragTypeWorkaround) {\r\n        return function(scope, element, attr) {\r\n            // While an element is dragged over the list, this placeholder element is inserted\r\n            // at the location where the element would be inserted after dropping\r\n            var placeholder = getPlaceholderElement(); // eslint-disable-line\r\n            var placeholderNode = placeholder[0];\r\n            var listNode = element[0];\r\n            var horizontal = attr.dndHorizontalList && scope.$eval(attr.dndHorizontalList);\r\n            var externalSources = attr.dndExternalSources && scope.$eval(attr.dndExternalSources);\r\n\r\n            placeholder.remove();\r\n\r\n            /**\r\n            * The dragenter event is fired when a dragged element or text selection enters a valid drop\r\n            * target. According to the spec, we either need to have a dropzone attribute or listen on\r\n            * dragenter events and call preventDefault(). It should be noted though that no browser seems\r\n            * to enforce this behaviour.\r\n            */\r\n            element.on('dragenter', function (event) {\r\n                event = event.originalEvent || event;\r\n                if (!isDropAllowed(event)) return true; // eslint-disable-line\r\n                event.preventDefault();\r\n            });\r\n\r\n            /**\r\n            * The dragover event is triggered 'every few hundred milliseconds' while an element\r\n            * is being dragged over our list, or over an child element.\r\n            */\r\n            element.on('dragover', function(event) {\r\n                var listItemNode;\r\n\r\n                event = event.originalEvent || event;\r\n\r\n                if (!isDropAllowed(event)) return true; // eslint-disable-line\r\n\r\n                // First of all, make sure that the placeholder is shown\r\n                // This is especially important if the list is empty\r\n                if (placeholderNode.parentNode != listNode) { // eslint-disable-line\r\n                    element.append(placeholder);\r\n                }\r\n\r\n                if (event.target !== listNode) {\r\n                    // Try to find the node direct directly below the list node.\r\n                    listItemNode = event.target;\r\n\r\n                    while (listItemNode.parentNode !== listNode && listItemNode.parentNode) {\r\n                        listItemNode = listItemNode.parentNode;\r\n                    }\r\n\r\n                    if (listItemNode.parentNode === listNode && listItemNode !== placeholderNode) {\r\n                        // If the mouse pointer is in the upper half of the child element,\r\n                        // we place it before the child element, otherwise below it.\r\n                        if (isMouseInFirstHalf(event, listItemNode)) { // eslint-disable-line\r\n                            listNode.insertBefore(placeholderNode, listItemNode);\r\n                        } else {\r\n                            listNode.insertBefore(placeholderNode, listItemNode.nextSibling);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // This branch is reached when we are dragging directly over the list element.\r\n                    // Usually we wouldn't need to do anything here, but the IE does not fire it's\r\n                    // events for the child element, only for the list directly. Therefore, we repeat\r\n                    // the positioning algorithm for IE here.\r\n                    if (isMouseInFirstHalf(event, placeholderNode, true)) { // eslint-disable-line\r\n                        // Check if we should move the placeholder element one spot towards the top.\r\n                        // Note that display none elements will have offsetTop and offsetHeight set to\r\n                        // zero, therefore we need a special check for them.\r\n                        while (placeholderNode.previousElementSibling && (isMouseInFirstHalf(event, placeholderNode.previousElementSibling, true) || placeholderNode.previousElementSibling.offsetHeight === 0)) { // eslint-disable-line\r\n                            listNode.insertBefore(placeholderNode, placeholderNode.previousElementSibling);\r\n                        }\r\n                    } else {\r\n                        // Check if we should move the placeholder element one spot towards the bottom\r\n                        while (placeholderNode.nextElementSibling &&\r\n                        !isMouseInFirstHalf(event, placeholderNode.nextElementSibling, true)) { // eslint-disable-line\r\n                            listNode.insertBefore(placeholderNode,\r\n                            placeholderNode.nextElementSibling.nextElementSibling);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // At this point we invoke the callback, which still can disallow the drop.\r\n                // We can't do this earlier because we want to pass the index of the placeholder.\r\n                if (attr.dndDragover && !invokeCallback(attr.dndDragover, event, getPlaceholderIndex())) { // eslint-disable-line\r\n                    return stopDragover(); // eslint-disable-line\r\n                }\r\n\r\n                element.addClass('dndDragover');\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                return false;\r\n            });\r\n\r\n            /**\r\n            * When the element is dropped, we use the position of the placeholder element as the\r\n            * position where we insert the transferred data. This assumes that the list has exactly\r\n            * one child element per array element.\r\n            */\r\n            element.on('drop', function(event) {\r\n                var data, transferredObject, index;\r\n\r\n                event = event.originalEvent || event;\r\n\r\n                if (!isDropAllowed(event)) return true; // eslint-disable-line\r\n\r\n                // The default behavior in Firefox is to interpret the dropped element as URL and\r\n                // forward to it. We want to prevent that even if our drop is aborted.\r\n                event.preventDefault();\r\n\r\n                // Unserialize the data that was serialized in dragstart. According to the HTML5 specs,\r\n                // the 'Text' drag type will be converted to text/plain, but IE does not do that.\r\n                data = event.dataTransfer.getData('Text') || event.dataTransfer.getData('text/plain');\r\n\r\n                try {\r\n                    transferredObject = JSON.parse(data);\r\n                } catch (e) {\r\n                    return stopDragover(); // eslint-disable-line\r\n                }\r\n\r\n                // Invoke the callback, which can transform the transferredObject and even abort the drop.\r\n                index = getPlaceholderIndex(); // eslint-disable-line\r\n\r\n                if (attr.dndDrop) {\r\n                    transferredObject = invokeCallback(attr.dndDrop, event, index, transferredObject); // eslint-disable-line\r\n                    if (!transferredObject) {\r\n                        return stopDragover(); // eslint-disable-line\r\n                    }\r\n                }\r\n\r\n                // Insert the object into the array, unless dnd-drop took care of that (returned true).\r\n                if (transferredObject !== true) {\r\n                    scope.$apply(function() {\r\n                        scope.$eval(attr.dndList).splice(index, 0, transferredObject);\r\n                    });\r\n                }\r\n\r\n                invokeCallback(attr.dndInserted, event, index, transferredObject); // eslint-disable-line\r\n\r\n                // In Chrome on Windows the dropEffect will always be none...\r\n                // We have to determine the actual effect manually from the allowed effects\r\n                if (event.dataTransfer.dropEffect === 'none') {\r\n                    if (event.dataTransfer.effectAllowed === 'copy' ||\r\n                        event.dataTransfer.effectAllowed === 'move') {\r\n                        dndDropEffectWorkaround.dropEffect = event.dataTransfer.effectAllowed;\r\n                    } else {\r\n                        dndDropEffectWorkaround.dropEffect = event.ctrlKey ? 'copy' : 'move';\r\n                    }\r\n                } else {\r\n                    dndDropEffectWorkaround.dropEffect = event.dataTransfer.dropEffect;\r\n                }\r\n\r\n                // Clean up\r\n                stopDragover(); // eslint-disable-line\r\n                event.stopPropagation();\r\n                return false;\r\n            });\r\n\r\n            /**\r\n            * We have to remove the placeholder when the element is no longer dragged over our list. The\r\n            * problem is that the dragleave event is not only fired when the element leaves our list,\r\n            * but also when it leaves a child element -- so practically it's fired all the time. As a\r\n            * workaround we wait a few milliseconds and then check if the dndDragover class was added\r\n            * again. If it is there, dragover must have been called in the meantime, i.e. the element\r\n            * is still dragging over the list. If you know a better way of doing this, please tell me!\r\n            */\r\n            element.on('dragleave', function(event) {\r\n                event = event.originalEvent || event;\r\n\r\n                element.removeClass('dndDragover');\r\n                $timeout(function() {\r\n                    if (!element.hasClass('dndDragover')) {\r\n                        placeholder.remove();\r\n                    }\r\n                }, 100);\r\n            });\r\n\r\n            function isMouseInFirstHalf(event, targetNode, relativeToParent) {\r\n                var mousePointer = horizontal ? event.offsetX || event.layerX\r\n                                              : event.offsetY || event.layerY;\r\n\r\n                var targetSize     = horizontal ? targetNode.offsetWidth : targetNode.offsetHeight;\r\n                var targetPosition = horizontal ? targetNode.offsetLeft : targetNode.offsetTop;\r\n\r\n                targetPosition = relativeToParent ? targetPosition : 0;\r\n                return mousePointer < targetPosition + targetSize / 2;\r\n            }\r\n\r\n            function getPlaceholderElement() {\r\n                var placeholder;\r\n\r\n                angular.forEach(element.children(), function(childNode) {\r\n                    var child = angular.element(childNode);\r\n\r\n                    if (child.hasClass('dndPlaceholder')) {\r\n                        placeholder = child;\r\n                    }\r\n                });\r\n                return placeholder || angular.element('<li class=\"dndPlaceholder\"></li>');\r\n            }\r\n\r\n            function getPlaceholderIndex() {\r\n                return Array.prototype.indexOf.call(listNode.children, placeholderNode);\r\n            }\r\n\r\n            function isDropAllowed(event) {\r\n                var allowed;\r\n\r\n                // Disallow drop from external source unless it's allowed explicitly.\r\n                if (!dndDragTypeWorkaround.isDragging && !externalSources) return false;\r\n\r\n                // Check mimetype. Usually we would use a custom drag type instead of Text, but IE doesn't\r\n                // support that.\r\n                if (!hasTextMimetype(event.dataTransfer.types)) return false; // eslint-disable-line\r\n\r\n                // Now check the dnd-allowed-types against the type of the incoming element. For drops from\r\n                // external sources we don't know the type, so it will need to be checked via dnd-drop.\r\n                if (attr.dndAllowedTypes && dndDragTypeWorkaround.isDragging) {\r\n                    allowed = scope.$eval(attr.dndAllowedTypes);\r\n                    if (angular.isArray(allowed) && allowed.indexOf(dndDragTypeWorkaround.dragType) === -1) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // Check whether droping is disabled completely\r\n                if (attr.dndDisableIf && scope.$eval(attr.dndDisableIf)) return false;\r\n\r\n                return true;\r\n            }\r\n\r\n            function stopDragover() {\r\n                placeholder.remove();\r\n                element.removeClass('dndDragover');\r\n                return true;\r\n            }\r\n\r\n            function invokeCallback(expression, event, index, item) {\r\n                return $parse(expression)(scope, {\r\n                    'event': event,\r\n                    'index': index,\r\n                    'item': item || undefined, // eslint-disable-line\r\n                    'external': !dndDragTypeWorkaround.isDragging,\r\n                    'type': dndDragTypeWorkaround.isDragging ? dndDragTypeWorkaround.dragType : undefined // eslint-disable-line\r\n                });\r\n            }\r\n\r\n            function hasTextMimetype(types) {\r\n                var i;\r\n\r\n                if (!types) return true;\r\n\r\n                for (i = 0; i < types.length; i++) {\r\n                    if (types[i] === 'Text' || types[i] === 'text/plain') return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        };\r\n    }])\r\n\r\n    /**\r\n    * Use the dnd-nodrag attribute inside of dnd-draggable elements to prevent them from starting\r\n    * drag operations. This is especially useful if you want to use input elements inside of\r\n    * dnd-draggable elements or create specific handle elements. Note: This directive does not work\r\n    * in Internet Explorer 9.\r\n    */\r\n    .directive('dndNodrag', function() {\r\n        return function(scope, element, attr) { // eslint-disable-line\r\n            // Set as draggable so that we can cancel the events explicitly\r\n            element.attr('draggable', 'true');\r\n\r\n            /**\r\n            * Since the element is draggable, the browser's default operation is to drag it on dragstart.\r\n            * We will prevent that and also stop the event from bubbling up.\r\n            */\r\n            element.on('dragstart', function(event) {\r\n                event = event.originalEvent || event;\r\n\r\n                if (!event._dndHandle) {\r\n                    // If a child element already reacted to dragstart and set a dataTransfer object, we will\r\n                    // allow that. For example, this is the case for user selections inside of input elements.\r\n                    if (!(event.dataTransfer.types && event.dataTransfer.types.length)) {\r\n                        event.preventDefault();\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n            });\r\n\r\n            /**\r\n            * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element\r\n            * would be removed.\r\n            */\r\n            element.on('dragend', function(event) {\r\n                event = event.originalEvent || event;\r\n                if (!event._dndHandle) {\r\n                    event.stopPropagation();\r\n                }\r\n            });\r\n        };\r\n    })\r\n\r\n  /**\r\n   * Use the dnd-handle directive within a dnd-nodrag element in order to allow dragging with that\r\n   * element after all. Therefore, by combining dnd-nodrag and dnd-handle you can allow\r\n   * dnd-draggable elements to only be dragged via specific 'handle' elements. Note that Internet\r\n   * Explorer will show the handle element as drag image instead of the dnd-draggable element. You\r\n   * can work around this by styling the handle element differently when it is being dragged. Use\r\n   * the CSS selector .dndDragging:not(.dndDraggingSource) [dnd-handle] for that.\r\n   */\r\n    .directive('dndHandle', function() {\r\n        return function(scope, element, attr) { // eslint-disable-line\r\n            element.attr('draggable', 'true');\r\n\r\n            element.on('dragstart dragend', function(event) {\r\n                event = event.originalEvent || event;\r\n                event._dndHandle = true;\r\n            });\r\n        };\r\n    })\r\n\r\n  /**\r\n   * This workaround handles the fact that Internet Explorer does not support drag types other than\r\n   * 'Text' and 'URL'. That means we can not know whether the data comes from one of our elements or\r\n   * is just some other data like a text selection. As a workaround we save the isDragging flag in\r\n   * here. When a dropover event occurs, we only allow the drop if we are already dragging, because\r\n   * that means the element is ours.\r\n   */\r\n  .factory('dndDragTypeWorkaround', function() { return {}; })\r\n\r\n  /**\r\n   * Chrome on Windows does not set the dropEffect field, which we need in dragend to determine\r\n   * whether a drag operation was successful. Therefore we have to maintain it in this global\r\n   * variable. The bug report for that has been open for years:\r\n   * https://code.google.com/p/chromium/issues/detail?id=39399\r\n   */\r\n  .factory('dndDropEffectWorkaround', function() { return {}; });\r\n","\r\nangular.module('plingUi').filter('filterDynamic', ['$filter', function ($filter) {\r\n    'use strict';\r\n\r\n    var output = [], querys = {}, date;\r\n\r\n    function filter(items, value, pkey) {\r\n        if (value && value.fromDate) {\r\n            return items.filter(function (i) {\r\n                date = moment(i[pkey], 'DD/MM/YYYY').isValid() ? moment(i[pkey], 'DD/MM/YYYY').format('YYYY-MM-DD') : moment(i[pkey]).format('YYYY-MM-DD');\r\n                return i[pkey] && (value.fromDate <= date &&  value.toDate >= date);\r\n            });\r\n        } else {\r\n            return $filter('filter')(items, typeof value === 'object' ? '' : value);\r\n        }\r\n    }\r\n\r\n    return function(items, option) {\r\n        querys = {};\r\n        output.length = 0;\r\n\r\n        if (!items || !option || items.length <= 0) {\r\n            return items;\r\n        }\r\n\r\n        if (typeof option === 'object') {\r\n            Object.keys(option).forEach(function (pkey) {\r\n                querys[pkey] = angular.copy(option[pkey]);\r\n            });\r\n        } else {\r\n            querys['default'] = option;\r\n        }\r\n\r\n        Object.keys(querys).forEach(function (pkey) {\r\n            output = filter(output.length > 0 ? output : items, querys[pkey], pkey);\r\n        });\r\n\r\n        return output || items;\r\n    };\r\n}]);\r\n","","/* global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    function PlgEditFabSpeedDial() {\r\n\r\n        return {\r\n            'restrict'    : 'E',\r\n            'controller'  : 'PlgEditFabSpeedDialController',\r\n            'templateUrl' : 'myComponentSample.html',\r\n            'replace'     : true,\r\n            'link' : function (scope) {\r\n                scope.tagline = 'it Works!';\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    angular.module('plingUi').directive('plgEditFabSpeedDial', PlgEditFabSpeedDial);\r\n}());\r\n","(function () {\r\n\r\n    angular.module('plingUi').component('plgElasticSearch', {\r\n        'bindings'  : {},\r\n        'controller' : PlgElasticSearchCtrl,\r\n        'templateUrl' : 'plgElasticSearch.html'\r\n    });\r\n\r\n    PlgElasticSearchCtrl.$inject = ['$q', 'plgElasticSearchService'];\r\n\r\n    function PlgElasticSearchCtrl($q, plgElasticSearchService) {\r\n        var ctrl = this, onTypingEnd;\r\n\r\n        ctrl.selectedItemChange = plgElasticSearchService.onSelectedItemChange;\r\n        ctrl.getDocumentName    = plgElasticSearchService.getRefName;\r\n        ctrl.items              = plgElasticSearchService.items;\r\n        ctrl.getFields          = plgElasticSearchService.getFields;\r\n\r\n        ctrl.querySearch        = function (term) {\r\n            var deferrer = $q.defer();\r\n\r\n            window.clearTimeout(onTypingEnd);\r\n\r\n            if (term.length > 2) {\r\n                onTypingEnd = setTimeout(function() {\r\n                    plgElasticSearchService.querySearch(term, deferrer);\r\n                }, 500);\r\n\r\n                return deferrer.promise;\r\n            }\r\n\r\n            deferrer.reject();\r\n            return [];\r\n        };\r\n    }\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('plingUi').service('plgElasticSearchService', plgElasticSearchService);\r\n\r\n    plgElasticSearchService.$inject = ['$q', 'elasticSearchApiService'];\r\n\r\n    function plgElasticSearchService($q, elasticSearchApiService) {\r\n        var API = {}, cb = angular.noop, self = this;\r\n\r\n        this.getRefName           = getRefName;\r\n        this.getFields            = getFields;\r\n        this.configSearch         = configSearch;\r\n        this.onSelectedItemChange = onSelectedItemChange;\r\n        this.querySearch          = querySearch;\r\n        this.items                = [];\r\n\r\n        /**\r\n         * Get the prop name of object from elasticsearch that need to show to the client\r\n         * @returns {String} Attribute name\r\n         */\r\n        function getRefName() {\r\n            return API ? API.refName : 'name';\r\n        }\r\n\r\n        /**\r\n         * Get fields for search\r\n         * @returns {Object[]} Fields for search\r\n         */\r\n        function getFields() {\r\n            return API ? API.optionsFields : false;\r\n        }\r\n\r\n        /**\r\n         * Config how search need to be\r\n         * @param {Object} api { index, entity, refName, source?, additionalQuery?, size?, optionsFields? }\r\n         * @param {Function} callback callback\r\n         * @returns {undefined} just ignore that\r\n         */\r\n        function configSearch(api, callback) {\r\n            cb = callback || angular.noop;\r\n            if (!validate(api)) {\r\n                return cb(new Error('configSearch api não está completa'));\r\n            }\r\n            API = api;\r\n        }\r\n\r\n        /**\r\n         * handle on user selected a item\r\n         * @param {Object} item ElasticSearch document\r\n         */\r\n        function onSelectedItemChange(item) {\r\n            cb(null, angular.copy(item && item.length === 1 ? item[0] : item));\r\n        }\r\n\r\n        /**\r\n         * get items from elasticSearchApiService\r\n         * @param {String} term User text\r\n         * @param {Promise} deferrer $q.defer() Promise\r\n         * @returns {Promise} promise\r\n         */\r\n        function querySearch(term, deferrer) {\r\n            deferrer = deferrer || $q.defer();\r\n\r\n            elasticSearchApiService.suggest(API.index, API.entity, term, API.source, API.additionalQuery, API.size, function (err, data) {\r\n                if (!err) {\r\n                    cloneArray(self.items, data);\r\n                    deferrer.resolve(data);\r\n                } else {\r\n                    deferrer.reject(err);\r\n                }\r\n            });\r\n            return deferrer.promise;\r\n        }\r\n\r\n\r\n        function validate(api) {\r\n            return api && api.index && api.entity && api.refName;\r\n        }\r\n\r\n        function cloneArray(a, b) {\r\n            var i;\r\n\r\n            a.length = 0;\r\n            for (i = 0; i < b.length; i++) {\r\n                a.push(b[i]);\r\n            }\r\n        }\r\n    }\r\n}());\r\n","/* global angular, console, document, $  */\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgFormCard($log, $compile, $location, $rootScope) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'params': '=',\r\n                'module': '=',\r\n                'dynamicForm': '=',\r\n                'filterDefault': '=',\r\n                'chkList': '=',\r\n                'options': '='\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.params) {\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n\r\n                            scope.editView      = this.editView;\r\n                            scope.toggle        = this.toggle;\r\n                            scope.exists        = this.exists;\r\n\r\n\r\n                            // Display \"show / hide\" buttons actions, ex: Inativar, Excluir... (Click \"checkall\" checkbox)\r\n                            // And md-select \"select none, select all\"\r\n                            // ----- IMPORTANT! We can't clear scope.chkList with new array -----\r\n                            scope.$on('checkedAllItens', function (event, arg) {\r\n                                angular.noop(event);\r\n\r\n                                if (arg) {\r\n                                    scope.params.forEach(function (i) {\r\n                                        if (scope.chkList.filter(function (s) { return s._id === i._id; }).length <= 0) {\r\n                                            scope.chkList.push(i);\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    scope.chkList.length = 0;\r\n                                }\r\n                            });\r\n\r\n                            // Reset value default \"limit\" Infinity Scroll\r\n                            // Reset to \"page = 1\"\r\n                            scope.$on('resetViewsItems', function (event, arg) {\r\n                                angular.noop(event);\r\n                                if (arg && scope.params.length > 0) {\r\n                                    scope.params.splice(scope.options.limit, scope.params.length);\r\n                                    scope.options.page = 1;\r\n                                }\r\n                            });\r\n\r\n                            template =  '<div class=\"gapiCard md-whiteframe-1dp\" ng-class=\"obj.category_name\" flex=\"20\" ng-repeat=\"obj in params | filterDynamic:options.filter\">' +\r\n                                        '   <div class=\"divCheckbox\">' +\r\n                                        '       <md-checkbox aria-label=\"checkbox\" ng-checked=\"exists(obj, chkList)\" ng-click=\"toggle(obj, chkList)\"></md-checkbox>' +\r\n                                        '   </div>' +\r\n\r\n                                        '   <div class=\"divText\">' +\r\n                                        '       <plg-group-filters' +\r\n                                        '               type=\"single\"' +\r\n                                        '               params=\"obj\"' +\r\n                                        '               service-module=\"module\"' +\r\n                                        '               dynamic-form=\"dynamicForm\"' +\r\n                                        '               filter-default=\"filterDefault\">' +\r\n                                        '       </plg-group-filters>' +\r\n                                        '   </div>' +\r\n\r\n                                        '   <div style=\"cursor: pointer\" ng-click=\"editView(module.module, obj._id)\">' +\r\n                                        '      <div class=\"cardIdentity\"></div>' +\r\n                                        '      <div class=\"cardContent\">' +\r\n\r\n\r\n                                        '          <p ng-repeat=\"item in dynamicForm.isListCollumn\" ng-click=\"editView(module.module, obj._id)\" style=\"outline: 0\">' +\r\n\r\n                                        '              <plg-form-fields' +\r\n                                        '                      fields=\"obj[item.ref]\"' +\r\n                                        '                      type-field=\"item\"' +\r\n                                        '                      origin=\"cards\"' +\r\n                                        '              </plg-form-fields>' +\r\n\r\n                                        '          </p>' +\r\n\r\n\r\n                                        '      </div>' +\r\n                                        '   </div>' +\r\n                                        '   <div class=\"clear\"></div>' +\r\n                                        '</div>';\r\n\r\n\r\n                            // returning information\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        // Display \"show / hide\" buttons actions, ex: Inativar, Excluir... (Click only checkbox)\r\n                        'toggle': function (item, chkList) {\r\n                            var idx = chkList.indexOf(item);\r\n\r\n                            if (idx > -1) {\r\n                                chkList.splice(idx, 1);\r\n                            } else {\r\n                                chkList.push(item);\r\n                            }\r\n                        },\r\n\r\n                        'exists': function (item, chkList) {\r\n                            $rootScope.$emit('enableAllActions', chkList);\r\n                            return chkList.indexOf(item) > -1;\r\n                        },\r\n\r\n                        'editView' : function (path, id) {\r\n                            $location.path(path + '/' + id);\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgFormCard.$inject = ['$log', '$compile', '$location', '$rootScope'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgFormCard', PlgFormCard);\r\n}());\r\n","/* global angular, console, document, $, window */\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgFormFields($log, $compile, $sce, $localstorage, core) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'fields': '=',\r\n                'typeField': '=',\r\n                'origin': '@origin'\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                builder = {\r\n                    'buildTemplate': function (scope, cb) {\r\n                        var template,\r\n                            customer_id;\r\n\r\n                        scope.originField = scope.origin === 'listing' ? 'listingFields' : 'cardsFields';\r\n\r\n                        if (scope.typeField.type === 'img') {\r\n\r\n                            // ----------------------- Get image in DRIVE not Parse BASE 64\r\n                            if (scope.typeField.isDriveParseBase64 && scope.fields) {\r\n                                if (scope.fields !== '/assets/img/ic_person_black_48dp_2x.png') {\r\n\r\n                                    // customer_id mantido, pois o viewer no drive não possuí auth do token... neste caso o mesmo eh passado por param\r\n                                    customer_id    = JSON.parse(window.localStorage['PLING-USER']).customer_id;\r\n\r\n                                    scope.imgUrl = core.getAppCoreUrl('drive', 'viewer/' + customer_id + '/' + scope.fields);\r\n                                    template     = '<div><img class=\"{{originField}}\" ng-src=\"{{imgUrl}}\" err-src=\"/assets/img/ic_person_black_48dp_2x.png\" /></div>';\r\n                                } else {\r\n                                    template = '<div><img class=\"{{originField}}\" ng-src=\"{{fields}}\"/></div>';\r\n                                }\r\n                            }\r\n\r\n                        } else if (scope.typeField.type === 'date') {\r\n                            template = '<div style=\"padding: 25px 0;\" flex=\"100\">{{ fields | date: \\'dd/MM/yyyy\\' }}</div>';\r\n                        } else if (scope.typeField.type === 'number') {\r\n                            template = '<div style=\"padding: 25px 0;\" flex=\"100\">{{ fields | number: 2 }}</div>';\r\n                        } else if (scope.origin === 'listing') {\r\n                            template = '<div style=\"padding: 25px 0;\" flex=\"100\">{{fields}}</div>';\r\n                        } else {\r\n                            template = '<div>{{fields}}</div>';\r\n                        }\r\n\r\n\r\n                        cb(null, template);\r\n                    }\r\n\r\n                };\r\n\r\n                // defining template\r\n                builder.buildTemplate(scope, function (err, template) {\r\n\r\n                    // handling error\r\n                    if (err) {\r\n                        $log.warn(err);\r\n                        return;\r\n                    }\r\n\r\n                    // compiling template\r\n                    compiledElm = $compile(template)(scope);\r\n\r\n                    // handling post compile hooks\r\n                    if (builder.postCompile) {\r\n                        builder.postCompile(compiledElm);\r\n                    }\r\n\r\n                    // replacing into DOM\r\n                    element.replaceWith(compiledElm);\r\n\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgFormFields.$inject = ['$log', '$compile', '$sce', '$localstorage', 'coreApiService'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgFormFields', PlgFormFields);\r\n}());\r\n","/* global angular, console, document, $, window */\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgFormList($log, $compile, $location) {\r\n        return {\r\n            'restrict': 'E',\r\n            'transclude': true,\r\n            'scope': {\r\n                'params': '=',\r\n                'module': '=',\r\n                'dynamicForm': '=',\r\n                'filterDefault': '=',\r\n                'chkList': '=',\r\n                'byEvent': '=',\r\n                'objPk': '@',\r\n                'dynamicTemplate': '=',\r\n                'class': '@',\r\n                'disableCellView': '=',\r\n                'disableCellExpand' : '=',\r\n                'callbacks': '=',\r\n                'options': '='\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element, attrs, ctrl, transclude) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.params) {\r\n\r\n                    scope.objPk = scope.objPk || '_id';\r\n\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n\r\n                            scope.editListSelect    = this.editListSelect;\r\n                            scope.toggle            = this.toggle;\r\n                            scope.exists            = this.exists;\r\n\r\n\r\n                            // Display \"show / hide\" buttons actions, ex: Inativar, Excluir... (Click \"checkall\" checkbox)\r\n                            // And md-select \"select none, select all\"\r\n                            // ----- IMPORTANT! We can't clear scope.chkList with new array -----\r\n                            scope.$on('checkedAllItens', function (event, arg) {\r\n                                angular.noop(event);\r\n\r\n                                if (arg) {\r\n                                    scope.params.forEach(function (i) {\r\n                                        if (scope.chkList.filter(function (s) { return s[scope.objPk] === i[scope.objPk]; }).length <= 0) {\r\n                                            scope.chkList.push(i);\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    scope.chkList.length = 0;\r\n                                }\r\n                            });\r\n\r\n                            // Reset value default \"limit\" Infinity Scroll\r\n                            // Reset to \"page = 1\"\r\n                            scope.$on('resetViewsItems', function (event, arg) {\r\n                                angular.noop(event);\r\n                                if (arg && scope.params.length > 0) {\r\n                                    if (scope.options.limit) {\r\n                                        scope.params.splice(scope.options.limit, scope.params.length);\r\n                                    }\r\n                                    scope.options.page = 1;\r\n                                }\r\n                            });\r\n\r\n                            template =  '<div class=\"toolbarListingHeader\" ng-class=\"class\" flex=\"100\">' +\r\n                                        '   <md-list-item class=\"md-2-line plg-list-header\" style=\"min-height: 60px !important\">' +\r\n                                        '       <div class=\"items\" style=\"min-width: 63px !important;\">&nbsp;</div>' +\r\n                                        '       <div class=\"items listContainer\" flex=\"100\" layout=\"column\" ng-repeat=\"header in dynamicForm.isListCollumn\">' +\r\n                                        '           <font color=\"#777777\"><strong><small>{{ header.label }}</small></strong></font>' +\r\n                                        '       </div>' +\r\n                                        '       <div class=\"items\" style=\"min-width: 53px !important;\">&nbsp;</div>' +\r\n                                        '       <div class=\"items\" style=\"min-width: 53px !important;\">&nbsp;</div>' +\r\n                                        '   </md-list-item>' +\r\n                                        '   <md-divider></md-divider>' +\r\n                                        '</div>' +\r\n\r\n                                        '<div ng-repeat=\"obj in params | filterDynamic:options.filter\" ng-hide=\"hideViewRegister\" flex=\"100\" class=\"md-list-div\" ng-class=\"{\\'margin-whiteframe-remove\\': !obj.whiteframe, \\'md-whiteframe-z3\\': obj.whiteframe, \\'margin-whiteframe\\': obj.whiteframe}\" >' +\r\n\r\n                                        '   <md-list-item class=\"md-2-line\" aria-label=\"row\">' +\r\n\r\n                                        '       <div class=\"md-primary gapiListCheck\" style=\"margin-top: 65px;\">' +\r\n                                        '           <div class=\"md-list-checkbox\" >' +\r\n                                        '               <md-checkbox aria-label=\"checkbox\" ng-checked=\"exists(obj, chkList)\" ng-click=\"toggle(obj, chkList)\"></md-checkbox>' +\r\n                                        '           </div>' +\r\n                                        '       </div>' +\r\n                                        '       <div class=\"listContainer\" flex=\"100\" layout=\"column\" ng-click=\"editListSelect(module ? module.module : {}, obj[objPk])\" ng-repeat=\"item in dynamicForm.isListCollumn\">' +\r\n                                        '           <small>' +\r\n\r\n                                        '               <plg-form-fields' +\r\n                                        '                       fields=\"obj[item.ref]\"' +\r\n                                        '                       type-field=\"item\"' +\r\n                                        '                       origin=\"listing\"' +\r\n                                        '               </plg-form-fields>' +\r\n\r\n                                        '           </small>' +\r\n                                        '       </div>' +\r\n                                                (scope.disableCellExpand ? ''\r\n                                       :'       <div style=\"margin-top: 15px;\">' +\r\n                                        '           <plg-change-icon-view' +\r\n                                        '                   obj=\"obj\"' +\r\n                                        '                   service-module=\"module\">' +\r\n                                        '           </plg-change-icon-view>' +\r\n                                        '       </div>') +\r\n                                                (!scope.module ? ''\r\n                                        :'       <div class=\"md-primary gapiListCheck\" style=\"margin-top: 15px;\">' +\r\n\r\n                                        '           <plg-group-filters' +\r\n                                        '                   type=\"single\"' +\r\n                                        '                   params=\"obj\"' +\r\n                                        '                   service-module=\"module\"' +\r\n                                        '                   filter-default=\"filterDefault\" by-event=\"byEvent\">' +\r\n                                        '           </plg-group-filters>' +\r\n\r\n                                        '       </div>') +\r\n                                        '   </md-list-item>' +\r\n                                        '   <md-divider style=\"border: 1px solid #eeeeee\"></md-divider>' +\r\n                                        '   <md-list-item class=\"md-list-all-content\" layout=\"row\" layout-wrap ng-if=\"obj.whiteframe\" style=\"margin: 0px !important;\">' +\r\n\r\n                                            (scope.dynamicTemplate ? '<DYNAMIC_TEMPLATE/>' : '<plg-list-view params=\"obj\" dynamic-form=\"dynamicForm\"></plg-list-view>') +\r\n\r\n                                        '   </md-list-item>' +\r\n                                        '</div>';\r\n\r\n                            if (scope.dynamicTemplate) {\r\n                                transclude(scope, function(clone) {\r\n                                    template = template.replace('<DYNAMIC_TEMPLATE/>', clone[1].data);\r\n                                });\r\n                            }\r\n\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        // Display \"show / hide\" buttons actions, ex: Inativar, Excluir... (Click only checkbox)\r\n                        'toggle': function (item, chkList) {\r\n                            var idx = chkList.indexOf(item);\r\n\r\n                            if (idx > -1) {\r\n                                chkList.splice(idx, 1);\r\n                            } else {\r\n                                chkList.push(item);\r\n                            }\r\n                        },\r\n\r\n                        // Set the array within the scope of the controller\r\n                        'exists': function (item, chkList) {\r\n                            return chkList.indexOf(item) > -1;\r\n                        },\r\n\r\n                        // redirect to Edit\r\n                        'editListSelect' : function (path, id) {\r\n                            if (!scope.disableCellView) {\r\n                                $location.path(path + '/' + id);\r\n                            }\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        scope.chkList.length = 0;\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgFormList.$inject = ['$log', '$compile', '$location'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgFormList', PlgFormList);\r\n}());\r\n","/* global angular, console, document, $, window */\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgGroupFilters($rootScope, $log, $compile, $http, core) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'params': '=',\r\n                'serviceModule': '=',\r\n                'filterDefault': '=',\r\n                'viewItems': '=',\r\n                'byEvent': '=',\r\n                'type': '@type'\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.type) {\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n\r\n                            if (scope.type === 'single') {\r\n\r\n                                scope.actionsList       = this.actionsList;\r\n\r\n                                scope.coremodulename    = scope.serviceModule.coremodulename;\r\n                                scope.resultViewItems   = builder.action(scope.filterDefault.action, scope.serviceModule.viewItems);\r\n\r\n                                template =  '<md-menu md-offset=\"-22 20\" md-position-mode=\"target-right target\">' +\r\n                                            '    <md-button aria-label=\"\" class=\"md-icon-button plgGroupFiltersSingle\" ng-click=\"$mdOpenMenu($event);\" md-prevent-menu-close=\"md-prevent-menu-close\">' +\r\n                                            '        <md-tooltip>Ações</md-tooltip>' +\r\n                                            '        <md-icon>more_vert</md-icon>' +\r\n                                            '    </md-button>' +\r\n                                            '    <md-menu-content layout=\"column\" layout-wrap width=\"3\">' +\r\n                                            '       <div ng-repeat=\"(key, value) in resultViewItems | groupBy: \\'group\\'\">' +\r\n                                            '           <md-menu-item flex class=\"filterDataTableItem\">' +\r\n                                            '               <p><font color=\"#959595\" size=\"2\">{{key}}</font></p>' +\r\n                                            '           </md-menu-item>' +\r\n                                            '           <md-menu-item flex ng-repeat=\"item in value\" class=\"filterDataTableItem\">' +\r\n                                            '               <md-button ng-click=\"actionsList(params, \\'Registro\\', item, coremodulename)\">' +\r\n                                            '                   <md-icon md-svg-src=\"{{item.moduleIcon}}\" class=\"plGroupFiltersButton\"></md-icon>' +\r\n                                            '                   <font color=\"#505050\" size=\"2\">{{item.name}}</font>' +\r\n                                            '               </md-button>' +\r\n                                            '           </md-menu-item>' +\r\n                                            '       </div>' +\r\n                                            '    </md-menu-content>' +\r\n                                            '</md-menu>';\r\n\r\n                            } else if (scope.type === 'bulk') {\r\n\r\n\r\n                                scope.allActionsBulk = this.allActionsBulk;\r\n\r\n\r\n                                template =  '<md-menu md-offset=\"-22 20\" md-position-mode=\"target-right target\">' +\r\n                                            '    <md-button aria-label=\"\" class=\"md-icon-button plgGroupFiltersBulk\" ng-click=\"$mdOpenMenu($event);\" md-prevent-menu-close=\"md-prevent-menu-close\">' +\r\n                                            '        <md-tooltip>Ações</md-tooltip>' +\r\n                                            '        <md-icon style=\"color: #ffffff\">more_vert</md-icon>' +\r\n                                            '    </md-button>' +\r\n                                            '    <md-menu-content layout=\"column\" layout-wrap width=\"3\">' +\r\n                                            '       <div ng-repeat=\"(key, value) in viewItems | groupBy: \\'group\\'\">' +\r\n                                            '           <md-menu-item flex class=\"filterDataTableItem\">' +\r\n                                            '               <p><font color=\"#959595\" size=\"2\">{{key}}</font></p>' +\r\n                                            '           </md-menu-item>' +\r\n                                            '           <md-menu-item flex ng-repeat=\"item in value\" class=\"filterDataTableItem\">' +\r\n                                            '               <md-button ng-click=\"allActionsBulk(item)\" aria-label=\"none\">' +\r\n                                            '                   <md-icon md-svg-src=\"{{item.moduleIcon}}\" class=\"plGroupFiltersButton\"></md-icon>' +\r\n                                            '                   <font color=\"#505050\" size=\"2\">{{item.name}}</font>' +\r\n                                            '               </md-button>' +\r\n                                            '           </md-menu-item>' +\r\n                                            '       </div>' +\r\n                                            '    </md-menu-content>' +\r\n                                            '</md-menu>';\r\n\r\n                            }\r\n\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        'actionsList': function (param, label, item, coremodulename) {\r\n                            var payload = {},\r\n                                getParam;\r\n\r\n                            if (scope.byEvent) {\r\n                                $rootScope.$emit('allActionsList', item, param, coremodulename);\r\n                            } else {\r\n\r\n                                /* jslint nomen:true*/\r\n                                getParam                = param._id;\r\n\r\n                                /* jslint nomen:false*/\r\n                                payload[item.method]    = item.action;\r\n\r\n                                $http.patch(core.getAppCoreUrl('integra', coremodulename + '/' + getParam), payload)\r\n                                    .success(function (data) {\r\n                                        if (data) {\r\n                                            $rootScope.$emit('saveRecordSuccess', label + ' ' + item.msg + ' com sucesso.');\r\n                                            $rootScope.$emit('research', [param], item.method, item.action);\r\n                                        } else {\r\n                                            $rootScope.$emit('recordError', 'Ocorreu um erro ao ' + item.msg + ' ' + coremodulename);\r\n                                        }\r\n                                    });\r\n                            }\r\n                        },\r\n\r\n                        'allActionsBulk': function (item) {\r\n                            $rootScope.$emit('allActionsBulk', item);\r\n                        },\r\n\r\n                        'action': function (action, viewItems) {\r\n                            var i,\r\n                                j,\r\n                                viewItemsFilter   = [];\r\n\r\n                            for (i = 0; i < viewItems.length; i += 1)\r\n                                for (j = 0; j < viewItems[i].type.length; j += 1)\r\n                                    if (viewItems[i].type[j].itens === action)\r\n                                        viewItemsFilter.push(viewItems[i]);\r\n\r\n                            return viewItemsFilter;\r\n                        }\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgGroupFilters.$inject = ['$rootScope', '$log', '$compile', '$http', 'coreApiService'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgGroupFilters', PlgGroupFilters);\r\n}());\r\n","/*\r\n * ngImgCrop v0.3.2\r\n * https://github.com/alexk111/ngImgCrop\r\n *\r\n * Copyright (c) 2014 Alex Kaul\r\n * License: MIT\r\n *\r\n * Generated at Wednesday, December 3rd, 2014, 3:54:12 PM\r\n */\r\n(function() {\r\n    'use strict';\r\n\r\n    var crop = angular.module('plingUi');\r\n\r\n    crop.factory('cropAreaCircle', ['cropArea', function(CropArea) {\r\n        var CropAreaCircle = function() {\r\n            CropArea.apply(this, arguments);\r\n\r\n            this._boxResizeBaseSize = 20;\r\n            this._boxResizeNormalRatio = 0.9;\r\n            this._boxResizeHoverRatio = 1.2;\r\n            this._iconMoveNormalRatio = 0.9;\r\n            this._iconMoveHoverRatio = 1.2;\r\n\r\n            this._boxResizeNormalSize = this._boxResizeBaseSize*this._boxResizeNormalRatio;\r\n            this._boxResizeHoverSize = this._boxResizeBaseSize*this._boxResizeHoverRatio;\r\n\r\n            this._posDragStartX=0;\r\n            this._posDragStartY=0;\r\n            this._posResizeStartX=0;\r\n            this._posResizeStartY=0;\r\n            this._posResizeStartSize=0;\r\n\r\n            this._boxResizeIsHover = false;\r\n            this._areaIsHover = false;\r\n            this._boxResizeIsDragging = false;\r\n            this._areaIsDragging = false;\r\n        };\r\n\r\n        CropAreaCircle.prototype = new CropArea();\r\n\r\n        CropAreaCircle.prototype._calcCirclePerimeterCoords=function(angleDegrees) {\r\n            var hSize=this._size/2;\r\n            var angleRadians = angleDegrees * (Math.PI / 180),\r\n                circlePerimeterX = this._x + hSize * Math.cos(angleRadians),\r\n                circlePerimeterY = this._y + hSize * Math.sin(angleRadians);\r\n\r\n            return [circlePerimeterX, circlePerimeterY];\r\n        };\r\n\r\n        CropAreaCircle.prototype._calcResizeIconCenterCoords=function() {\r\n            return this._calcCirclePerimeterCoords(-45);\r\n        };\r\n\r\n        CropAreaCircle.prototype._isCoordWithinArea=function(coord) {\r\n            return Math.sqrt((coord[0]-this._x)*(coord[0]-this._x) + (coord[1]-this._y)*(coord[1]-this._y)) < this._size/2;\r\n        };\r\n        CropAreaCircle.prototype._isCoordWithinBoxResize=function(coord) {\r\n            var resizeIconCenterCoords=this._calcResizeIconCenterCoords();\r\n            var hSize=this._boxResizeHoverSize/2;\r\n\r\n            return coord[0] > resizeIconCenterCoords[0] - hSize && coord[0] < resizeIconCenterCoords[0] + hSize &&\r\n                   coord[1] > resizeIconCenterCoords[1] - hSize && coord[1] < resizeIconCenterCoords[1] + hSize;\r\n        };\r\n\r\n        CropAreaCircle.prototype._drawArea=function(ctx, centerCoords, size) {\r\n            ctx.arc(centerCoords[0], centerCoords[1], size/2, 0, 2 * Math.PI);\r\n        };\r\n\r\n        CropAreaCircle.prototype.draw=function() {\r\n            CropArea.prototype.draw.apply(this, arguments);\r\n\r\n            // draw move icon\r\n            this._cropCanvas.drawIconMove([this._x, this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);\r\n\r\n            // draw resize cubes\r\n            this._cropCanvas.drawIconResizeBoxNESW(this._calcResizeIconCenterCoords(), this._boxResizeBaseSize, this._boxResizeIsHover?this._boxResizeHoverRatio:this._boxResizeNormalRatio);\r\n        };\r\n\r\n        CropAreaCircle.prototype.processMouseMove=function(mouseCurX, mouseCurY) {\r\n            var cursor='default', iFR, iFX, iFY;\r\n            var res=false;\r\n\r\n            this._boxResizeIsHover = false;\r\n            this._areaIsHover = false;\r\n\r\n            if (this._areaIsDragging) {\r\n                this._x = mouseCurX - this._posDragStartX;\r\n                this._y = mouseCurY - this._posDragStartY;\r\n                this._areaIsHover = true;\r\n                cursor='move';\r\n                res=true;\r\n                this._events.trigger('area-move');\r\n            } else if (this._boxResizeIsDragging) {\r\n                cursor = 'nesw-resize';\r\n                iFX = mouseCurX - this._posResizeStartX;\r\n                iFY = this._posResizeStartY - mouseCurY;\r\n                if (iFX > iFY) {\r\n                    iFR = this._posResizeStartSize + iFY*2;\r\n                } else {\r\n                    iFR = this._posResizeStartSize + iFX*2;\r\n                }\r\n\r\n                this._size = Math.max(this._minSize, iFR);\r\n                this._boxResizeIsHover = true;\r\n                res=true;\r\n                this._events.trigger('area-resize');\r\n            } else if (this._isCoordWithinBoxResize([mouseCurX, mouseCurY])) {\r\n                cursor = 'nesw-resize';\r\n                this._areaIsHover = false;\r\n                this._boxResizeIsHover = true;\r\n                res=true;\r\n            } else if (this._isCoordWithinArea([mouseCurX, mouseCurY])) {\r\n                cursor = 'move';\r\n                this._areaIsHover = true;\r\n                res=true;\r\n            }\r\n\r\n            this._dontDragOutside();\r\n            angular.element(this._ctx.canvas).css({'cursor': cursor});\r\n\r\n            return res;\r\n        };\r\n\r\n        CropAreaCircle.prototype.processMouseDown=function(mouseDownX, mouseDownY) {\r\n            if (this._isCoordWithinBoxResize([mouseDownX, mouseDownY])) {\r\n                this._areaIsDragging = false;\r\n                this._areaIsHover = false;\r\n                this._boxResizeIsDragging = true;\r\n                this._boxResizeIsHover = true;\r\n                this._posResizeStartX=mouseDownX;\r\n                this._posResizeStartY=mouseDownY;\r\n                this._posResizeStartSize = this._size;\r\n                this._events.trigger('area-resize-start');\r\n            } else if (this._isCoordWithinArea([mouseDownX, mouseDownY])) {\r\n                this._areaIsDragging = true;\r\n                this._areaIsHover = true;\r\n                this._boxResizeIsDragging = false;\r\n                this._boxResizeIsHover = false;\r\n                this._posDragStartX = mouseDownX - this._x;\r\n                this._posDragStartY = mouseDownY - this._y;\r\n                this._events.trigger('area-move-start');\r\n            }\r\n        };\r\n\r\n        CropAreaCircle.prototype.processMouseUp = function(/* eslint-disable-line no-console. mouseUpX, mouseUpY */) {\r\n            if (this._areaIsDragging) {\r\n                this._areaIsDragging = false;\r\n                this._events.trigger('area-move-end');\r\n            }\r\n            if (this._boxResizeIsDragging) {\r\n                this._boxResizeIsDragging = false;\r\n                this._events.trigger('area-resize-end');\r\n            }\r\n            this._areaIsHover = false;\r\n            this._boxResizeIsHover = false;\r\n\r\n            this._posDragStartX = 0;\r\n            this._posDragStartY = 0;\r\n        };\r\n\r\n        return CropAreaCircle;\r\n    }]);\r\n\r\n    crop.factory('cropAreaSquare', ['cropArea', function(CropArea) {\r\n        var CropAreaSquare = function() {\r\n            CropArea.apply(this, arguments);\r\n\r\n            this._resizeCtrlBaseRadius = 10;\r\n            this._resizeCtrlNormalRatio = 0.75;\r\n            this._resizeCtrlHoverRatio = 1;\r\n            this._iconMoveNormalRatio = 0.9;\r\n            this._iconMoveHoverRatio = 1.2;\r\n\r\n            this._resizeCtrlNormalRadius = this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio;\r\n            this._resizeCtrlHoverRadius = this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio;\r\n\r\n            this._posDragStartX=0;\r\n            this._posDragStartY=0;\r\n            this._posResizeStartX=0;\r\n            this._posResizeStartY=0;\r\n            this._posResizeStartSize=0;\r\n\r\n            this._resizeCtrlIsHover = -1;\r\n            this._areaIsHover = false;\r\n            this._resizeCtrlIsDragging = -1;\r\n            this._areaIsDragging = false;\r\n        };\r\n\r\n        CropAreaSquare.prototype = new CropArea();\r\n\r\n        CropAreaSquare.prototype._calcSquareCorners=function() {\r\n            var hSize=this._size/2;\r\n\r\n            return [\r\n              [this._x-hSize, this._y-hSize],\r\n              [this._x+hSize, this._y-hSize],\r\n              [this._x-hSize, this._y+hSize],\r\n              [this._x+hSize, this._y+hSize]\r\n            ];\r\n        };\r\n\r\n        CropAreaSquare.prototype._calcSquareDimensions=function() {\r\n            var hSize=this._size/2;\r\n\r\n            return {\r\n                'left': this._x-hSize,\r\n                'top': this._y-hSize,\r\n                'right': this._x+hSize,\r\n                'bottom': this._y+hSize\r\n            };\r\n        };\r\n\r\n        CropAreaSquare.prototype._isCoordWithinArea=function(coord) {\r\n            var squareDimensions=this._calcSquareDimensions();\r\n\r\n            return coord[0]>=squareDimensions.left&&coord[0]<=squareDimensions.right&&coord[1]>=squareDimensions.top&&coord[1]<=squareDimensions.bottom;\r\n        };\r\n\r\n        CropAreaSquare.prototype._isCoordWithinResizeCtrl=function(coord) {\r\n            var resizeIconsCenterCoords=this._calcSquareCorners();\r\n            var res=-1, i, len, resizeIconCenterCoords;\r\n\r\n            for (i=0, len = resizeIconsCenterCoords.length; i < len; i++) {\r\n                resizeIconCenterCoords = resizeIconsCenterCoords[i];\r\n                if (coord[0] > resizeIconCenterCoords[0] - this._resizeCtrlHoverRadius && coord[0] < resizeIconCenterCoords[0] + this._resizeCtrlHoverRadius &&\r\n                 coord[1] > resizeIconCenterCoords[1] - this._resizeCtrlHoverRadius && coord[1] < resizeIconCenterCoords[1] + this._resizeCtrlHoverRadius) {\r\n                    res=i;\r\n                    break;\r\n                }\r\n            }\r\n            return res;\r\n        };\r\n\r\n        CropAreaSquare.prototype._drawArea=function(ctx, centerCoords, size) {\r\n            var hSize=size/2;\r\n\r\n            ctx.rect(centerCoords[0]-hSize, centerCoords[1]-hSize, size, size);\r\n        };\r\n\r\n        CropAreaSquare.prototype.draw=function() {\r\n            var resizeIconsCenterCoords, i, len, resizeIconCenterCoords;\r\n\r\n            CropArea.prototype.draw.apply(this, arguments);\r\n            // draw move icon\r\n            this._cropCanvas.drawIconMove([this._x, this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);\r\n\r\n            // draw resize cubes\r\n            resizeIconsCenterCoords = this._calcSquareCorners();\r\n            for (i = 0, len = resizeIconsCenterCoords.length; i < len; i++) {\r\n                resizeIconCenterCoords=resizeIconsCenterCoords[i];\r\n                this._cropCanvas.drawIconResizeCircle(resizeIconCenterCoords, this._resizeCtrlBaseRadius, this._resizeCtrlIsHover===i?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio);\r\n            }\r\n        };\r\n\r\n        CropAreaSquare.prototype.processMouseMove=function(mouseCurX, mouseCurY) {\r\n            var cursor='default', xMulti, yMulti, iFX, iFY, iFR, wasSize, posModifier, hoveredResizeBox, res = false;\r\n\r\n            this._resizeCtrlIsHover = -1;\r\n            this._areaIsHover = false;\r\n\r\n            if (this._areaIsDragging) {\r\n                this._x = mouseCurX - this._posDragStartX;\r\n                this._y = mouseCurY - this._posDragStartY;\r\n                this._areaIsHover = true;\r\n                cursor='move';\r\n                res=true;\r\n                this._events.trigger('area-move');\r\n            } else if (this._resizeCtrlIsDragging>-1) {\r\n                switch (this._resizeCtrlIsDragging) {\r\n                case 0: // eslint-disable-line no-console. Top Left\r\n                    xMulti=-1;\r\n                    yMulti=-1;\r\n                    cursor = 'nwse-resize';\r\n                    break;\r\n                case 1: // eslint-disable-line no-console. Top Right\r\n                    xMulti=1;\r\n                    yMulti=-1;\r\n                    cursor = 'nesw-resize';\r\n                    break;\r\n                case 2: // eslint-disable-line no-console. Bottom Left\r\n                    xMulti=-1;\r\n                    yMulti=1;\r\n                    cursor = 'nesw-resize';\r\n                    break;\r\n                case 3: // eslint-disable-line no-console. Bottom Right\r\n                    xMulti=1;\r\n                    yMulti=1;\r\n                    cursor = 'nwse-resize';\r\n                    break;\r\n                }\r\n                iFX = (mouseCurX - this._posResizeStartX)*xMulti;\r\n                iFY = (mouseCurY - this._posResizeStartY)*yMulti;\r\n                if (iFX>iFY) {\r\n                    iFR = this._posResizeStartSize + iFY;\r\n                } else {\r\n                    iFR = this._posResizeStartSize + iFX;\r\n                }\r\n                wasSize=this._size;\r\n                this._size = Math.max(this._minSize, iFR);\r\n                posModifier=(this._size-wasSize)/2;\r\n                this._x+=posModifier*xMulti;\r\n                this._y+=posModifier*yMulti;\r\n                this._resizeCtrlIsHover = this._resizeCtrlIsDragging;\r\n                res=true;\r\n                this._events.trigger('area-resize');\r\n            } else {\r\n                hoveredResizeBox=this._isCoordWithinResizeCtrl([mouseCurX, mouseCurY]);\r\n                if (hoveredResizeBox>-1) {\r\n                    switch (hoveredResizeBox) {\r\n                    case 0:\r\n                        cursor = 'nwse-resize';\r\n                        break;\r\n                    case 1:\r\n                        cursor = 'nesw-resize';\r\n                        break;\r\n                    case 2:\r\n                        cursor = 'nesw-resize';\r\n                        break;\r\n                    case 3:\r\n                        cursor = 'nwse-resize';\r\n                        break;\r\n                    }\r\n                    this._areaIsHover = false;\r\n                    this._resizeCtrlIsHover = hoveredResizeBox;\r\n                    res=true;\r\n                } else if (this._isCoordWithinArea([mouseCurX, mouseCurY])) {\r\n                    cursor = 'move';\r\n                    this._areaIsHover = true;\r\n                    res=true;\r\n                }\r\n            }\r\n\r\n            this._dontDragOutside();\r\n            angular.element(this._ctx.canvas).css({'cursor': cursor});\r\n\r\n            return res;\r\n        };\r\n\r\n        CropAreaSquare.prototype.processMouseDown=function(mouseDownX, mouseDownY) {\r\n            var isWithinResizeCtrl=this._isCoordWithinResizeCtrl([mouseDownX, mouseDownY]);\r\n\r\n            if (isWithinResizeCtrl>-1) {\r\n                this._areaIsDragging = false;\r\n                this._areaIsHover = false;\r\n                this._resizeCtrlIsDragging = isWithinResizeCtrl;\r\n                this._resizeCtrlIsHover = isWithinResizeCtrl;\r\n                this._posResizeStartX=mouseDownX;\r\n                this._posResizeStartY=mouseDownY;\r\n                this._posResizeStartSize = this._size;\r\n                this._events.trigger('area-resize-start');\r\n            } else if (this._isCoordWithinArea([mouseDownX, mouseDownY])) {\r\n                this._areaIsDragging = true;\r\n                this._areaIsHover = true;\r\n                this._resizeCtrlIsDragging = -1;\r\n                this._resizeCtrlIsHover = -1;\r\n                this._posDragStartX = mouseDownX - this._x;\r\n                this._posDragStartY = mouseDownY - this._y;\r\n                this._events.trigger('area-move-start');\r\n            }\r\n        };\r\n\r\n        CropAreaSquare.prototype.processMouseUp=function(/* eslint-disable-line no-console. mouseUpX, mouseUpY */) {\r\n            if (this._areaIsDragging) {\r\n                this._areaIsDragging = false;\r\n                this._events.trigger('area-move-end');\r\n            }\r\n            if (this._resizeCtrlIsDragging>-1) {\r\n                this._resizeCtrlIsDragging = -1;\r\n                this._events.trigger('area-resize-end');\r\n            }\r\n            this._areaIsHover = false;\r\n            this._resizeCtrlIsHover = -1;\r\n\r\n            this._posDragStartX = 0;\r\n            this._posDragStartY = 0;\r\n        };\r\n\r\n        return CropAreaSquare;\r\n    }]);\r\n\r\n    crop.factory('cropArea', ['cropCanvas', function(CropCanvas) {\r\n\r\n        /* global Image */\r\n        var CropArea = function(ctx, events) {\r\n            this._ctx=ctx;\r\n            this._events=events;\r\n\r\n            this._minSize=80;\r\n\r\n            this._cropCanvas=new CropCanvas(ctx);\r\n\r\n            this._image = new Image();\r\n            this._x = 0;\r\n            this._y = 0;\r\n            this._size = 200;\r\n        };\r\n\r\n  /* GETTERS/SETTERS */\r\n\r\n        CropArea.prototype.getImage = function () {\r\n            return this._image;\r\n        };\r\n        CropArea.prototype.setImage = function (image) {\r\n            this._image = image;\r\n        };\r\n\r\n        CropArea.prototype.getX = function () {\r\n            return this._x;\r\n        };\r\n        CropArea.prototype.setX = function (x) {\r\n            this._x = x;\r\n            this._dontDragOutside();\r\n        };\r\n\r\n        CropArea.prototype.getY = function () {\r\n            return this._y;\r\n        };\r\n        CropArea.prototype.setY = function (y) {\r\n            this._y = y;\r\n            this._dontDragOutside();\r\n        };\r\n\r\n        CropArea.prototype.getSize = function () {\r\n            return this._size;\r\n        };\r\n        CropArea.prototype.setSize = function (size) {\r\n            this._size = Math.max(this._minSize, size);\r\n            this._dontDragOutside();\r\n        };\r\n\r\n        CropArea.prototype.getMinSize = function () {\r\n            return this._minSize;\r\n        };\r\n        CropArea.prototype.setMinSize = function (size) {\r\n            this._minSize = size;\r\n            this._size = Math.max(this._minSize, this._size);\r\n            this._dontDragOutside();\r\n        };\r\n\r\n        /* FUNCTIONS */\r\n        CropArea.prototype._dontDragOutside=function() {\r\n            var h=this._ctx.canvas.height,\r\n                w=this._ctx.canvas.width;\r\n\r\n            if (this._size>w) { this._size=w; }\r\n            if (this._size>h) { this._size=h; }\r\n            if (this._x<this._size/2) { this._x=this._size/2; }\r\n            if (this._x>w-this._size/2) { this._x=w-this._size/2; }\r\n            if (this._y<this._size/2) { this._y=this._size/2; }\r\n            if (this._y>h-this._size/2) { this._y=h-this._size/2; }\r\n        };\r\n\r\n        CropArea.prototype._drawArea=function() {};\r\n\r\n        CropArea.prototype.draw=function() {\r\n            // draw crop area\r\n            this._cropCanvas.drawCropArea(this._image, [this._x, this._y], this._size, this._drawArea);\r\n        };\r\n\r\n        CropArea.prototype.processMouseMove=function() {};\r\n\r\n        CropArea.prototype.processMouseDown=function() {};\r\n\r\n        CropArea.prototype.processMouseUp=function() {};\r\n\r\n        return CropArea;\r\n    }]);\r\n\r\n    crop.factory('cropCanvas', [function() {\r\n    // Shape = Array of [x,y]; [0, 0] - center\r\n        var shapeArrowNW=[[-0.5, -2], [-3, -4.5], [-0.5, -7], [-7, -7], [-7, -0.5], [-4.5, -3], [-2, -0.5]];\r\n        var shapeArrowNE=[[0.5, -2], [3, -4.5], [0.5, -7], [7, -7], [7, -0.5], [4.5, -3], [2, -0.5]];\r\n        var shapeArrowSW=[[-0.5, 2], [-3, 4.5], [-0.5, 7], [-7, 7], [-7, 0.5], [-4.5, 3], [-2, 0.5]];\r\n        var shapeArrowSE=[[0.5, 2], [3, 4.5], [0.5, 7], [7, 7], [7, 0.5], [4.5, 3], [2, 0.5]];\r\n        var shapeArrowN=[[-1.5, -2.5], [-1.5, -6], [-5, -6], [0, -11], [5, -6], [1.5, -6], [1.5, -2.5]];\r\n        var shapeArrowW=[[-2.5, -1.5], [-6, -1.5], [-6, -5], [-11, 0], [-6, 5], [-6, 1.5], [-2.5, 1.5]];\r\n        var shapeArrowS=[[-1.5, 2.5], [-1.5, 6], [-5, 6], [0, 11], [5, 6], [1.5, 6], [1.5, 2.5]];\r\n        var shapeArrowE=[[2.5, -1.5], [6, -1.5], [6, -5], [11, 0], [6, 5], [6, 1.5], [2.5, 1.5]];\r\n\r\n  // Colors\r\n        var colors={\r\n            'areaOutline': '#fff',\r\n            'resizeBoxStroke': '#fff',\r\n            'resizeBoxFill': '#444',\r\n            'resizeBoxArrowFill': '#fff',\r\n            'resizeCircleStroke': '#fff',\r\n            'resizeCircleFill': '#444',\r\n            'moveIconFill': '#fff'\r\n        };\r\n\r\n        return function(ctx) {\r\n\r\n            /* Base functions */\r\n\r\n            // Calculate Point\r\n            var calcPoint=function(point, offset, scale) {\r\n                return [scale*point[0]+offset[0], scale*point[1]+offset[1]];\r\n            };\r\n\r\n            // Draw Filled Polygon\r\n            var drawFilledPolygon=function(shape, fillStyle, centerCoords, scale) {\r\n                var pc, p, pc0;\r\n\r\n                ctx.save();\r\n                ctx.fillStyle = fillStyle;\r\n                ctx.beginPath();\r\n                pc0=calcPoint(shape[0], centerCoords, scale);\r\n                ctx.moveTo(pc0[0], pc0[1]);\r\n\r\n                for (p in shape) {\r\n                    if (p > 0) {\r\n                        pc=calcPoint(shape[p], centerCoords, scale);\r\n                        ctx.lineTo(pc[0], pc[1]);\r\n                    }\r\n                }\r\n\r\n                ctx.lineTo(pc0[0], pc0[1]);\r\n                ctx.fill();\r\n                ctx.closePath();\r\n                ctx.restore();\r\n            };\r\n\r\n            /* Icons */\r\n            this.drawIconMove=function(centerCoords, scale) {\r\n                drawFilledPolygon(shapeArrowN, colors.moveIconFill, centerCoords, scale);\r\n                drawFilledPolygon(shapeArrowW, colors.moveIconFill, centerCoords, scale);\r\n                drawFilledPolygon(shapeArrowS, colors.moveIconFill, centerCoords, scale);\r\n                drawFilledPolygon(shapeArrowE, colors.moveIconFill, centerCoords, scale);\r\n            };\r\n\r\n            this.drawIconResizeCircle=function(centerCoords, circleRadius, scale) {\r\n                var scaledCircleRadius=circleRadius*scale;\r\n\r\n                ctx.save();\r\n                ctx.strokeStyle = colors.resizeCircleStroke;\r\n                ctx.lineWidth = 2;\r\n                ctx.fillStyle = colors.resizeCircleFill;\r\n                ctx.beginPath();\r\n                ctx.arc(centerCoords[0], centerCoords[1], scaledCircleRadius, 0, 2*Math.PI);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n                ctx.restore();\r\n            };\r\n\r\n            this.drawIconResizeBoxBase=function(centerCoords, boxSize, scale) {\r\n                var scaledBoxSize=boxSize*scale;\r\n\r\n                ctx.save();\r\n                ctx.strokeStyle = colors.resizeBoxStroke;\r\n                ctx.lineWidth = 2;\r\n                ctx.fillStyle = colors.resizeBoxFill;\r\n                ctx.fillRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);\r\n                ctx.strokeRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);\r\n                ctx.restore();\r\n            };\r\n            this.drawIconResizeBoxNESW=function(centerCoords, boxSize, scale) {\r\n                this.drawIconResizeBoxBase(centerCoords, boxSize, scale);\r\n                drawFilledPolygon(shapeArrowNE, colors.resizeBoxArrowFill, centerCoords, scale);\r\n                drawFilledPolygon(shapeArrowSW, colors.resizeBoxArrowFill, centerCoords, scale);\r\n            };\r\n            this.drawIconResizeBoxNWSE=function(centerCoords, boxSize, scale) {\r\n                this.drawIconResizeBoxBase(centerCoords, boxSize, scale);\r\n                drawFilledPolygon(shapeArrowNW, colors.resizeBoxArrowFill, centerCoords, scale);\r\n                drawFilledPolygon(shapeArrowSE, colors.resizeBoxArrowFill, centerCoords, scale);\r\n            };\r\n\r\n            /* Crop Area */\r\n            this.drawCropArea=function(image, centerCoords, size, fnDrawClipPath) {\r\n                var xRatio=image.width/ctx.canvas.width,\r\n                    yRatio=image.height/ctx.canvas.height,\r\n                    xLeft=centerCoords[0]-size/2,\r\n                    yTop=centerCoords[1]-size/2;\r\n\r\n                ctx.save();\r\n                ctx.strokeStyle = colors.areaOutline;\r\n                ctx.lineWidth = 2;\r\n                ctx.beginPath();\r\n                fnDrawClipPath(ctx, centerCoords, size);\r\n                ctx.stroke();\r\n                ctx.clip();\r\n\r\n                 // draw part of original image\r\n                if (size > 0) {\r\n                    ctx.drawImage(image, xLeft*xRatio, yTop*yRatio, size*xRatio, size*yRatio, xLeft, yTop, size, size);\r\n                }\r\n\r\n                ctx.beginPath();\r\n                fnDrawClipPath(ctx, centerCoords, size);\r\n                ctx.stroke();\r\n                ctx.clip();\r\n\r\n                ctx.restore();\r\n            };\r\n        };\r\n    }]);\r\n\r\n    /**\r\n     * EXIF service is based on the exif-js library (https://github.com/jseidelin/exif-js)\r\n     */\r\n\r\n    crop.service('cropEXIF', [function() {\r\n        var debug = false;\r\n        var IptcFieldMap = {\r\n            '0x78' : 'caption',\r\n            '0x6E' : 'credit',\r\n            '0x19' : 'keywords',\r\n            '0x37' : 'dateCreated',\r\n            '0x50' : 'byline',\r\n            '0x55' : 'bylineTitle',\r\n            '0x7A' : 'captionWriter',\r\n            '0x69' : 'headline',\r\n            '0x74' : 'copyright',\r\n            '0x0F' : 'category'\r\n        };\r\n\r\n        var ExifTags = this.Tags = {\r\n\r\n          // version tags\r\n            '0x9000' : 'ExifVersion',             // eslint-disable-line no-console. EXIF version\r\n            '0xA000' : 'FlashpixVersion',         // eslint-disable-line no-console. Flashpix format version\r\n\r\n            // colorspace tags\r\n            '0xA001' : 'ColorSpace',              // eslint-disable-line no-console. Color space information tag\r\n\r\n            // image configuration\r\n            '0xA002' : 'PixelXDimension',         // eslint-disable-line no-console. Valid width of meaningful image\r\n            '0xA003' : 'PixelYDimension',         // eslint-disable-line no-console. Valid height of meaningful image\r\n            '0x9101' : 'ComponentsConfiguration', // eslint-disable-line no-console. Information about channels\r\n            '0x9102' : 'CompressedBitsPerPixel',  // eslint-disable-line no-console. Compressed bits per pixel\r\n\r\n            // user information\r\n            '0x927C' : 'MakerNote',               // eslint-disable-line no-console. Any desired information written by the manufacturer\r\n            '0x9286' : 'UserComment',             // eslint-disable-line no-console. Comments by user\r\n\r\n            // related file\r\n            '0xA004' : 'RelatedSoundFile',        // eslint-disable-line no-console. Name of related sound file\r\n\r\n            // date and time\r\n            '0x9003' : 'DateTimeOriginal',        // eslint-disable-line no-console. Date and time when the original image was generated\r\n            '0x9004' : 'DateTimeDigitized',       // eslint-disable-line no-console. Date and time when the image was stored digitally\r\n            '0x9290' : 'SubsecTime',              // eslint-disable-line no-console. Fractions of seconds for DateTime\r\n            '0x9291' : 'SubsecTimeOriginal',      // eslint-disable-line no-console. Fractions of seconds for DateTimeOriginal\r\n            '0x9292' : 'SubsecTimeDigitized',     // eslint-disable-line no-console. Fractions of seconds for DateTimeDigitized\r\n\r\n            // picture-taking conditions\r\n            '0x829A' : 'ExposureTime',            // eslint-disable-line no-console. Exposure time (in seconds)\r\n            '0x829D' : 'FNumber',                 // eslint-disable-line no-console. F number\r\n            '0x8822' : 'ExposureProgram',         // eslint-disable-line no-console. Exposure program\r\n            '0x8824' : 'SpectralSensitivity',     // eslint-disable-line no-console. Spectral sensitivity\r\n            '0x8827' : 'ISOSpeedRatings',         // eslint-disable-line no-console. ISO speed rating\r\n            '0x8828' : 'OECF',                    // eslint-disable-line no-console. Optoelectric conversion factor\r\n            '0x9201' : 'ShutterSpeedValue',       // eslint-disable-line no-console. Shutter speed\r\n            '0x9202' : 'ApertureValue',           // eslint-disable-line no-console. Lens aperture\r\n            '0x9203' : 'BrightnessValue',         // eslint-disable-line no-console. Value of brightness\r\n            '0x9204' : 'ExposureBias',            // eslint-disable-line no-console. Exposure bias\r\n            '0x9205' : 'MaxApertureValue',        // eslint-disable-line no-console. Smallest F number of lens\r\n            '0x9206' : 'SubjectDistance',         // eslint-disable-line no-console. Distance to subject in meters\r\n            '0x9207' : 'MeteringMode',            // eslint-disable-line no-console. Metering mode\r\n            '0x9208' : 'LightSource',             // eslint-disable-line no-console. Kind of light source\r\n            '0x9209' : 'Flash',                   // eslint-disable-line no-console. Flash status\r\n            '0x9214' : 'SubjectArea',             // eslint-disable-line no-console. Location and area of main subject\r\n            '0x920A' : 'FocalLength',             // eslint-disable-line no-console. Focal length of the lens in mm\r\n            '0xA20B' : 'FlashEnergy',             // eslint-disable-line no-console. Strobe energy in BCPS\r\n            '0xA20C' : 'SpatialFrequencyResponse', // eslint-disable-line no-console.\r\n            '0xA20E' : 'FocalPlaneXResolution',   // eslint-disable-line no-console. Number of pixels in width direction per FocalPlaneResolutionUnit\r\n            '0xA20F' : 'FocalPlaneYResolution',   // eslint-disable-line no-console. Number of pixels in height direction per FocalPlaneResolutionUnit\r\n            '0xA210' : 'FocalPlaneResolutionUnit', // eslint-disable-line no-console. Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\r\n            '0xA214' : 'SubjectLocation',         // eslint-disable-line no-console. Location of subject in image\r\n            '0xA215' : 'ExposureIndex',           // eslint-disable-line no-console. Exposure index selected on camera\r\n            '0xA217' : 'SensingMethod',           // eslint-disable-line no-console. Image sensor type\r\n            '0xA300' : 'FileSource',              // eslint-disable-line no-console. Image source (3 == DSC)\r\n            '0xA301' : 'SceneType',               // eslint-disable-line no-console. Scene type (1 == directly photographed)\r\n            '0xA302' : 'CFAPattern',              // eslint-disable-line no-console. Color filter array geometric pattern\r\n            '0xA401' : 'CustomRendered',          // eslint-disable-line no-console. Special processing\r\n            '0xA402' : 'ExposureMode',            // eslint-disable-line no-console. Exposure mode\r\n            '0xA403' : 'WhiteBalance',            // eslint-disable-line no-console. 1 = auto white balance, 2 = manual\r\n            '0xA404' : 'DigitalZoomRation',       // eslint-disable-line no-console. Digital zoom ratio\r\n            '0xA405' : 'FocalLengthIn35mmFilm',   // eslint-disable-line no-console. Equivalent foacl length assuming 35mm film camera (in mm)\r\n            '0xA406' : 'SceneCaptureType',        // eslint-disable-line no-console. Type of scene\r\n            '0xA407' : 'GainControl',             // eslint-disable-line no-console. Degree of overall image gain adjustment\r\n            '0xA408' : 'Contrast',                // eslint-disable-line no-console. Direction of contrast processing applied by camera\r\n            '0xA409' : 'Saturation',              // eslint-disable-line no-console. Direction of saturation processing applied by camera\r\n            '0xA40A' : 'Sharpness',               // eslint-disable-line no-console. Direction of sharpness processing applied by camera\r\n            '0xA40B' : 'DeviceSettingDescription', // eslint-disable-line no-console.\r\n            '0xA40C' : 'SubjectDistanceRange',    // eslint-disable-line no-console. Distance to subject\r\n\r\n            // other tags\r\n            '0xA005' : 'InteroperabilityIFDPointer',\r\n            '0xA420' : 'ImageUniqueID'            // eslint-disable-line no-console. Identifier assigned uniquely to each image\r\n        };\r\n\r\n        var TiffTags = this.TiffTags = {\r\n            '0x0100' : 'ImageWidth',\r\n            '0x0101' : 'ImageHeight',\r\n            '0x8769' : 'ExifIFDPointer',\r\n            '0x8825' : 'GPSInfoIFDPointer',\r\n            '0xA005' : 'InteroperabilityIFDPointer',\r\n            '0x0102' : 'BitsPerSample',\r\n            '0x0103' : 'Compression',\r\n            '0x0106' : 'PhotometricInterpretation',\r\n            '0x0112' : 'Orientation',\r\n            '0x0115' : 'SamplesPerPixel',\r\n            '0x011C' : 'PlanarConfiguration',\r\n            '0x0212' : 'YCbCrSubSampling',\r\n            '0x0213' : 'YCbCrPositioning',\r\n            '0x011A' : 'XResolution',\r\n            '0x011B' : 'YResolution',\r\n            '0x0128' : 'ResolutionUnit',\r\n            '0x0111' : 'StripOffsets',\r\n            '0x0116' : 'RowsPerStrip',\r\n            '0x0117' : 'StripByteCounts',\r\n            '0x0201' : 'JPEGInterchangeFormat',\r\n            '0x0202' : 'JPEGInterchangeFormatLength',\r\n            '0x012D' : 'TransferFunction',\r\n            '0x013E' : 'WhitePoint',\r\n            '0x013F' : 'PrimaryChromaticities',\r\n            '0x0211' : 'YCbCrCoefficients',\r\n            '0x0214' : 'ReferenceBlackWhite',\r\n            '0x0132' : 'DateTime',\r\n            '0x010E' : 'ImageDescription',\r\n            '0x010F' : 'Make',\r\n            '0x0110' : 'Model',\r\n            '0x0131' : 'Software',\r\n            '0x013B' : 'Artist',\r\n            '0x8298' : 'Copyright'\r\n        };\r\n\r\n        var GPSTags = this.GPSTags = {\r\n            '0x0000' : 'GPSVersionID',\r\n            '0x0001' : 'GPSLatitudeRef',\r\n            '0x0002' : 'GPSLatitude',\r\n            '0x0003' : 'GPSLongitudeRef',\r\n            '0x0004' : 'GPSLongitude',\r\n            '0x0005' : 'GPSAltitudeRef',\r\n            '0x0006' : 'GPSAltitude',\r\n            '0x0007' : 'GPSTimeStamp',\r\n            '0x0008' : 'GPSSatellites',\r\n            '0x0009' : 'GPSStatus',\r\n            '0x000A' : 'GPSMeasureMode',\r\n            '0x000B' : 'GPSDOP',\r\n            '0x000C' : 'GPSSpeedRef',\r\n            '0x000D' : 'GPSSpeed',\r\n            '0x000E' : 'GPSTrackRef',\r\n            '0x000F' : 'GPSTrack',\r\n            '0x0010' : 'GPSImgDirectionRef',\r\n            '0x0011' : 'GPSImgDirection',\r\n            '0x0012' : 'GPSMapDatum',\r\n            '0x0013' : 'GPSDestLatitudeRef',\r\n            '0x0014' : 'GPSDestLatitude',\r\n            '0x0015' : 'GPSDestLongitudeRef',\r\n            '0x0016' : 'GPSDestLongitude',\r\n            '0x0017' : 'GPSDestBearingRef',\r\n            '0x0018' : 'GPSDestBearing',\r\n            '0x0019' : 'GPSDestDistanceRef',\r\n            '0x001A' : 'GPSDestDistance',\r\n            '0x001B' : 'GPSProcessingMethod',\r\n            '0x001C' : 'GPSAreaInformation',\r\n            '0x001D' : 'GPSDateStamp',\r\n            '0x001E' : 'GPSDifferential'\r\n        };\r\n\r\n        var StringValues = this.StringValues = {\r\n            'ExposureProgram' : {\r\n                '0' : 'Not defined',\r\n                '1' : 'Manual',\r\n                '2' : 'Normal program',\r\n                '3' : 'Aperture priority',\r\n                '4' : 'Shutter priority',\r\n                '5' : 'Creative program',\r\n                '6' : 'Action program',\r\n                '7' : 'Portrait mode',\r\n                '8' : 'Landscape mode'\r\n            },\r\n            'MeteringMode' : {\r\n                '0' : 'Unknown',\r\n                '1' : 'Average',\r\n                '2' : 'CenterWeightedAverage',\r\n                '3' : 'Spot',\r\n                '4' : 'MultiSpot',\r\n                '5' : 'Pattern',\r\n                '6' : 'Partial',\r\n                '255' : 'Other'\r\n            },\r\n            'LightSource' : {\r\n                '0' : 'Unknown',\r\n                '1' : 'Daylight',\r\n                '2' : 'Fluorescent',\r\n                '3' : 'Tungsten (incandescent light)',\r\n                '4' : 'Flash',\r\n                '9' : 'Fine weather',\r\n                '10' : 'Cloudy weather',\r\n                '11' : 'Shade',\r\n                '12' : 'Daylight fluorescent (D 5700 - 7100K)',\r\n                '13' : 'Day white fluorescent (N 4600 - 5400K)',\r\n                '14' : 'Cool white fluorescent (W 3900 - 4500K)',\r\n                '15' : 'White fluorescent (WW 3200 - 3700K)',\r\n                '17' : 'Standard light A',\r\n                '18' : 'Standard light B',\r\n                '19' : 'Standard light C',\r\n                '20' : 'D55',\r\n                '21' : 'D65',\r\n                '22' : 'D75',\r\n                '23' : 'D50',\r\n                '24' : 'ISO studio tungsten',\r\n                '255' : 'Other'\r\n            },\r\n            'Flash' : {\r\n                '0x0000' : 'Flash did not fire',\r\n                '0x0001' : 'Flash fired',\r\n                '0x0005' : 'Strobe return light not detected',\r\n                '0x0007' : 'Strobe return light detected',\r\n                '0x0009' : 'Flash fired, compulsory flash mode',\r\n                '0x000D' : 'Flash fired, compulsory flash mode, return light not detected',\r\n                '0x000F' : 'Flash fired, compulsory flash mode, return light detected',\r\n                '0x0010' : 'Flash did not fire, compulsory flash mode',\r\n                '0x0018' : 'Flash did not fire, auto mode',\r\n                '0x0019' : 'Flash fired, auto mode',\r\n                '0x001D' : 'Flash fired, auto mode, return light not detected',\r\n                '0x001F' : 'Flash fired, auto mode, return light detected',\r\n                '0x0020' : 'No flash function',\r\n                '0x0041' : 'Flash fired, red-eye reduction mode',\r\n                '0x0045' : 'Flash fired, red-eye reduction mode, return light not detected',\r\n                '0x0047' : 'Flash fired, red-eye reduction mode, return light detected',\r\n                '0x0049' : 'Flash fired, compulsory flash mode, red-eye reduction mode',\r\n                '0x004D' : 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected',\r\n                '0x004F' : 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected',\r\n                '0x0059' : 'Flash fired, auto mode, red-eye reduction mode',\r\n                '0x005D' : 'Flash fired, auto mode, return light not detected, red-eye reduction mode',\r\n                '0x005F' : 'Flash fired, auto mode, return light detected, red-eye reduction mode'\r\n            },\r\n            'SensingMethod' : {\r\n                '1' : 'Not defined',\r\n                '2' : 'One-chip color area sensor',\r\n                '3' : 'Two-chip color area sensor',\r\n                '4' : 'Three-chip color area sensor',\r\n                '5' : 'Color sequential area sensor',\r\n                '7' : 'Trilinear sensor',\r\n                '8' : 'Color sequential linear sensor'\r\n            },\r\n            'SceneCaptureType' : {\r\n                '0' : 'Standard',\r\n                '1' : 'Landscape',\r\n                '2' : 'Portrait',\r\n                '3' : 'Night scene'\r\n            },\r\n            'SceneType' : {\r\n                '1' : 'Directly photographed'\r\n            },\r\n            'CustomRendered' : {\r\n                '0' : 'Normal process',\r\n                '1' : 'Custom process'\r\n            },\r\n            'WhiteBalance' : {\r\n                '0' : 'Auto white balance',\r\n                '1' : 'Manual white balance'\r\n            },\r\n            'GainControl' : {\r\n                '0' : 'None',\r\n                '1' : 'Low gain up',\r\n                '2' : 'High gain up',\r\n                '3' : 'Low gain down',\r\n                '4' : 'High gain down'\r\n            },\r\n            'Contrast' : {\r\n                '0' : 'Normal',\r\n                '1' : 'Soft',\r\n                '2' : 'Hard'\r\n            },\r\n            'Saturation' : {\r\n                '0' : 'Normal',\r\n                '1' : 'Low saturation',\r\n                '2' : 'High saturation'\r\n            },\r\n            'Sharpness' : {\r\n                '0' : 'Normal',\r\n                '1' : 'Soft',\r\n                '2' : 'Hard'\r\n            },\r\n            'SubjectDistanceRange' : {\r\n                '0' : 'Unknown',\r\n                '1' : 'Macro',\r\n                '2' : 'Close view',\r\n                '3' : 'Distant view'\r\n            },\r\n            'FileSource' : {\r\n                '3' : 'DSC'\r\n            },\r\n            'Components' : {\r\n                '0' : '',\r\n                '1' : 'Y',\r\n                '2' : 'Cb',\r\n                '3' : 'Cr',\r\n                '4' : 'R',\r\n                '5' : 'G',\r\n                '6' : 'B'\r\n            }\r\n        };\r\n\r\n        function imageHasData(img) {\r\n            return !!img.exifdata;\r\n        }\r\n\r\n        function base64ToArrayBuffer(base64, contentType) {\r\n\r\n            /* global atob */\r\n            var binary, len, buffer, view, i;\r\n\r\n            contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // eslint-disable-line no-console. e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\r\n            base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\r\n            binary = atob(base64);\r\n            len = binary.length;\r\n            buffer = new ArrayBuffer(len);\r\n            view = new Uint8Array(buffer);\r\n            for (i = 0; i < len; i++) {\r\n                view[i] = binary.charCodeAt(i);\r\n            }\r\n            return buffer;\r\n        }\r\n\r\n        function objectURLToBlob(url, callback) {\r\n            var http = new XMLHttpRequest();\r\n\r\n            http.open('GET', url, true);\r\n            http.responseType = 'blob';\r\n            http.onload = function() {\r\n                if (this.status === 200 || this.status === 0) {\r\n                    callback(this.response);\r\n                }\r\n            };\r\n            http.send();\r\n        }\r\n\r\n        function getStringFromDB(buffer, start, length) {\r\n            var outstr = '', n;\r\n\r\n            for (n = start; n < start+length; n++) {\r\n                outstr += String.fromCharCode(buffer.getUint8(n));\r\n            }\r\n            return outstr;\r\n        }\r\n\r\n        function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\r\n            var type = file.getUint16(entryOffset+2, !bigEnd),\r\n                numValues = file.getUint32(entryOffset+4, !bigEnd),\r\n                valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\r\n                offset,\r\n                vals, val, n,\r\n                numerator, denominator;\r\n\r\n            switch (type) {\r\n            case 1: // eslint-disable-line no-console. byte, 8-bit unsigned int\r\n            case 7: // eslint-disable-line no-console. undefined, 8-bit byte, value depending on field\r\n                if (numValues === 1) {\r\n                    return file.getUint8(entryOffset + 8, !bigEnd);\r\n                } else {\r\n                    offset = numValues > 4 ? valueOffset : entryOffset + 8;\r\n                    vals = [];\r\n                    for (n=0; n<numValues; n++) {\r\n                        vals[n] = file.getUint8(offset + n);\r\n                    }\r\n                    return vals;\r\n                }\r\n\r\n            case 2: // eslint-disable-line no-console. ascii, 8-bit byte\r\n                offset = numValues > 4 ? valueOffset : entryOffset + 8;\r\n                return getStringFromDB(file, offset, numValues-1);\r\n\r\n            case 3: // eslint-disable-line no-console. short, 16 bit int\r\n                if (numValues === 1) {\r\n                    return file.getUint16(entryOffset + 8, !bigEnd);\r\n                } else {\r\n                    offset = numValues > 2 ? valueOffset : entryOffset + 8;\r\n                    vals = [];\r\n                    for (n=0; n<numValues; n++) {\r\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\r\n                    }\r\n                    return vals;\r\n                }\r\n\r\n            case 4: // eslint-disable-line no-console. long, 32 bit int\r\n                if (numValues === 1) {\r\n                    return file.getUint32(entryOffset + 8, !bigEnd);\r\n                } else {\r\n                    vals = [];\r\n                    for (n=0; n<numValues; n++) {\r\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\r\n                    }\r\n                    return vals;\r\n                }\r\n\r\n            case 5:    // eslint-disable-line no-console. rational = two long values, first is numerator, second is denominator\r\n                if (numValues === 1) {\r\n                    numerator = file.getUint32(valueOffset, !bigEnd);\r\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\r\n                    val = numerator / denominator;\r\n                    val.numerator = numerator;\r\n                    val.denominator = denominator;\r\n                    return val;\r\n                } else {\r\n                    vals = [];\r\n                    for (n=0; n<numValues; n++) {\r\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\r\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\r\n                        vals[n] = numerator / denominator;\r\n                        vals[n].numerator = numerator;\r\n                        vals[n].denominator = denominator;\r\n                    }\r\n                    return vals;\r\n                }\r\n\r\n            case 9: // eslint-disable-line no-console. slong, 32 bit signed int\r\n                if (numValues === 1) {\r\n                    return file.getInt32(entryOffset + 8, !bigEnd);\r\n                } else {\r\n                    vals = [];\r\n                    for (n=0; n<numValues; n++) {\r\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\r\n                    }\r\n                    return vals;\r\n                }\r\n\r\n            case 10: // eslint-disable-line no-console. signed rational, two slongs, first is numerator, second is denominator\r\n                if (numValues === 1) {\r\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\r\n                } else {\r\n                    vals = [];\r\n                    for (n=0; n<numValues; n++) {\r\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\r\n                    }\r\n                    return vals;\r\n                }\r\n            }\r\n        }\r\n\r\n        function readTags(file, tiffStart, dirStart, strings, bigEnd) {\r\n            var entries = file.getUint16(dirStart, !bigEnd),\r\n                tags = {},\r\n                entryOffset, tag,\r\n                i;\r\n\r\n            for (i=0; i<entries; i += 1) {\r\n                entryOffset = dirStart + i*12 + 2;\r\n                tag = strings[file.getUint16(entryOffset, !bigEnd)];\r\n                if (!tag && debug) console.log('Unknown tag: ' + file.getUint16(entryOffset, !bigEnd)); // eslint-disable-line no-console\r\n                tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\r\n            }\r\n            return tags;\r\n        }\r\n\r\n        function readEXIFData(file, start) {\r\n            var bigEnd,\r\n                tags, tag,\r\n                exifData, gpsData,\r\n                tiffOffset, firstIFDOffset;\r\n\r\n            if (getStringFromDB(file, start, 4) !== 'Exif') {\r\n                if (debug) console.log('Not valid EXIF data! ' + getStringFromDB(file, start, 4)); // eslint-disable-line no-console\r\n                return false;\r\n            }\r\n            tiffOffset = start + 6;\r\n\r\n            // test for TIFF validity and endianness\r\n            if (file.getUint16(tiffOffset) === 0x4949) {\r\n                bigEnd = false;\r\n            } else if (file.getUint16(tiffOffset) === 0x4D4D) {\r\n                bigEnd = true;\r\n            } else {\r\n                if (debug) console.log('Not valid TIFF data! (no 0x4949 or 0x4D4D)'); // eslint-disable-line no-console\r\n                return false;\r\n            }\r\n\r\n            if (file.getUint16(tiffOffset+2, !bigEnd) !== 0x002A) {\r\n                if (debug) console.log('Not valid TIFF data! (no 0x002A)'); // eslint-disable-line no-console\r\n                return false;\r\n            }\r\n\r\n            firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\r\n\r\n            if (firstIFDOffset < 0x00000008) {\r\n                if (debug) console.log('Not valid TIFF data! (First offset less than 8)', file.getUint32(tiffOffset+4, !bigEnd)); // eslint-disable-line no-console\r\n                return false;\r\n            }\r\n\r\n            tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\r\n\r\n            if (tags.ExifIFDPointer) {\r\n                exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\r\n                for (tag in exifData) {\r\n                    switch (tag) {\r\n                    case 'LightSource' :\r\n                    case 'Flash' :\r\n                    case 'MeteringMode' :\r\n                    case 'ExposureProgram' :\r\n                    case 'SensingMethod' :\r\n                    case 'SceneCaptureType' :\r\n                    case 'SceneType' :\r\n                    case 'CustomRendered' :\r\n                    case 'WhiteBalance' :\r\n                    case 'GainControl' :\r\n                    case 'Contrast' :\r\n                    case 'Saturation' :\r\n                    case 'Sharpness' :\r\n                    case 'SubjectDistanceRange' :\r\n                    case 'FileSource' :\r\n                        exifData[tag] = StringValues[tag][exifData[tag]];\r\n                        break;\r\n\r\n                    case 'ExifVersion' :\r\n                    case 'FlashpixVersion' :\r\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\r\n                        break;\r\n\r\n                    case 'ComponentsConfiguration' :\r\n                        exifData[tag] =\r\n                          StringValues.Components[exifData[tag][0]] +\r\n                          StringValues.Components[exifData[tag][1]] +\r\n                          StringValues.Components[exifData[tag][2]] +\r\n                          StringValues.Components[exifData[tag][3]];\r\n                        break;\r\n                    }\r\n                    tags[tag] = exifData[tag];\r\n                }\r\n            }\r\n\r\n            if (tags.GPSInfoIFDPointer) {\r\n                gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\r\n                for (tag in gpsData) {\r\n                    switch (tag) {\r\n                    case 'GPSVersionID' :\r\n                        gpsData[tag] = gpsData[tag][0] +\r\n                            '.' + gpsData[tag][1] +\r\n                            '.' + gpsData[tag][2] +\r\n                            '.' + gpsData[tag][3];\r\n                        break;\r\n                    }\r\n                    tags[tag] = gpsData[tag];\r\n                }\r\n            }\r\n\r\n            return tags;\r\n        }\r\n\r\n        function findEXIFinJPEG(file) {\r\n            var dataView = new DataView(file), offset = 2, length, marker;\r\n\r\n            if (debug) console.log('Got file of length ' + file.byteLength); // eslint-disable-line no-console\r\n            if (dataView.getUint8(0) !== 0xFF || dataView.getUint8(1) !== 0xD8) {\r\n                if (debug) console.log('Not a valid JPEG'); // eslint-disable-line no-console\r\n                return false; // eslint-disable-line no-console. not a valid jpeg\r\n            }\r\n\r\n            length = file.byteLength;\r\n\r\n            while (offset < length) {\r\n                if (dataView.getUint8(offset) !== 0xFF) {\r\n                    if (debug) console.log('Not a valid marker at offset ' + offset + ', found: ' + dataView.getUint8(offset)); // eslint-disable-line no-console\r\n                    return false; // eslint-disable-line no-console. not a valid marker, something is wrong\r\n                }\r\n\r\n                marker = dataView.getUint8(offset + 1);\r\n                if (debug) console.log(marker); // eslint-disable-line no-console\r\n\r\n              // eslint-disable-line no-console. we could implement handling for other markers here,\r\n              // eslint-disable-line no-console. but we're only looking for 0xFFE1 for EXIF data\r\n\r\n                if (marker === 225) {\r\n                    if (debug) console.log('Found 0xFFE1 marker'); // eslint-disable-line no-console\r\n\r\n                    return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\r\n\r\n              // eslint-disable-line no-console. offset += 2 + file.getShortAt(offset+2, true);\r\n\r\n                } else {\r\n                    offset += 2 + dataView.getUint16(offset+2);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function readIPTCData(file, startOffset, sectionLength) {\r\n            var dataView = new DataView(file);\r\n            var data = {};\r\n            var fieldValue, fieldName, dataSize, segmentType;\r\n            var segmentStartPos = startOffset;\r\n\r\n            while (segmentStartPos < startOffset+sectionLength) {\r\n                if (dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02) {\r\n                    segmentType = dataView.getUint8(segmentStartPos+2);\r\n                    if (segmentType in IptcFieldMap) {\r\n                        dataSize = dataView.getInt16(segmentStartPos+3);\r\n                        fieldName = IptcFieldMap[segmentType];\r\n                        fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\r\n                        // Check if we already stored a value with this name\r\n                        if (data.hasOwnProperty(fieldName)) {\r\n                            // Value already stored with this name, create multivalue field\r\n                            if (data[fieldName] instanceof Array) {\r\n                                data[fieldName].push(fieldValue);\r\n                            }\r\n                            else {\r\n                                data[fieldName] = [data[fieldName], fieldValue];\r\n                            }\r\n                        }\r\n                        else {\r\n                            data[fieldName] = fieldValue;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                segmentStartPos++;\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function findIPTCinJPEG(file) {\r\n            var dataView = new DataView(file), offset = 2, length, isFieldSegmentStart, nameHeaderLength, startOffset, sectionLength;\r\n\r\n            if (debug) console.log('Got file of length ' + file.byteLength); // eslint-disable-line no-console\r\n            if (dataView.getUint8(0) !== 0xFF || dataView.getUint8(1) !== 0xD8) {\r\n                if (debug) console.log('Not a valid JPEG'); // eslint-disable-line no-console\r\n                return false; // eslint-disable-line no-console. not a valid jpeg\r\n            }\r\n            length = file.byteLength;\r\n\r\n            isFieldSegmentStart = function(dataView, offset) {\r\n                return (\r\n                  dataView.getUint8(offset) === 0x38 &&\r\n                  dataView.getUint8(offset+1) === 0x42 &&\r\n                  dataView.getUint8(offset+2) === 0x49 &&\r\n                  dataView.getUint8(offset+3) === 0x4D &&\r\n                  dataView.getUint8(offset+4) === 0x04 &&\r\n                  dataView.getUint8(offset+5) === 0x04\r\n                );\r\n            };\r\n\r\n            while (offset < length) {\r\n\r\n                if ( isFieldSegmentStart(dataView, offset )) {\r\n\r\n                    // Get the length of the name header (which is padded to an even number of bytes)\r\n                    nameHeaderLength = dataView.getUint8(offset+7);\r\n                    if (nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\r\n                    // Check for pre photoshop 6 format\r\n                    if (nameHeaderLength === 0) {\r\n                        // Always 4\r\n                        nameHeaderLength = 4;\r\n                    }\r\n\r\n                    startOffset = offset + 8 + nameHeaderLength;\r\n                    sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\r\n\r\n                    return readIPTCData(file, startOffset, sectionLength);\r\n\r\n                }\r\n\r\n                // Not the marker, continue searching\r\n                offset++;\r\n\r\n            }\r\n        }\r\n\r\n        function getImageData(img, callback) {\r\n            var http, arrayBuffer, fileReader;\r\n\r\n            function handleBinaryFile(binFile) {\r\n\r\n                /* global  FileReader, XMLHttpRequest */\r\n                var data = findEXIFinJPEG(binFile), iptcdata = findIPTCinJPEG(binFile);\r\n\r\n                img.exifdata = data || {};\r\n                img.iptcdata = iptcdata || {};\r\n                if (callback) {\r\n                    callback.call(img);\r\n                }\r\n            }\r\n\r\n            if (img.src) {\r\n                if (/^data\\:/i.test(img.src)) {\r\n                    arrayBuffer = base64ToArrayBuffer(img.src);\r\n\r\n                    handleBinaryFile(arrayBuffer);\r\n\r\n                } else if (/^blob\\:/i.test(img.src)) {\r\n                    fileReader = new FileReader();\r\n\r\n                    fileReader.onload = function(e) {\r\n                        handleBinaryFile(e.target.result);\r\n                    };\r\n                    objectURLToBlob(img.src, function (blob) {\r\n                        fileReader.readAsArrayBuffer(blob);\r\n                    });\r\n                } else {\r\n                    http = new XMLHttpRequest();\r\n\r\n                    http.onload = function() {\r\n                        if (this.status === 200 || this.status === 0) {\r\n                            handleBinaryFile(http.response);\r\n                        } else {\r\n                            throw new Error('Could not load image');\r\n                        }\r\n                        http = null;\r\n                    };\r\n                    http.open('GET', img.src, true);\r\n                    http.responseType = 'arraybuffer';\r\n                    http.send(null);\r\n                }\r\n            } else if (window.FileReader && (img instanceof window.Blob || img instanceof window.File)) {\r\n                fileReader = new FileReader();\r\n\r\n                fileReader.onload = function(e) {\r\n                    if (debug) console.log('Got file of length ' + e.target.result.byteLength); // eslint-disable-line no-console\r\n                    handleBinaryFile(e.target.result);\r\n                };\r\n\r\n                fileReader.readAsArrayBuffer(img);\r\n            }\r\n        }\r\n\r\n        this.getData = function(img, callback) {\r\n\r\n            /* global HTMLImageElement */\r\n            if ((img instanceof Image || img instanceof HTMLImageElement) && !img.complete) return false;\r\n\r\n            if (!imageHasData(img)) {\r\n                getImageData(img, callback);\r\n            } else if (callback) {\r\n                callback.call(img);\r\n            }\r\n            return true;\r\n        };\r\n\r\n        this.getTag = function(img, tag) {\r\n            if (!imageHasData(img)) return;\r\n            return img.exifdata[tag];\r\n        };\r\n\r\n        this.getAllTags = function(img) {\r\n            var a,\r\n                data = img.exifdata,\r\n                tags = {};\r\n\r\n            if (!imageHasData(img)) return {};\r\n\r\n            for (a in data) {\r\n                if (data.hasOwnProperty(a)) {\r\n                    tags[a] = data[a];\r\n                }\r\n            }\r\n            return tags;\r\n        };\r\n\r\n        this.pretty = function(img) {\r\n            var a,\r\n                data = img.exifdata,\r\n                strPretty = '';\r\n\r\n            if (!imageHasData(img)) return '';\r\n            for (a in data) {\r\n                if (data.hasOwnProperty(a)) {\r\n                    if (typeof data[a] === 'object') {\r\n                        if (data[a] instanceof Number) {\r\n                            strPretty += a + ' : ' + data[a] + ' [' + data[a].numerator + '/' + data[a].denominator + ']\\r\\n';\r\n                        } else {\r\n                            strPretty += a + ' : [' + data[a].length + ' values]\\r\\n';\r\n                        }\r\n                    } else {\r\n                        strPretty += a + ' : ' + data[a] + '\\r\\n';\r\n                    }\r\n                }\r\n            }\r\n            return strPretty;\r\n        };\r\n\r\n        this.readFromBinaryFile = function(file) {\r\n            return findEXIFinJPEG(file);\r\n        };\r\n    }]);\r\n\r\n    crop.factory('cropHost', ['$document', 'cropAreaCircle', 'cropAreaSquare', 'cropEXIF', function($document, CropAreaCircle, CropAreaSquare, cropEXIF) {\r\n\r\n    /* STATIC FUNCTIONS */\r\n\r\n  // Get Element's Offset\r\n        var getElementOffset=function(elem) {\r\n            var box = elem.getBoundingClientRect();\r\n\r\n            var body = document.body;\r\n            var docElem = document.documentElement;\r\n\r\n            var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\r\n            var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\r\n\r\n            var clientTop = docElem.clientTop || body.clientTop || 0;\r\n            var clientLeft = docElem.clientLeft || body.clientLeft || 0;\r\n\r\n            var top  = box.top +  scrollTop - clientTop;\r\n            var left = box.left + scrollLeft - clientLeft;\r\n\r\n            return { 'top': Math.round(top), 'left': Math.round(left) };\r\n        };\r\n\r\n        return function(elCanvas, opts, events) {\r\n\r\n        /* PRIVATE VARIABLES */\r\n\r\n            // Object Pointers\r\n            var ctx=null,\r\n                image=null,\r\n                theArea=null;\r\n\r\n            // Dimensions\r\n            var minCanvasDims=[300, 300],\r\n                maxCanvasDims=[800, 800];\r\n\r\n            // Result Image size\r\n            var resImgSize=200;\r\n\r\n            // Result Image type\r\n            var resImgFormat='image/png';\r\n\r\n            // Result Image quality\r\n            var resImgQuality=null;\r\n\r\n            var resetCropHost;\r\n            var getChangedTouches;\r\n            var onMouseMove;\r\n            var onMouseDown;\r\n            var onMouseUp;\r\n\r\n            /* PRIVATE FUNCTIONS */\r\n\r\n            // Draw Scene\r\n            function drawScene() {\r\n                // clear canvas\r\n                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n                if (image!==null) {\r\n                // draw source image\r\n                    ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);\r\n                    ctx.save();\r\n                    // and make it darker\r\n                    ctx.fillStyle = 'rgba(0, 0, 0, 0.65)';\r\n                    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n                    ctx.restore();\r\n                    // draw Area\r\n                    theArea.draw();\r\n                }\r\n            }\r\n\r\n                // Resets CropHost\r\n            resetCropHost=function() {\r\n                var imageDims, imageRatio, canvasDims;\r\n\r\n                if (image!==null) {\r\n                    theArea.setImage(image);\r\n                    imageDims=[image.width, image.height];\r\n                    imageRatio=image.width/image.height;\r\n                    canvasDims=imageDims;\r\n\r\n                    if (canvasDims[0]>maxCanvasDims[0]) {\r\n                        canvasDims[0]=maxCanvasDims[0];\r\n                        canvasDims[1]=canvasDims[0]/imageRatio;\r\n                    } else if (canvasDims[0]<minCanvasDims[0]) {\r\n                        canvasDims[0]=minCanvasDims[0];\r\n                        canvasDims[1]=canvasDims[0]/imageRatio;\r\n                    }\r\n                    if (canvasDims[1]>maxCanvasDims[1]) {\r\n                        canvasDims[1]=maxCanvasDims[1];\r\n                        canvasDims[0]=canvasDims[1]*imageRatio;\r\n                    } else if (canvasDims[1]<minCanvasDims[1]) {\r\n                        canvasDims[1]=minCanvasDims[1];\r\n                        canvasDims[0]=canvasDims[1]*imageRatio;\r\n                    }\r\n                    elCanvas.prop('width', canvasDims[0]).prop('height', canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});\r\n\r\n                    theArea.setX(ctx.canvas.width/2);\r\n                    theArea.setY(ctx.canvas.height/2);\r\n                    theArea.setSize(Math.min(200, ctx.canvas.width/2, ctx.canvas.height/2));\r\n                } else {\r\n                    elCanvas.prop('width', 0).prop('height', 0).css({'margin-top': 0});\r\n                }\r\n\r\n                drawScene();\r\n            };\r\n\r\n    /*\r\n     * Returns event.changedTouches directly if event is a TouchEvent.\r\n     * If event is a jQuery event, return changedTouches of event.originalEvent\r\n     */\r\n            getChangedTouches=function(event) {\r\n                if (angular.isDefined(event.changedTouches)) {\r\n                    return event.changedTouches;\r\n                } else {\r\n                    return event.originalEvent.changedTouches;\r\n                }\r\n            };\r\n\r\n            onMouseMove=function(e) {\r\n                var offset, pageX, pageY;\r\n\r\n                if (image!==null) {\r\n                    offset=getElementOffset(ctx.canvas);\r\n                    if (e.type === 'touchmove') {\r\n                        pageX=getChangedTouches(e)[0].pageX;\r\n                        pageY=getChangedTouches(e)[0].pageY;\r\n                    } else {\r\n                        pageX=e.pageX;\r\n                        pageY=e.pageY;\r\n                    }\r\n                    theArea.processMouseMove(pageX-offset.left, pageY-offset.top);\r\n                    drawScene();\r\n                }\r\n            };\r\n\r\n            onMouseDown=function(e) {\r\n                var offset,\r\n                    pageX, pageY;\r\n\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (image!==null) {\r\n                    offset=getElementOffset(ctx.canvas);\r\n                    if (e.type === 'touchstart') {\r\n                        pageX=getChangedTouches(e)[0].pageX;\r\n                        pageY=getChangedTouches(e)[0].pageY;\r\n                    } else {\r\n                        pageX=e.pageX;\r\n                        pageY=e.pageY;\r\n                    }\r\n                    theArea.processMouseDown(pageX-offset.left, pageY-offset.top);\r\n                    drawScene();\r\n                }\r\n            };\r\n\r\n            onMouseUp=function(e) {\r\n                var offset, pageX, pageY;\r\n\r\n                if (image!==null) {\r\n                    offset=getElementOffset(ctx.canvas);\r\n                    if (e.type === 'touchend') {\r\n                        pageX=getChangedTouches(e)[0].pageX;\r\n                        pageY=getChangedTouches(e)[0].pageY;\r\n                    } else {\r\n                        pageX=e.pageX;\r\n                        pageY=e.pageY;\r\n                    }\r\n                    theArea.processMouseUp(pageX-offset.left, pageY-offset.top);\r\n                    drawScene();\r\n                }\r\n            };\r\n\r\n            this.getResultImageDataURI=function() {\r\n                var temp_ctx, temp_canvas;\r\n\r\n                temp_canvas = angular.element('<canvas></canvas>')[0];\r\n                temp_ctx = temp_canvas.getContext('2d');\r\n                temp_canvas.width = resImgSize;\r\n                temp_canvas.height = resImgSize;\r\n                if (image!==null) {\r\n                    temp_ctx.drawImage(image, (theArea.getX()-theArea.getSize()/2)*(image.width/ctx.canvas.width), (theArea.getY()-theArea.getSize()/2)*(image.height/ctx.canvas.height), theArea.getSize()*(image.width/ctx.canvas.width), theArea.getSize()*(image.height/ctx.canvas.height), 0, 0, resImgSize, resImgSize);\r\n                }\r\n                if (resImgQuality!==null ) {\r\n                    return temp_canvas.toDataURL(resImgFormat, resImgQuality);\r\n                }\r\n                return temp_canvas.toDataURL(resImgFormat);\r\n            };\r\n\r\n            this.setNewImageSource=function(imageSource) {\r\n                var newImage;\r\n\r\n                image=null;\r\n                resetCropHost();\r\n                events.trigger('image-updated');\r\n                if (!!imageSource) {\r\n                    newImage = new Image();\r\n                    if (imageSource.substring(0, 4).toLowerCase()==='http') {\r\n                        newImage.crossOrigin = 'anonymous';\r\n                    }\r\n                    newImage.onload = function() {\r\n                        events.trigger('load-done');\r\n\r\n                        cropEXIF.getData(newImage, function() {\r\n                            var orientation=cropEXIF.getTag(newImage, 'Orientation'), canvas, ctx, cw, ch, cx, deg, cy;\r\n\r\n                            if ([3, 6, 8].indexOf(orientation)>-1) {\r\n                                canvas = document.createElement('canvas');\r\n                                ctx=canvas.getContext('2d');\r\n                                cw = newImage.width;\r\n                                ch = newImage.height;\r\n                                cx = 0;\r\n                                cy = 0;\r\n                                deg=0;\r\n                                switch (orientation) {\r\n                                case 3:\r\n                                    cx=-newImage.width;\r\n                                    cy=-newImage.height;\r\n                                    deg=180;\r\n                                    break;\r\n                                case 6:\r\n                                    cw = newImage.height;\r\n                                    ch = newImage.width;\r\n                                    cy=-newImage.height;\r\n                                    deg=90;\r\n                                    break;\r\n                                case 8:\r\n                                    cw = newImage.height;\r\n                                    ch = newImage.width;\r\n                                    cx=-newImage.width;\r\n                                    deg=270;\r\n                                    break;\r\n                                }\r\n\r\n                                canvas.width = cw;\r\n                                canvas.height = ch;\r\n                                ctx.rotate(deg*Math.PI/180);\r\n                                ctx.drawImage(newImage, cx, cy);\r\n\r\n                                image=new Image();\r\n                                image.src = canvas.toDataURL('image/png');\r\n                            } else {\r\n                                image=newImage;\r\n                            }\r\n                            resetCropHost();\r\n                            events.trigger('image-updated');\r\n                        });\r\n                    };\r\n                    newImage.onerror=function() {\r\n                        events.trigger('load-error');\r\n                    };\r\n                    events.trigger('load-start');\r\n                    newImage.src=imageSource;\r\n                }\r\n            };\r\n\r\n            this.setMaxDimensions=function(width, height) {\r\n                var curWidth, curHeight, imageDims, imageRatio, canvasDims, ratioNewCurWidth, ratioNewCurHeight, ratioMin;\r\n\r\n                maxCanvasDims=[width, height];\r\n\r\n                if (image!==null) {\r\n                    curWidth=ctx.canvas.width;\r\n                    curHeight=ctx.canvas.height;\r\n                    imageDims=[image.width, image.height];\r\n                    imageRatio=image.width/image.height;\r\n                    canvasDims=imageDims;\r\n\r\n                    if (canvasDims[0]>maxCanvasDims[0]) {\r\n                        canvasDims[0]=maxCanvasDims[0];\r\n                        canvasDims[1]=canvasDims[0]/imageRatio;\r\n                    } else if (canvasDims[0]<minCanvasDims[0]) {\r\n                        canvasDims[0]=minCanvasDims[0];\r\n                        canvasDims[1]=canvasDims[0]/imageRatio;\r\n                    }\r\n                    if (canvasDims[1]>maxCanvasDims[1]) {\r\n                        canvasDims[1]=maxCanvasDims[1];\r\n                        canvasDims[0]=canvasDims[1]*imageRatio;\r\n                    } else if (canvasDims[1]<minCanvasDims[1]) {\r\n                        canvasDims[1]=minCanvasDims[1];\r\n                        canvasDims[0]=canvasDims[1]*imageRatio;\r\n                    }\r\n                    elCanvas.prop('width', canvasDims[0]).prop('height', canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});\r\n\r\n                    ratioNewCurWidth=ctx.canvas.width/curWidth;\r\n                    ratioNewCurHeight=ctx.canvas.height/curHeight;\r\n                    ratioMin=Math.min(ratioNewCurWidth, ratioNewCurHeight);\r\n\r\n                    theArea.setX(theArea.getX()*ratioNewCurWidth);\r\n                    theArea.setY(theArea.getY()*ratioNewCurHeight);\r\n                    theArea.setSize(theArea.getSize()*ratioMin);\r\n                } else {\r\n                    elCanvas.prop('width', 0).prop('height', 0).css({'margin-top': 0});\r\n                }\r\n                drawScene();\r\n            };\r\n\r\n            this.setAreaMinSize=function(size) {\r\n                size=parseInt(size, 10);\r\n                if (!isNaN(size)) {\r\n                    theArea.setMinSize(size);\r\n                    drawScene();\r\n                }\r\n            };\r\n\r\n            this.setResultImageSize=function(size) {\r\n                size=parseInt(size, 10);\r\n                if (!isNaN(size)) {\r\n                    resImgSize=size;\r\n                }\r\n            };\r\n\r\n            this.setResultImageFormat=function(format) {\r\n                resImgFormat = format;\r\n            };\r\n\r\n            this.setResultImageQuality=function(quality) {\r\n                quality = parseFloat(quality);\r\n                if (!isNaN(quality) && quality>=0 && quality<=1) {\r\n                    resImgQuality = quality;\r\n                }\r\n            };\r\n\r\n            this.setAreaType=function(type) {\r\n                var curSize=theArea.getSize(),\r\n                    curMinSize=theArea.getMinSize(),\r\n                    curX=theArea.getX(),\r\n                    curY=theArea.getY(),\r\n                    AreaClass;\r\n\r\n                AreaClass=CropAreaCircle;\r\n                if (type==='square') {\r\n                    AreaClass=CropAreaSquare;\r\n                }\r\n                theArea = new AreaClass(ctx, events);\r\n                theArea.setMinSize(curMinSize);\r\n                theArea.setSize(curSize);\r\n                theArea.setX(curX);\r\n                theArea.setY(curY);\r\n\r\n                // resetCropHost();\r\n                if (image!==null) {\r\n                    theArea.setImage(image);\r\n                }\r\n                drawScene();\r\n            };\r\n\r\n            /* Life Cycle begins */\r\n\r\n            // Init Context var\r\n            ctx = elCanvas[0].getContext('2d');\r\n\r\n            // Init CropArea\r\n            theArea = new CropAreaCircle(ctx, events);\r\n\r\n            // Init Mouse Event Listeners\r\n            $document.on('mousemove', onMouseMove);\r\n            elCanvas.on('mousedown', onMouseDown);\r\n            $document.on('mouseup', onMouseUp);\r\n\r\n            // Init Touch Event Listeners\r\n            $document.on('touchmove', onMouseMove);\r\n            elCanvas.on('touchstart', onMouseDown);\r\n            $document.on('touchend', onMouseUp);\r\n\r\n            // CropHost Destructor\r\n            this.destroy=function() {\r\n                $document.off('mousemove', onMouseMove);\r\n                elCanvas.off('mousedown', onMouseDown);\r\n                $document.off('mouseup', onMouseMove);\r\n\r\n                $document.off('touchmove', onMouseMove);\r\n                elCanvas.off('touchstart', onMouseDown);\r\n                $document.off('touchend', onMouseMove);\r\n\r\n                elCanvas.remove();\r\n            };\r\n        };\r\n\r\n    }]);\r\n\r\n\r\n    crop.factory('cropPubSub', [function() {\r\n        return function() {\r\n            var events = {};\r\n\r\n            // Subscribe\r\n            this.on = function(names, handler) {\r\n                names.split(' ').forEach(function(name) {\r\n                    if (!events[name]) {\r\n                        events[name] = [];\r\n                    }\r\n                    events[name].push(handler);\r\n                });\r\n                return this;\r\n            };\r\n            // Publish\r\n            this.trigger = function(name, args) {\r\n                angular.forEach(events[name], function(handler) {\r\n                    handler.call(null, args);\r\n                });\r\n                return this;\r\n            };\r\n        };\r\n    }]);\r\n\r\n    crop.directive('imgCrop', ['$timeout', 'cropHost', 'cropPubSub', function($timeout, CropHost, CropPubSub) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'image': '=',\r\n                'resultImage': '=',\r\n\r\n                'changeOnFly': '=',\r\n                'areaType': '@',\r\n                'areaMinSize': '=',\r\n                'resultImageSize': '=',\r\n                'resultImageFormat': '@',\r\n                'resultImageQuality': '=',\r\n\r\n                'onChange': '&',\r\n                'onLoadBegin': '&',\r\n                'onLoadDone': '&',\r\n                'onLoadError': '&'\r\n            },\r\n            'template': '<canvas></canvas>',\r\n            'controller': ['$scope', function($scope) {\r\n                $scope.events = new CropPubSub();\r\n            }],\r\n            'link': function(scope, element/* eslint-disable-line no-console. , attrs*/) {\r\n                // Init Events Manager\r\n                var events = scope.events;\r\n\r\n                // Init Crop Host\r\n                var cropHost=new CropHost(element.find('canvas'), {}, events);\r\n\r\n                // Store Result Image to check if it's changed\r\n                var storedResultImage;\r\n\r\n                var updateResultImage=function(scope) {\r\n                    var resultImage=cropHost.getResultImageDataURI();\r\n\r\n                    if (storedResultImage!==resultImage) {\r\n                        storedResultImage=resultImage;\r\n                        if (angular.isDefined(scope.resultImage)) {\r\n                            scope.resultImage=resultImage;\r\n                        }\r\n                        scope.onChange({'$dataURI': scope.resultImage});\r\n                    }\r\n                };\r\n\r\n                // Wrapper to safely exec functions within $apply on a running $digest cycle\r\n                var fnSafeApply=function(fn) {\r\n                    return function() {\r\n                        $timeout(function() {\r\n                            scope.$apply(function(scope) {\r\n                                fn(scope);\r\n                            });\r\n                        });\r\n                    };\r\n                };\r\n\r\n            // Setup CropHost Event Handlers\r\n\r\n                events.on('load-start', fnSafeApply(function(scope) {\r\n                    scope.onLoadBegin({});\r\n                }))\r\n                .on('load-done', fnSafeApply(function(scope) {\r\n                    scope.onLoadDone({});\r\n                }))\r\n                .on('load-error', fnSafeApply(function(scope) {\r\n                    scope.onLoadError({});\r\n                }))\r\n                .on('area-move area-resize', fnSafeApply(function(scope) {\r\n                    if (!!scope.changeOnFly) {\r\n                        updateResultImage(scope);\r\n                    }\r\n                }))\r\n                .on('area-move-end area-resize-end image-updated', fnSafeApply(function(scope) {\r\n                    updateResultImage(scope);\r\n                }));\r\n\r\n                // Sync CropHost with Directive's options\r\n                scope.$watch('image', function() {\r\n                    cropHost.setNewImageSource(scope.image);\r\n                });\r\n                scope.$watch('areaType', function() {\r\n                    cropHost.setAreaType(scope.areaType);\r\n                    updateResultImage(scope);\r\n                });\r\n                scope.$watch('areaMinSize', function() {\r\n                    cropHost.setAreaMinSize(scope.areaMinSize);\r\n                    updateResultImage(scope);\r\n                });\r\n                scope.$watch('resultImageSize', function() {\r\n                    cropHost.setResultImageSize(scope.resultImageSize);\r\n                    updateResultImage(scope);\r\n                });\r\n                scope.$watch('resultImageFormat', function() {\r\n                    cropHost.setResultImageFormat(scope.resultImageFormat);\r\n                    updateResultImage(scope);\r\n                });\r\n                scope.$watch('resultImageQuality', function() {\r\n                    cropHost.setResultImageQuality(scope.resultImageQuality);\r\n                    updateResultImage(scope);\r\n                });\r\n\r\n                // Update CropHost dimensions when the directive element is resized\r\n                scope.$watch(\r\n                    function () {\r\n                        return [element[0].clientWidth, element[0].clientHeight];\r\n                    },\r\n                    function (value) {\r\n                        cropHost.setMaxDimensions(value[0], value[1]);\r\n                        updateResultImage(scope);\r\n                    },\r\n                    true\r\n      );\r\n\r\n                // Destroy CropHost Instance when the directive is destroying\r\n                scope.$on('$destroy', function() {\r\n                    cropHost.destroy();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgInfiniteScroll($window, $document) {\r\n\r\n        var directive;\r\n\r\n        // directive\r\n        function linkFunc(scope, elem, attrs) {\r\n            var checkBounds;\r\n\r\n\r\n            checkBounds = function (event) {\r\n                if (scope.listType !== 'datatable') { // eslint-disable-line no-console. No paginate DATATABLE, only LISTING and CARDS\r\n\r\n                    if ($window.innerHeight + $window.scrollY === $document[0].body.offsetHeight) {\r\n                        if (scope.controlCount > 0) {\r\n                            scope.showLoadingScroll = true;\r\n                        }\r\n                        scope.$apply(attrs.plgInfiniteScroll);\r\n                    }\r\n                    angular.noop(event, elem);\r\n\r\n                }\r\n            };\r\n\r\n            angular.element($window).bind('scroll load', checkBounds);\r\n        }\r\n\r\n        directive = {\r\n            'restrict' : 'A',\r\n            'link'     : linkFunc\r\n        };\r\n\r\n        return directive;\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgInfiniteScroll.$inject = ['$window', '$document'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgInfiniteScroll', PlgInfiniteScroll);\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgLabelLoadingContent($log, $compile) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'label': '@label',\r\n                'align': '@align'\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var\r\n                    builder,\r\n                    compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.label) {\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n                            template = '<div style=\"text-align: {{align}}\">' +\r\n                                       '    <small>{{label}}</small>' +\r\n                                       '</div>';\r\n\r\n                            cb(null, template);\r\n                            angular.noop(scope);\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    PlgLabelLoadingContent.$inject = [ '$log', '$compile' ];\r\n\r\n    angular.module('plingUi').directive('plgLabelLoadingContent', PlgLabelLoadingContent);\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgListView($log, $compile) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'params': '=',\r\n                'dynamicForm': '='\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.params) {\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n                            template = '<md-list-item layout=\"row\" ng-repeat=\"item in dynamicForm.isListCollumn\" style=\"border: 0px !important\">' +\r\n                                       '    <p flex>' +\r\n                                       '        {{params[item.ref]}}' +\r\n                                       '    </p>' +\r\n                                       '</md-list-item>';\r\n\r\n                            cb(null, template);\r\n                            angular.noop(scope);\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    PlgListView.$inject = [ '$log', '$compile' ];\r\n\r\n    angular.module('plingUi').directive('plgListView', PlgListView);\r\n}());\r\n","/* global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    // CREATING CONTROLLER\r\n    function plgLoadingLayerController($rootScope) {\r\n        var ctrl = this;\r\n\r\n        ctrl.cancelRequest =  function () {\r\n            $rootScope.$broadcast('CANCEL-REQUESTS');\r\n        };\r\n    }\r\n\r\n    plgLoadingLayerController.$inject = ['$rootScope'];\r\n\r\n    // CREATING COMPONENT WITH BINDINGS\r\n    angular.module('plingUi').component('plgLoadingLayer', {\r\n        'bindings'  : {\r\n            'withLoader'        : '=',\r\n            'withLayer'         : '=',\r\n            'withCancelRequest' : '=',\r\n            'isModalOfModal'    : '='\r\n        },\r\n        'template'    : '<div class=\"plg-loading-layer\" ng-style=\" $ctrl.isModalOfModal ? {\\'z-index\\': 5} : {\\'z-index\\': 3} \" ng-show=\"$ctrl.withLayer\"></div>' +\r\n                        '<div class=\"load-container\" ng-show=\"$ctrl.withLoader\">' +\r\n                            '<md-progress-circular md-mode=\"indeterminate\"  md-diameter=\"300px\" class=\"plg-loader-position\"></md-progress-circular>' +\r\n                            '<div ng-show=\"$ctrl.withCancelRequest\">' +\r\n                                '<md-button class=\"md-raised plg-button-position\" ng-click=\"$ctrl.cancelRequest();\">Cancelar</md-button>' +\r\n                            '</div>' +\r\n                        '</div>',\r\n        'controller' : plgLoadingLayerController\r\n    });\r\n}());\r\n","(function(angular, undefined) { // eslint-disable-line\r\n    'use strict';\r\n\r\n    var\r\n        bottom, top, right, left, module, getter;\r\n\r\n    function createActivationState($parse, attr, scope) {\r\n        function unboundState(initValue) {\r\n            var activated = initValue;\r\n\r\n            return {\r\n                'getValue': function() {\r\n                    return activated;\r\n                },\r\n                'setValue': function(value) {\r\n                    activated = value;\r\n                }\r\n            };\r\n        }\r\n\r\n        function oneWayBindingState(getter, scope) {\r\n            return {\r\n                'getValue': function() {\r\n                    return getter(scope);\r\n                },\r\n                'setValue': function(){} // eslint-disable-line\r\n            };\r\n        }\r\n\r\n        function twoWayBindingState(getter, setter, scope) {\r\n            return {\r\n                'getValue': function() {\r\n                    return getter(scope);\r\n                },\r\n                'setValue': function(value) {\r\n                    if (value !== getter(scope)) {\r\n                        scope.$apply(function() {\r\n                            setter(scope, value);\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        if (attr !== \"\") { // eslint-disable-line\r\n            getter = $parse(attr);\r\n\r\n            if (getter.assign !== undefined) { // eslint-disable-line\r\n                return twoWayBindingState(getter, getter.assign, scope);\r\n            } else {\r\n                return oneWayBindingState(getter, scope);\r\n            }\r\n        } else {\r\n            return unboundState(true);\r\n        }\r\n    }\r\n\r\n    function createDirective(module, attrName, direction) {\r\n        module.directive(attrName, ['$parse', '$window', '$timeout', function($parse, $window, $timeout) {\r\n            return {\r\n                'priority': 1,\r\n                'restrict': 'A',\r\n                'link': function(scope, $el, attrs) {\r\n                    var el = $el[0],\r\n                        activationState = createActivationState($parse, attrs[attrName], scope);\r\n\r\n                    function scrollIfGlued() {\r\n                        if (activationState.getValue() && !direction.isAttached(el)) {\r\n                            direction.scroll(el);\r\n                        }\r\n                    }\r\n\r\n                    scope.$watch(scrollIfGlued);\r\n\r\n                    $timeout(scrollIfGlued, 0, false);\r\n\r\n                    $window.addEventListener('resize', scrollIfGlued, false);\r\n\r\n                    $el.bind('scroll', function() {\r\n                        activationState.setValue(direction.isAttached(el));\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n    }\r\n\r\n    bottom = {\r\n        'isAttached': function(el) {\r\n            // + 1 catches off by one errors in chrome\r\n            return el.scrollTop + el.clientHeight + 1 >= el.scrollHeight;\r\n        },\r\n        'scroll': function(el) {\r\n            el.scrollTop = el.scrollHeight;\r\n        }\r\n    };\r\n\r\n    top = {\r\n        'isAttached': function(el) {\r\n            return el.scrollTop <= 1;\r\n        },\r\n        'scroll': function(el) {\r\n            el.scrollTop = 0;\r\n        }\r\n    };\r\n\r\n    right = {\r\n        'isAttached': function(el) {\r\n            return el.scrollLeft + el.clientWidth + 1 >= el.scrollWidth;\r\n        },\r\n        'scroll': function(el) {\r\n            el.scrollLeft = el.scrollWidth;\r\n        }\r\n    };\r\n\r\n    left = {\r\n        'isAttached': function(el) {\r\n            return el.scrollLeft <= 1;\r\n        },\r\n        'scroll': function(el) {\r\n            el.scrollLeft = 0;\r\n        }\r\n    };\r\n\r\n    module = angular.module('luegg.directives', []);\r\n\r\n    createDirective(module, 'plgScroll', bottom);\r\n    createDirective(module, 'plgScrollTop', top);\r\n    createDirective(module, 'plgScrollBottom', bottom);\r\n    createDirective(module, 'plgScrollLeft', left);\r\n    createDirective(module, 'plgScrollRight', right);\r\n}(angular));\r\n","(function () {\r\n    function PlgScrollTo(plgScrollToService) {\r\n        return {\r\n            'restrict' : 'AC',\r\n            'compile' : function() {\r\n                return function (scope, element, attr) {\r\n                    if (attr.now) {\r\n                        setTimeout(function () {\r\n                            plgScrollToService.idOrName(attr.plgScrollTo, attr.offset);\r\n                        });\r\n                    } else {\r\n                        element.bind('click', function() {\r\n                            plgScrollToService.idOrName(attr.plgScrollTo, attr.offset);\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    }\r\n    PlgScrollTo.$inject = ['plgScrollToService'];\r\n\r\n    angular.module('plingUi').directive('plgScrollTo', PlgScrollTo);\r\n}());","(function () {\r\n    function PlgScrollToOptions() {\r\n        var top;\r\n\r\n        this.options = {\r\n            'handler' : function(el, offset, scrollFromElem) {\r\n                if (offset) {\r\n                    top = el.offsetTop - offset;\r\n                    if (scrollFromElem) {\r\n                        scrollFromElem.scrollTop = top;\r\n                    } else {\r\n                        window.scrollTo(0, top);\r\n                    }\r\n                }\r\n                else {\r\n                    el.scrollIntoView();\r\n                }\r\n            }\r\n        };\r\n        this.$get = function() {\r\n            return this.options;\r\n        };\r\n        this.extend = function(options) {\r\n            this.options = angular.extend(this.options, options);\r\n        };\r\n    }\r\n\r\n    angular.module('plingUi').provider('plgScrollToOptions', PlgScrollToOptions);\r\n}());","(function () {\r\n    function PlgScrollToService($window, plgScrollToOptions) {\r\n        this.idOrName = function (idOrName, offset, focus, scrollFrom) {\r\n            var document = $window.document, el, scrollEl;\r\n\r\n            if (!idOrName) {\r\n                $window.scrollTo(0, 0);\r\n            }\r\n\r\n            if (typeof focus === 'undefined') {\r\n                focus = true;\r\n            }\r\n\r\n            el = document.getElementById(idOrName);\r\n            if (!el) {\r\n                el = document.getElementsByName(idOrName);\r\n                el = el && el.length > 0? el[0] : null;\r\n            }\r\n\r\n            if (el) {\r\n                if (focus) {\r\n                    el.focus();\r\n                }\r\n                scrollEl = document.getElementById(scrollFrom);\r\n                if (!scrollEl && scrollFrom) {\r\n                    scrollEl = document.getElementsByName(scrollFrom);\r\n                }\r\n                plgScrollToOptions.handler(el, offset, scrollEl);\r\n            }\r\n        };\r\n    }\r\n    PlgScrollToService.$inject = ['$window', 'plgScrollToOptions'];\r\n\r\n    angular.module('plingUi').service('plgScrollToService', PlgScrollToService);\r\n}());","(function () {\r\n    'use strict';\r\n\r\n    // Injeção de dependências\r\n    plgServiceBarController.$inject = [\r\n        '$scope',\r\n        '$rootScope',\r\n        '$timeout',\r\n        'datetime',\r\n        'credentialsService',\r\n        'applicationsService',\r\n        'coreApiService',\r\n        'websocketService',\r\n        '$location',\r\n        '$localstorage'\r\n    ];\r\n\r\n    // Component configuration\r\n    angular.module('plingUi').component('plgServiceBar', {\r\n        'templateUrl' : 'plg-service-bar.html',\r\n        'restrict'      : 'E',\r\n        'controller'  : plgServiceBarController,\r\n        'bindings'    : {}\r\n    });\r\n\r\n    // CREATING CONTROLLER\r\n    function plgServiceBarController($scope, $rootScope, $timeout, datetime, credentialsService, applicationsService, coreApiService, websocketService, $location, $localstorage) {\r\n\r\n        $scope.arrayNotifications  = [];\r\n        $scope.isNotificationAdded = false;\r\n        $scope.availableSubmenu    = [];\r\n\r\n        function getSubmenu (path) {\r\n            var i;\r\n\r\n            if ($scope.submenu.length > 0)\r\n                for (i = 0; i < $scope.submenu.length; i += 1)\r\n                    if (path === $scope.submenu[i].parentRoute)\r\n                        $scope.availableSubmenu.push($scope.submenu[i]);\r\n        }\r\n\r\n        function getMenuInfo (path) {\r\n            var i;\r\n\r\n            if (!path)\r\n                path = $location.path();\r\n            for (i = 0; i < $scope.menu.length; i += 1)\r\n                if ($scope.menu[i].route === path) {\r\n                    $scope.currentMenuIndex = i;\r\n                    break;\r\n                }\r\n        }\r\n\r\n        function getSubmenuInfo () {\r\n            var i;\r\n\r\n            for (i = 0; i < $scope.availableSubmenu.length; i += 1)\r\n                if ($scope.availableSubmenu[i].route === $location.path()) {\r\n                    $scope.currentSubmenuIndex = i;\r\n                    break;\r\n                }\r\n        }\r\n\r\n        $scope.myAccount = function () {\r\n            coreApiService.redirectToControlPanel();\r\n        };\r\n\r\n        // Manipula o botão Logout do usuário\r\n        $scope.logout = function () {\r\n            credentialsService.logout();\r\n        };\r\n\r\n        $scope.reconnectWebsocket = function () {\r\n            $rootScope.isWebsocketLoading   = false;\r\n            $rootScope.isWebsocketConnected = true;\r\n            websocketService.connect();\r\n        };\r\n\r\n        $scope.redirect = function (url) {\r\n            applicationsService.redirect(url);\r\n        };\r\n\r\n        // Open Notifications Panel\r\n        $scope.openMenu = function($mdOpenMenu, ev) {\r\n            $mdOpenMenu(ev);\r\n        };\r\n\r\n        // Obtém notificações geradas pelo recebimento de message no Websocket\r\n        $rootScope.$on('PLING-WEBSOCKET-NOTIFICATION', function(event, notifications) {\r\n            var i, isExist;\r\n\r\n            $timeout(function() {\r\n                $scope.isNotificationAdded = true;\r\n\r\n                if (Array.isArray(notifications)) {\r\n                    for (i = 0; i < notifications.length; i += 1) {\r\n                        if (notifications[i].doc) {\r\n\r\n                            // Verificar se ja esta no array\r\n                            if ($scope.arrayNotifications.length > 0) {\r\n                                $scope.arrayNotifications.map(function(value) { // eslint-disable-line\r\n                                    if (value._id === notifications[i]._id) {\r\n                                        isExist = true;\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                            if (!isExist || $scope.arrayNotifications.length === 0)\r\n                                $scope.arrayNotifications.push(notifications[i]);\r\n                        }\r\n                    }\r\n                } else if (notifications) {\r\n                    $scope.arrayNotifications.push(notifications);\r\n                }\r\n            });\r\n        });\r\n\r\n        $rootScope.$on('PLING-WEBSOCKET-EXTERNAL', function(event, externalData) {\r\n            var doc = {\r\n                'options': {\r\n                    'key': externalData.caller\r\n                },\r\n                'doc': {\r\n                    'description': externalData.message,\r\n                    'data'       : externalData.date\r\n                }\r\n            };\r\n\r\n            $timeout(function() {\r\n                $scope.isNotificationAdded = true;\r\n                $scope.arrayNotifications.push(doc);\r\n            });\r\n        });\r\n\r\n        // Atualiza a imagem do usuário no topo da barra\r\n        $rootScope.$on('PLING-SERVICE-BAR-USER-IMAGE-UPDATE', function (ev, image) {\r\n            if (ev) {\r\n                $scope.user = $scope.user || {};\r\n                $scope.user.profileImage = image;\r\n            }\r\n        });\r\n\r\n        //  MENU\r\n        $scope.menu    = pling.loader.settings.menu;    // eslint-disable-line\r\n        $scope.submenu = pling.loader.settings.submenu; // eslint-disable-line\r\n\r\n        // change route on click\r\n        $scope.changeRoute = function (path, isSubmenu) {\r\n            if (isSubmenu)\r\n                $location.path(path);\r\n            else {\r\n                $scope.currentSubmenuIndex = -1;\r\n                $scope.availableSubmenu = [];\r\n\r\n                getMenuInfo(path);\r\n                getSubmenu(path);\r\n                getSubmenuInfo();\r\n\r\n                // Se não tem submenu OU Tem submenu e tem conteudo (hasContent) redireciona para conteudo.\r\n                if ($scope.availableSubmenu.length === 0 || $scope.availableSubmenu && $scope.availableSubmenu[0].config.hasContent)\r\n                    $location.path(path);\r\n            }\r\n        };\r\n\r\n        $scope.$on('$routeChangeSuccess', function () {\r\n            $scope.currentSubmenuIndex = -1;\r\n            $scope.availableSubmenu = [];\r\n            getMenuInfo('/' + $location.path().split('/')[1]);\r\n            getSubmenu('/' + $location.path().split('/')[1]);\r\n            getSubmenuInfo();\r\n        });\r\n\r\n        // Inicialização da Barra\r\n        (function () {\r\n\r\n            var localUser = credentialsService.getLocal();\r\n\r\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\r\n\r\n            credentialsService.getProfileImage(localUser.imageDriveId, function(profileImageData) {\r\n                $scope.user = credentialsService.getLocal();\r\n\r\n                if (profileImageData)\r\n                    $scope.user.profileImage = profileImageData;\r\n\r\n                $localstorage.set('PLING-USER', JSON.stringify($scope.user));\r\n\r\n                $scope.currentAppModule = applicationsService.getCurrentAppModule();\r\n                $scope.customerName     = localUser.customerName;\r\n\r\n                // Websocket pipe start\r\n                websocketService.connect($scope.user);\r\n\r\n                $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\r\n            });\r\n\r\n        }());\r\n    }\r\n}());\r\n","/* global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('plingUi').directive('plgSetFocus', [ '$parse', '$timeout', function ($parse, $timeout) {\r\n\r\n        return {\r\n            'restrict'    : 'A',\r\n            'replace'     : true,\r\n            'link'        : function ($scope, element, attrs) {\r\n\r\n                var model = $parse(attrs.plgSetFocus);\r\n\r\n                $scope.$watch(model, function (value) {\r\n                    if (value === true) {\r\n                        $timeout(function () {\r\n                            element[0].focus();\r\n                        });\r\n                    }\r\n                });\r\n\r\n                element.bind('blur', function () {\r\n                    $scope.$apply(model.assign($scope, false));\r\n                });\r\n\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n","(function () {\r\n\r\n    angular.module('plingUi').directive('plgSimpleCombo', PlgSimpleComboCtrl);\r\n\r\n    PlgSimpleComboCtrl.$inject = ['plgSimpleComboFactory'];\r\n\r\n    function PlgSimpleComboCtrl(plgSimpleComboFactory) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'items'   : '=',\r\n                'ngModel' : '=',\r\n                'options' : '=?',\r\n                'class'   : '@',\r\n                'label'   : '@',\r\n                'onClose' : '&?',\r\n                'onChange': '&?',\r\n                'multiple': '@?'\r\n            },\r\n            'templateUrl' : 'plgSimpleCombo.html',\r\n            'compile': function compile(tElement, scope) {\r\n\r\n                /* hack: remove atributo multiple do md-select antes da renderizacao do html. */\r\n                if (tElement[0].children[0].children[1].hasAttribute('multiple') && scope.multiple === undefined) // eslint-disable-line no-undefined\r\n                    tElement[0].children[0].children[1].removeAttribute('multiple');\r\n\r\n                return {\r\n                    'pre': function(scope) {\r\n                        plgSimpleComboFactory.init(scope);\r\n                    },\r\n                    'post': function(scope, element) {\r\n                        scope.getSelectedText = plgSimpleComboFactory.getSelectedText.bind(scope);\r\n\r\n                        scope.onHandler = plgSimpleComboFactory.onHandler.bind(scope);\r\n\r\n                        scope.$watch('ngModel', plgSimpleComboFactory.buildNGModel.bind(scope));\r\n\r\n                        element.find('input').on('keydown', function(ev) {\r\n                            ev.stopPropagation();\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    }\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('plingUi').factory('plgSimpleComboFactory', PlgSimpleComboFactory);\r\n\r\n    function PlgSimpleComboFactory() {\r\n\r\n        function getTrackBy(scope) {\r\n            var trackBy = scope.items[0].id ? 'id' : '_id';\r\n\r\n            if (!scope.isArrayOfObjects) {\r\n                return false;\r\n            }\r\n\r\n            return scope.items[0][trackBy] ? trackBy : scope.options.refName;\r\n        }\r\n\r\n        function every(a, b, cb) {\r\n            var i, j, stop;\r\n\r\n            for (i = a.length - 1; i >= 0; i--) {\r\n                for (j = b.length - 1; j >= 0; j--) {\r\n                    stop = cb(i, j, false);\r\n                    if (stop > 0) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (stop > 1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'init': function init(scope) {\r\n                scope.ngModel          = scope.ngModel || [];\r\n                scope.ngModelCopy      = angular.copy(scope.ngModel);\r\n                scope.options          = scope.options || {};\r\n                scope.options.refName  = scope.options.refName || 'name';\r\n                scope.isArrayOfObjects = scope.items && scope.items.length > 0 && typeof scope.items[0] === 'object';\r\n                scope.onClose          = scope.onClose  || angular.noop;\r\n                scope.onChange         = scope.onChange || angular.noop;\r\n\r\n                if (scope.isArrayOfObjects) {\r\n                    scope.trackBy = { 'trackBy': '$value.' + getTrackBy(scope) };\r\n                } else {\r\n                    scope.trackBy = { 'trackBy': '$value' };\r\n                }\r\n            },\r\n            'getSelectedText': function () {\r\n                if (this.multiple === undefined) // eslint-disable-line no-undefined\r\n                    return this.ngModel.name;\r\n\r\n                if (this.ngModel && this.ngModel.length > 0) {\r\n                    if (this.ngModel.length > 1) {\r\n                        return this.ngModel.length + ' Selecionados';\r\n                    }\r\n                    return this.isArrayOfObjects ? this.ngModel[0][this.options.refName] : this.ngModel[0];\r\n                }\r\n                return this.label;\r\n            },\r\n            'buildNGModel': function buildNGModel(ngModel) {\r\n                var pk, self = this;\r\n\r\n                if (ngModel && ngModel.length > 0 && this.items && this.items.length > 0 && this.isArrayOfObjects) {\r\n\r\n                    pk = getTrackBy(this);\r\n\r\n                    every(ngModel, self.items, function (i, j) {\r\n                        if (ngModel[i][pk] === self.items[j][pk]) {\r\n                            ngModel[i] = self.items[j];\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    });\r\n                }\r\n            },\r\n            'onHandler': function onHandler() {\r\n                var isChanged = false, self = this, trackBy, pk, fk;\r\n\r\n                trackBy = getTrackBy(self);\r\n\r\n                 /* combo simples de objetos */\r\n                if (!self.multiple && self.ngModel[trackBy] !== self.ngModelCopy[trackBy])\r\n                    isChanged =  true;\r\n\r\n                else if (self.ngModel.length !== self.ngModelCopy.length) {\r\n                    isChanged = true;\r\n                }\r\n                 else {\r\n\r\n                    every(self.ngModelCopy, self.ngModel, function (i, j) {\r\n                        pk = trackBy ? self.ngModelCopy[i][trackBy] : self.ngModelCopy[i];\r\n                        fk = trackBy ? self.ngModel[j][trackBy]     : self.ngModel[j];\r\n\r\n                        isChanged = true;\r\n                        if (pk === fk) {\r\n                            isChanged = false;\r\n                            return 1;\r\n                        }\r\n                        return j === 0 && isChanged ? 2 : 0;\r\n                    });\r\n                }\r\n\r\n                if (isChanged) {\r\n                    this.ngModelCopy = angular.copy(this.ngModel);\r\n                    return this.onChange();\r\n                }\r\n\r\n                return this.onClose();\r\n            }\r\n        };\r\n    }\r\n}());\r\n","var module = angular.module('plingUi');\r\n\r\nfunction TimePickerCtrl($scope, $mdDialog, time, autoSwitch, $mdMedia) {\r\n    var self = this;\r\n\r\n    this.VIEW_HOURS = 1;\r\n    this.VIEW_MINUTES = 2;\r\n    this.currentView = this.VIEW_HOURS;\r\n    this.time = moment(time);\r\n    this.autoSwitch = !!autoSwitch;\r\n\r\n    this.clockHours     = parseInt(this.time.format('h'), 10);\r\n    this.clockMinutes   = parseInt(this.time.minutes(), 10);\r\n\r\n    $scope.$mdMedia = $mdMedia;\r\n\r\n    this.switchView = function() {\r\n        self.currentView = self.currentView === self.VIEW_HOURS ? self.VIEW_MINUTES : self.VIEW_HOURS;\r\n    };\r\n\r\n    this.setAM = function() {\r\n        if (self.time.hours() >= 12)\r\n            self.time.hour(self.time.hour() - 12);\r\n    };\r\n\r\n    this.setPM = function() {\r\n        if (self.time.hours() < 12)\r\n            self.time.hour(self.time.hour() + 12);\r\n    };\r\n\r\n    this.cancel = function() {\r\n        $mdDialog.cancel();\r\n    };\r\n\r\n    this.confirm = function() {\r\n        $mdDialog.hide(this.time.toDate());\r\n    };\r\n}\r\n\r\nfunction ClockCtrl() {\r\n    var TYPE_HOURS = 'hours';\r\n    var TYPE_MINUTES = 'minutes';\r\n    var self = this;\r\n\r\n    this.STEP_DEG = 360 / 12;\r\n    this.steps = [];\r\n\r\n    this.CLOCK_TYPES = {\r\n        'hours': {\r\n            'range': 12\r\n        },\r\n        'minutes': {\r\n            'range': 60\r\n        }\r\n    };\r\n\r\n    this.getPointerStyle = function() {\r\n        var divider = 1, degrees;\r\n\r\n        switch (self.type) {\r\n        case TYPE_HOURS:\r\n            divider = 12;\r\n            break;\r\n        case TYPE_MINUTES:\r\n            divider = 60;\r\n            break;\r\n        }\r\n        degrees = Math.round(self.selected * (360 / divider)) - 180;\r\n        return {\r\n            '-webkit-transform': 'rotate(' + degrees + 'deg)',\r\n            '-ms-transform': 'rotate(' + degrees + 'deg)',\r\n            'transform': 'rotate(' + degrees + 'deg)'\r\n        };\r\n    };\r\n\r\n    this.setTimeByDeg = function(deg) {\r\n        var divider = 0;\r\n\r\n        deg = deg >= 360 ? 0 : deg;\r\n        switch (self.type) {\r\n        case TYPE_HOURS:\r\n            divider = 12;\r\n            break;\r\n        case TYPE_MINUTES:\r\n            divider = 60;\r\n            break;\r\n        }\r\n\r\n        self.setTime(\r\n            Math.round(divider / 360 * deg)\r\n        );\r\n    };\r\n\r\n    this.setTime = function(time) {\r\n        this.selected = time;\r\n\r\n        switch (self.type) {\r\n        case TYPE_HOURS:\r\n            if (self.time.format('A') === 'PM') time += 12;\r\n            this.time.hours(time);\r\n            break;\r\n        case TYPE_MINUTES:\r\n            if (time > 59) time -= 60;\r\n            this.time.minutes(time);\r\n            break;\r\n        }\r\n\r\n    };\r\n\r\n    this.init = function() {\r\n        var i;\r\n\r\n        self.type = self.type || 'hours';\r\n        switch (self.type) {\r\n        case TYPE_HOURS:\r\n            for (i = 1; i <= 12; i++)\r\n                self.steps.push(i);\r\n            self.selected = self.time.hours() || 0;\r\n            if (self.selected > 12) self.selected -= 12;\r\n\r\n            break;\r\n        case TYPE_MINUTES:\r\n            for (i = 5; i <= 55; i+=5)\r\n                self.steps.push(i);\r\n            self.steps.push(0);\r\n            self.selected = self.time.minutes() || 0;\r\n\r\n            break;\r\n        }\r\n    };\r\n\r\n    this.init();\r\n}\r\n\r\nmodule.directive('mdpClock', ['$animate', '$timeout', function($animate, $timeout) {\r\n    return {\r\n        'restrict': 'E',\r\n        'bindToController': {\r\n            'type': '@?',\r\n            'time': '=',\r\n            'autoSwitch': '=?'\r\n        },\r\n        'replace': true,\r\n        'template': '<div class=\"plgTimePicker-clock\">' +\r\n                        '<div class=\"plgTimePicker-clock-container\">' +\r\n                            '<md-toolbar class=\"plgTimePicker-clock-center md-primary\"></md-toolbar>' +\r\n                            '<md-toolbar ng-style=\"clock.getPointerStyle()\" class=\"plgTimePicker-pointer md-primary\">' +\r\n                                '<span class=\"plgTimePicker-clock-selected md-button md-raised md-primary\"></span>' +\r\n                            '</md-toolbar>' +\r\n                            '<md-button ng-class=\"{ \\'md-primary\\': clock.selected == step }\" class=\"md-icon-button md-raised plgTimePicker-clock-deg{{ ::(clock.STEP_DEG * ($index + 1)) }}\" ng-repeat=\"step in clock.steps\" ng-click=\"clock.setTime(step)\">{{ step }}</md-button>' +\r\n                        '</div>' +\r\n                    '</div>',\r\n        'controller': ['$scope', ClockCtrl],\r\n        'controllerAs': 'clock',\r\n        'link': function(scope, element, attrs, ctrl) {\r\n            var timepickerCtrl = scope.$parent.timepicker;\r\n\r\n            var onEvent = function(event) {\r\n                var containerCoords = event.currentTarget.getClientRects()[0];\r\n                var x = event.currentTarget.offsetWidth / 2 - (event.pageX - containerCoords.left),\r\n                    y = event.pageY - containerCoords.top - event.currentTarget.offsetHeight / 2;\r\n\r\n                var deg = Math.round(Math.atan2(x, y) * (180 / Math.PI));\r\n\r\n                $timeout(function() {\r\n                    ctrl.setTimeByDeg(deg + 180);\r\n                    if (ctrl.autoSwitch && ['mouseup', 'click'].indexOf(event.type) !== -1 && timepickerCtrl) timepickerCtrl.switchView();\r\n                });\r\n            };\r\n\r\n            element.on('mousedown', function() {\r\n                element.on('mousemove', onEvent);\r\n            });\r\n\r\n            element.on('mouseup', function() {\r\n                element.off('mousemove');\r\n            });\r\n\r\n            element.on('click', onEvent);\r\n            scope.$on('$destroy', function() {\r\n                element.off('click', onEvent);\r\n                element.off('mousemove', onEvent);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nmodule.provider('$mdpTimePicker', function() {\r\n    var LABEL_OK = 'Selecionar',\r\n        LABEL_CANCEL = 'Cancelar';\r\n\r\n    this.setOKButtonLabel = function(label) {\r\n        LABEL_OK = label;\r\n    };\r\n\r\n    this.setCancelButtonLabel = function(label) {\r\n        LABEL_CANCEL = label;\r\n    };\r\n\r\n    this.$get = ['$mdDialog', function($mdDialog) {\r\n        var timePicker = function(time, options) {\r\n            if (!angular.isDate(time)) time = Date.now();\r\n            if (!angular.isObject(options)) options = {};\r\n\r\n            return $mdDialog.show({\r\n                'controller':  ['$scope', '$mdDialog', 'time', 'autoSwitch', '$mdMedia', TimePickerCtrl],\r\n                'controllerAs': 'timepicker',\r\n                'clickOutsideToClose': true,\r\n                'template': '<md-dialog aria-label=\"\" class=\"plgTimePicker-timepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' +\r\n                            '<md-dialog-content layout-gt-xs=\"row\" layout-wrap>' +\r\n                                '<md-toolbar layout-gt-xs=\"column\" layout-xs=\"row\" layout-align=\"center center\" flex class=\"plgTimePicker-timepicker-time md-primary\">' +\r\n                                    '<div class=\"plgTimePicker-timepicker-selected-time\">' +\r\n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_HOURS }\" ng-click=\"timepicker.currentView = timepicker.VIEW_HOURS\">{{ timepicker.time.format(\"h\") }}</span>:' +\r\n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_MINUTES }\" ng-click=\"timepicker.currentView = timepicker.VIEW_MINUTES\">{{ timepicker.time.format(\"mm\") }}</span>' +\r\n                                    '</div>' +\r\n                                    '<div layout=\"column\" class=\"plgTimePicker-timepicker-selected-ampm\">' +\r\n                                        '<span ng-click=\"timepicker.setAM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() < 12 }\">AM</span>' +\r\n                                        '<span ng-click=\"timepicker.setPM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() >= 12 }\">PM</span>' +\r\n                                    '</div>' +\r\n                                '</md-toolbar>' +\r\n                                '<div>' +\r\n                                    '<div class=\"plgTimePicker-clock-switch-container\" ng-switch=\"timepicker.currentView\" layout layout-align=\"center center\">' +\r\n                                        '<mdp-clock class=\"plgTimePicker-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"hours\" ng-switch-when=\"1\"></mdp-clock>' +\r\n                                        '<mdp-clock class=\"plgTimePicker-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"minutes\" ng-switch-when=\"2\"></mdp-clock>' +\r\n                                    '</div>' +\r\n\r\n                                    '<md-dialog-actions layout=\"row\">' +\r\n                                        '<span flex></span>' +\r\n                                        '<md-button ng-click=\"timepicker.cancel()\" aria-label=\"' + LABEL_CANCEL + '\">' + LABEL_CANCEL + '</md-button>' +\r\n                                        '<md-button ng-click=\"timepicker.confirm()\" class=\"md-primary\" aria-label=\"' + LABEL_OK + '\">' + LABEL_OK + '</md-button>' +\r\n                                    '</md-dialog-actions>' +\r\n                                '</div>' +\r\n                            '</md-dialog-content>' +\r\n                        '</md-dialog>',\r\n                'targetEvent': options.targetEvent,\r\n                'locals': {\r\n                    'time': time,\r\n                    'autoSwitch': options.autoSwitch\r\n                },\r\n                'skipHide': true\r\n            });\r\n        };\r\n\r\n        return timePicker;\r\n    }];\r\n});\r\n\r\nmodule.directive('mdpTimePicker', ['$mdpTimePicker', function($mdpTimePicker) {\r\n    return  {\r\n        'restrict': 'E',\r\n        'require': 'ngModel',\r\n        'replace': true,\r\n        'transclude': true,\r\n        'template': function(element, attrs) {\r\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\r\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : '',\r\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\r\n\r\n            return  '<md-input-container class=\"md-icon-float md-block\" ' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\" style=\"position:relative;\">' +\r\n                        '<label ng-if=\"label\">{{label}}</label>' +\r\n                        '<md-icon class=\"material-icons plgTimePicker-clock-button\" ng-click=\"showPicker($event)\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + '>access_time</md-icon>'+\r\n                        '<input type=\"{{ ::type }}\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\r\n                        '<!--md-button class=\"md-icon-button plgTimePicker-clock-button\" ng-click=\"showPicker($event)\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + '>' +\r\n                            '<md-icon>access_time</md-icon>' +\r\n                        '</md-button-->' +\r\n                    '</md-input-container>';\r\n        },\r\n        'scope': {\r\n            'timeFormat': '@mdpFormat',\r\n            'placeholder': '@mdpPlaceholder',\r\n            'autoSwitch': '=?mdpAutoSwitch',\r\n            'label': '@',\r\n            'disabled': '=?mdpDisabled'\r\n        },\r\n        'link': function(scope, element, attrs, ngModel, $transclude) {\r\n            var inputElement = angular.element(element[0].querySelector('input')),\r\n                inputContainer = angular.element(element[0]),\r\n                inputContainerCtrl = inputContainer.controller('mdInputContainer'),\r\n                messages;\r\n\r\n            $transclude(function(clone) {\r\n                inputContainer.append(clone);\r\n            });\r\n\r\n            messages = inputContainer && inputContainer.length > 0 ? angular.element(inputContainer[0].querySelector('[ng-messages]')) : {};\r\n\r\n            scope.type = scope.timeFormat ? 'text' : 'time';\r\n            scope.timeFormat = scope.timeFormat || 'HH:mm';\r\n            scope.autoSwitch = scope.autoSwitch || false;\r\n\r\n            scope.$watch(function() { return ngModel.$error; }, function() {\r\n                inputContainerCtrl.setInvalid(!ngModel.$pristine && !!Object.keys(ngModel.$error).length);\r\n            }, true);\r\n\r\n            // update input element if model has changed\r\n            ngModel.$formatters.unshift(function(value) {\r\n                var time = angular.isDate(value) && moment(value);\r\n\r\n                if (time && time.isValid())\r\n                    updateInputElement(time.format(scope.timeFormat));\r\n                else\r\n                    updateInputElement(null);\r\n            });\r\n\r\n            ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return !viewValue || angular.isDate(viewValue) || moment(viewValue, scope.timeFormat, true).isValid();\r\n            };\r\n\r\n            ngModel.$validators.required = function(modelValue, viewValue) {\r\n                return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\r\n            };\r\n\r\n            ngModel.$parsers.unshift(function(value) {\r\n                var parsed = moment(value, scope.timeFormat, true), originalModel;\r\n\r\n                if (parsed.isValid()) {\r\n                    if (angular.isDate(ngModel.$modelValue)) {\r\n                        originalModel = moment(ngModel.$modelValue);\r\n\r\n                        originalModel.minutes(parsed.minutes());\r\n                        originalModel.hours(parsed.hours());\r\n                        originalModel.seconds(parsed.seconds());\r\n\r\n                        parsed = originalModel;\r\n                    }\r\n                    return parsed.toDate();\r\n                } else\r\n                    return null;\r\n            });\r\n\r\n            // update input element value\r\n            function updateInputElement(value) {\r\n                inputElement[0].value = value;\r\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\r\n            }\r\n\r\n            function updateTime(time) {\r\n                var value = moment(time, angular.isDate(time) ? null : scope.timeFormat, true),\r\n                    strValue = value.format(scope.timeFormat);\r\n\r\n                if (value.isValid()) {\r\n                    updateInputElement(strValue);\r\n                    ngModel.$setViewValue(strValue);\r\n                } else {\r\n                    updateInputElement(time);\r\n                    ngModel.$setViewValue(time);\r\n                }\r\n\r\n                if (!ngModel.$pristine &&\r\n                    messages.hasClass('md-auto-hide') &&\r\n                    inputContainer.hasClass('md-input-invalid')) messages.removeClass('md-auto-hide');\r\n\r\n                ngModel.$render();\r\n            }\r\n\r\n            scope.showPicker = function(ev) {\r\n                $mdpTimePicker(ngModel.$modelValue, {\r\n                    'targetEvent': ev,\r\n                    'autoSwitch': scope.autoSwitch\r\n                }).then(function(time) {\r\n                    updateTime(time, true);\r\n                });\r\n            };\r\n\r\n            function onInputElementEvents(event) {\r\n                if (event.target.value !== ngModel.$viewVaue)\r\n                    updateTime(event.target.value);\r\n            }\r\n\r\n            inputElement.on('reset input blur', onInputElementEvents);\r\n\r\n            scope.$on('$destroy', function() {\r\n                inputElement.off('reset input blur', onInputElementEvents);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nmodule.directive('mdpTimePicker', ['$mdpTimePicker', function($mdpTimePicker) {\r\n    return  {\r\n        'restrict': 'A',\r\n        'require': 'ngModel',\r\n        'scope': {\r\n            'timeFormat': '@mdpFormat',\r\n            'autoSwitch': '=?mdpAutoSwitch'\r\n        },\r\n        'link': function(scope, element, attrs, ngModel) {\r\n            scope.format = scope.format || 'HH:mm';\r\n            function showPicker(ev) {\r\n                $mdpTimePicker(ngModel.$modelValue, {\r\n                    'targetEvent': ev,\r\n                    'autoSwitch': scope.autoSwitch\r\n                }).then(function(time) {\r\n                    ngModel.$setViewValue(moment(time).format(scope.format));\r\n                    ngModel.$render();\r\n                });\r\n            }\r\n\r\n            element.on('click', showPicker);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('click', showPicker);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n","/* global angular, console, document, $, window */\r\n(function () {\r\n    'use strict';\r\n\r\n    // creating directive\r\n    function PlgToolbarList($log, $compile, $rootScope) {\r\n        return {\r\n            'restrict': 'E',\r\n            'scope': {\r\n                'chkList': '=',\r\n                'checkedItens': '='\r\n            },\r\n            'replace': true,\r\n\r\n            // linking directive\r\n            'link': function (scope, element) {\r\n\r\n                var builder, compiledElm;\r\n\r\n                // validating bind value\r\n                if (scope.chkList) {\r\n                    builder = {\r\n                        'buildTemplate': function (scope, cb) {\r\n                            var template;\r\n\r\n\r\n                            scope.chkItens    = this.chkItens;\r\n\r\n                            template = '<div class=\"label\">' +\r\n                                       '    <small><font color=\"#5c99ff\">{{chkList.length}} selecionado<span ng-show=\"chkList.length > 1\">s</span> </font></small>' +\r\n                                       '</div>' +\r\n                                       '<md-menu md-offset=\"13 50\">' +\r\n                                       '    <md-button aria-label=\"selecione\" class=\"md-icon-button containerIconSeta\" ng-click=\"$mdOpenMenu($event);\" md-prevent-menu-close=\"md-prevent-menu-close\">' +\r\n                                       '        <md-icon class=\"iconSeta\">arrow_drop_down</md-icon>' +\r\n                                       '    </md-button>' +\r\n                                       '    <md-menu-content layout=\"column\" layout-wrap width=\"3\">' +\r\n                                       '        <md-menu-item flex ng-show=\"module\" class=\"filterDataTableItem\">' +\r\n                                       '            <p><font color=\"#959595\" style=\"font-size: 13px !important\">Alterar Status</font></p>' +\r\n                                       '        </md-menu-item>' +\r\n                                       '        <md-menu-item flex ng-repeat=\"item in checkedItens\" class=\"filterDataTableItem\">' +\r\n                                       '            <md-button ng-click=\"chkItens(item.value)\">' +\r\n                                       '                <font color=\"#505050\" size=\"2\">{{item.label}}</font>' +\r\n                                       '            </md-button>' +\r\n                                       '        </md-menu-item>' +\r\n                                       '    </md-menu-content>' +\r\n                                       '</md-menu>';\r\n\r\n                            cb(null, template);\r\n                        },\r\n\r\n                        // $on in directive \"plgPeopleList\"\r\n                        'chkItens': function (val) {\r\n                            $rootScope.$broadcast('checkedAllItens', val);\r\n                        }\r\n\r\n                    };\r\n\r\n                    // defining template\r\n                    builder.buildTemplate(scope, function (err, template) {\r\n\r\n                        // handling error\r\n                        if (err) {\r\n                            $log.warn(err);\r\n                            return;\r\n                        }\r\n\r\n                        // compiling template\r\n                        compiledElm = $compile(template)(scope);\r\n\r\n                        // handling post compile hooks\r\n                        if (builder.postCompile) {\r\n                            builder.postCompile(compiledElm);\r\n                        }\r\n\r\n                        // replacing into DOM\r\n                        element.replaceWith(compiledElm);\r\n\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // injecting dependencies\r\n    PlgToolbarList.$inject = ['$log', '$compile', '$rootScope'];\r\n\r\n    // registering into angular\r\n    angular.module('plingUi').directive('plgToolbarList', PlgToolbarList);\r\n}());\r\n","(function () {\r\n\r\n    'use strict';\r\n\r\n    function ApplicationsService($window, $localstorage, httpService, tokenService) {\r\n\r\n        this.getLocal = function() {\r\n            var localAppData = $localstorage.get('PLING-APPS');\r\n\r\n            localAppData = localAppData ? JSON.parse(localAppData) : {};\r\n            return localAppData;\r\n        };\r\n\r\n        this.getCurrentAppModule = function() {\r\n            var currentAppModule = $localstorage.get('PLING-CURRENT-APP');\r\n\r\n            return currentAppModule;\r\n        };\r\n\r\n        this.getCurrentApp = function() {\r\n            var currentApp = {\r\n                'appModule': $localstorage.get('PLING-CURRENT-APP'),\r\n                'env': $localstorage.get('PLING-CURRENT-ENV')\r\n            };\r\n\r\n            return currentApp;\r\n        };\r\n\r\n        this.getCallbackUrl = function(appId, cb) {\r\n            httpService.post('accounts', '_oauth', { 'appid': appId })\r\n                .success(function (data) {\r\n                    if (data.callbackUrl) {\r\n                        cb(null, data.callbackUrl + '?token=' + tokenService.get());\r\n                    } else {\r\n                        cb('Callback url not found');\r\n                    }\r\n                })\r\n                .error(function (reason) {\r\n                    cb(reason || 'Server Unavailable', null);\r\n                });\r\n        };\r\n\r\n        this.redirect = function(url) {\r\n            $window.location.href = url;\r\n        };\r\n\r\n    }\r\n\r\n    ApplicationsService.$inject = [ '$window', '$localstorage', 'httpService', 'tokenService' ];\r\n\r\n    angular.module('plingUi').service('applicationsService', ApplicationsService);\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function CepService(httpService) {\r\n\r\n        this.getCep = function (cep) {\r\n            return httpService.get('smart', 'cep', cep);\r\n        };\r\n    }\r\n\r\n    CepService.$inject = [ 'httpService' ];\r\n\r\n    angular.module('plingUi').service('cepService', CepService);\r\n\r\n}());\r\n\r\n","(function () {\r\n    'use strict';\r\n\r\n    CoreApiService.$inject = [ 'boot.options', '$window', '$rootScope', '$http' ];\r\n\r\n    angular.module('plingUi').service('coreApiService', CoreApiService);\r\n\r\n    function CoreApiService(options, $window, $rootScope, $http) {\r\n\r\n        var self = this;\r\n\r\n        /*\r\n        *  url do core obtido do conf.json da aplicacao corrente concatenado com parametros\r\n        * @param {string} nome da aplicacao. ex: 'accounts', 'drive', 'integra'\r\n        * @param {string} nome do modulo. ex: 'contactPreferences', 'users/list'.\r\n        * @returns {string} concatenacao da url do core com parametros.\r\n        */\r\n        this.getAppCoreUrl = function (app, module) {\r\n            var url;\r\n\r\n            url = options.core_url + options.def_api_version;\r\n\r\n            url += app ? '/' + app : '';\r\n            url += module ? '/' + module : '';\r\n\r\n            return url;\r\n        };\r\n\r\n        // Returns Application name capitalizing the first letter with UpperCase\r\n        this.getApplicationName = function () {\r\n            return options.def_api_app.charAt(0).toUpperCase() + options.def_api_app.slice(1);\r\n        };\r\n\r\n        this.redirectToLoginWithCallback = function(callbackUrl) {\r\n            var callbackQueryString;\r\n\r\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\r\n\r\n            // Seta callback url\r\n            callbackQueryString = callbackUrl ? '?callbackurl=' + callbackUrl : '';\r\n\r\n            // Busca a URL do login por ambiente (conf.json)\r\n            $http.get(self.getAppCoreUrl('accounts', 'products/Login/' + options.environment))\r\n                .success(function(data) {\r\n                    if (data)\r\n                        $window.location.href = data.callbackUrl + callbackQueryString;\r\n                })\r\n                .error(function() {\r\n                    $rootScope.toast('Erro ao obter URL para aplicação de Login');\r\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\r\n                    return false;\r\n                });\r\n        };\r\n\r\n        this.redirectToControlPanel = function() {\r\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\r\n\r\n            $http.get(self.getAppCoreUrl('accounts', 'products/Painel/' + options.environment))\r\n                .success(function(data) {\r\n                    if (data)\r\n                        $window.location.href = data.callbackUrl;\r\n                })\r\n                .error(function() {\r\n                    $rootScope.toast('Erro ao obter URL para Minha Conta');\r\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\r\n                    return false;\r\n                });\r\n        };\r\n    }\r\n\r\n}());\r\n","(function () {\r\n\r\n    'use strict';\r\n\r\n    CredentialsService.$inject = [\r\n        'httpService', '$localstorage', 'driveService', 'coreApiService', '$location' ];\r\n\r\n    angular.module('plingUi').service('credentialsService', CredentialsService);\r\n\r\n    function CredentialsService(httpService, $localstorage, driveService, core, $location) {\r\n\r\n        this.logout = function () {\r\n            // Consumir o Core para o token entrar em Blacklist\r\n            httpService.post('accounts', 'logout')\r\n                .success(function() {\r\n                    $localstorage.clearAll();\r\n                    core.redirectToLoginWithCallback();\r\n                })\r\n                .error(function(reason) {\r\n                    // Chamar Toastr\r\n                    console.log(reason); // eslint-disable-line no-console\r\n                });\r\n        };\r\n\r\n        this.get = function (id, cb) {\r\n            httpService.get('accounts', 'credentials', id ? id : '')\r\n            .success(function (data) {\r\n                cb(null, data);\r\n            })\r\n            .error(function (reason) {\r\n                cb(reason);\r\n            });\r\n        };\r\n\r\n        this.create = function (user) {\r\n            return httpService\r\n                .post('accounts', 'credentials', user);\r\n        };\r\n\r\n        this.update = function (user, cb) {\r\n            httpService.put('accounts', 'credentials', user)\r\n                .success(function (data) {\r\n                    cb(null, data);\r\n                })\r\n                .error(function (reason) {\r\n                    cb(reason);\r\n                });\r\n        };\r\n\r\n        this.delete = function (userId, cb) {\r\n            httpService.delete('accounts', 'credentials/delete', userId)\r\n                .success(function (data) {\r\n                    cb(null, data);\r\n                })\r\n                .error(function (reason) {\r\n                    cb(reason);\r\n                });\r\n        };\r\n\r\n        this.getLocal = function () {\r\n            var userData = $localstorage.get('PLING-USER');\r\n\r\n            if (!userData) return null;\r\n\r\n            userData = JSON.parse(userData);\r\n            return userData;\r\n        };\r\n\r\n        this.getProfileImage =  function (imageDriveId, cb) {\r\n            var type = 'base64';\r\n\r\n            if (!imageDriveId)\r\n                return cb(null);\r\n\r\n            driveService.getFile(imageDriveId, type)\r\n                .success(function(data) {\r\n                    return cb(data);\r\n                })\r\n                .error(function() {\r\n                    return cb(null);\r\n                });\r\n\r\n        };\r\n\r\n        this.setViewPreference = function (view, cb) {\r\n            var currentApp, currentModule;\r\n\r\n            cb = cb || function () {};\r\n\r\n            currentApp = JSON.parse($localstorage.get('PLING-APPS')).filter(function(appItem) {\r\n                return appItem.appModule === $localstorage.get('PLING-CURRENT-APP');\r\n            });\r\n\r\n            currentModule = JSON.parse($localstorage.get('PLING-MODULES')).filter(function(moduleItem) {\r\n                return moduleItem.route === $location.path();\r\n            });\r\n\r\n            if (currentApp.length === 0 || currentModule.length === 0)\r\n                return cb('Modulo não encontrado');\r\n\r\n            httpService.post('accounts', 'credentials/view-preference', { 'module_id': currentModule[0]._id, 'product_id': currentApp[0]._id, 'viewPreference': view })\r\n                .success(function(viewPreference) {\r\n                    var items = JSON.parse($localstorage.get('PLING-CURRENT-VIEW-PREFERENCES'));\r\n\r\n                    if (items.length > 0) {\r\n                        items.map(function(item) {\r\n                            if (item.product_id === currentApp[0]._id && item.module_id === currentModule[0]._id)\r\n                                item.viewPreference = viewPreference.viewPreference;\r\n\r\n                            return item;\r\n                        });\r\n                    } else {\r\n                        items.push(viewPreference);\r\n                    }\r\n\r\n                    $localstorage.set('PLING-CURRENT-VIEW-PREFERENCES', JSON.stringify(items));\r\n\r\n                    cb(null, viewPreference);\r\n                })\r\n                .error(function (reason) {\r\n                    cb(reason);\r\n                });\r\n        };\r\n\r\n        this.getViewPreference = function() {\r\n            var currentApp, currentModule, viewPreferences;\r\n\r\n            viewPreferences = $localstorage.get('PLING-CURRENT-VIEW-PREFERENCES');\r\n            if (!viewPreferences)\r\n                return null;\r\n\r\n            currentApp = JSON.parse($localstorage.get('PLING-APPS')).filter(function(appItem) {\r\n                return appItem.appModule === $localstorage.get('PLING-CURRENT-APP');\r\n            });\r\n\r\n            currentModule = JSON.parse($localstorage.get('PLING-MODULES')).filter(function(moduleItem) {\r\n                return moduleItem.route === $location.path();\r\n            });\r\n\r\n            if (currentApp.length === 0 || currentModule.length === 0)\r\n                return null;\r\n\r\n            viewPreferences = JSON.parse(viewPreferences).filter(function(item) {\r\n                return currentApp[0]._id === item.product_id && currentModule[0]._id === item.module_id;\r\n            });\r\n\r\n            if (viewPreferences.length > 0)\r\n                return viewPreferences[0].viewPreference;\r\n\r\n            return null;\r\n        };\r\n\r\n    }\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function DriveService(httpService) {\r\n\r\n        this.getFile = function(imageDriveId, type) {\r\n            return httpService.get('drive', '', imageDriveId + '/' + type);\r\n        };\r\n\r\n        this.getTree = function (credential_id) {\r\n            return httpService.get('drive', credential_id);\r\n        };\r\n\r\n    }\r\n\r\n    DriveService.$inject = [ 'httpService' ];\r\n\r\n    angular.module('plingUi').service('driveService', DriveService);\r\n\r\n}());\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUi')\r\n        .service('elasticSearchApiService', ElasticSearchApi);\r\n\r\n    ElasticSearchApi.$inject = ['httpService'];\r\n\r\n    function ElasticSearchApi(httpService) {\r\n\r\n        this.getDocument = getDocument;\r\n        this.suggest     = suggest;\r\n\r\n        /**\r\n         * Get a document by id\r\n         * @param {String} index Index name\r\n         * @param {String} entity Type name\r\n         * @param {String} id primarykey\r\n         * @param {Function} cb callback\r\n         * @public\r\n         */\r\n        function getDocument(index, entity, id, cb) {\r\n            if (index && entity) {\r\n                httpService.get('smart', buildUrl(index, entity), id ? id : '').success(function (data) {\r\n                    cb(null, data);\r\n                }).error(function (reason) {\r\n                    cb(reason);\r\n                });\r\n            } else {\r\n                cb(new Error('ElasticSearch paramenters missed'));\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Get documents by a suggest query\r\n         * @param {String} index Index name\r\n         * @param {String} entity Type name\r\n         * @param {String} term Search term\r\n         * @param {String[]|null} source Fields to return\r\n         * @param {Object[]|null} additionalQuery API query\r\n         * @param {Integer} size Limit documents\r\n         * @param {Function} cb callback\r\n         * @public\r\n         */\r\n        function suggest(index, entity, term, source, additionalQuery, size, cb) {\r\n\r\n            if (term && index && entity) {\r\n                httpService.post('smart', buildUrl(index, entity + '/suggest/'), {\r\n                    'term'            : term,\r\n                    'source'          : source,\r\n                    'additionalQuery' : additionalQuery,\r\n                    'size'            : size\r\n                }).success(function (data) {\r\n                    data = data && data.hits && data.hits.hits ? data.hits.hits : [];\r\n                    cb(null, data);\r\n                }).error(function (reason) {\r\n                    cb(reason);\r\n                });\r\n            } else {\r\n                cb(new Error('ElasticSearch paramenters missed'));\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build ElasticSearch api url\r\n         * @param {String} index Index name\r\n         * @param {String} entity Type name\r\n         * @returns {String} complete url\r\n         */\r\n        function buildUrl(index, entity) {\r\n            return 'elastic/' + index + '/' + entity;\r\n        }\r\n    }\r\n\r\n}());","(function () {\r\n    'use strict';\r\n\r\n    function HttpHelperService($http, core, $q) {\r\n\r\n        var groups = {};\r\n\r\n        this.registerUrl = function (url, groupName) {\r\n            var defer;\r\n\r\n            if (!groupName)\r\n                groupName = 'default';\r\n\r\n            if (!groups[groupName]) {\r\n                defer = $q.defer();\r\n                groups[groupName] = defer;\r\n            } else\r\n                defer = groups[groupName];\r\n\r\n            return defer.promise;\r\n        };\r\n\r\n        this.cancelRequest = function (groupName) {\r\n            if (!groupName)\r\n                groupName = 'default';\r\n\r\n            groups[groupName].resolve('cancelled');\r\n            delete groups[groupName];\r\n        };\r\n    }\r\n\r\n    HttpHelperService.$inject = [ '$http', 'coreApiService', '$q' ];\r\n\r\n    angular.module('plingUi').service('httpHelperService', HttpHelperService);\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function HttpService($http, core) {\r\n\r\n        this.save = function (app, module, data) {\r\n            return $http.post(core.getAppCoreUrl(app, module), data);\r\n        };\r\n\r\n        this.update = function (app, module, data) {\r\n            return $http.put(core.getAppCoreUrl(app, module), data);\r\n        };\r\n\r\n        this.upload = function (app, module, file) {\r\n            return $http\r\n               .post(core.getAppCoreUrl(app, module), file, {\r\n                   'transformRequest' : angular.identity,\r\n                   'headers'          : { 'Content-Type': undefined }  // eslint-disable-line\r\n               });\r\n        };\r\n\r\n        this.get = function (app, module, id) {\r\n            var url = core.getAppCoreUrl(app, module),\r\n                type;\r\n\r\n            if (id) {\r\n                url += '/' + id;\r\n            } else if (module.indexOf('public') > 0) {\r\n                type = {\r\n                    'responseType': 'arraybuffer'\r\n                };\r\n            }\r\n            return $http.get(url, type);\r\n        };\r\n\r\n        this.getImage = function (url, cb) {\r\n            this.get('credentials/public?imagepath=' + url)\r\n                .success(function (imageDownloadData) {\r\n                    var blob   = new Blob([ imageDownloadData ], { 'type': 'image/jpeg' }),\r\n                        reader = new FileReader();\r\n\r\n                    reader.readAsDataURL(blob);\r\n                    reader.onloadend = function () {\r\n                        cb(null, reader.result);\r\n                    };\r\n                    // cb(null, objectUrl);\r\n                })\r\n                .error(function (err) {\r\n                    cb(err);\r\n                });\r\n        };\r\n\r\n        this.post = function (app, module, data) {\r\n            var req = {\r\n                'method'  : 'POST',\r\n                'url'     : core.getAppCoreUrl(app, module),\r\n                'headers' : {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                'data': data\r\n            };\r\n\r\n            return $http(req);\r\n        };\r\n\r\n        this.put = function (app, module, data) {\r\n            var req = {\r\n                'method'  : 'PUT',\r\n                'url'     : core.getAppCoreUrl(app, module),\r\n                'headers' : {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                'data': data\r\n            };\r\n\r\n            return $http(req);\r\n        };\r\n\r\n        this.delete = function (app, module, id) {\r\n            var req = {\r\n                'method'  : 'DELETE',\r\n                'url'     : core.getAppCoreUrl(app, module) + '/' + id,\r\n                'headers' : {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            };\r\n\r\n            return $http(req);\r\n        };\r\n\r\n    }\r\n\r\n    HttpService.$inject = [ '$http', 'coreApiService', 'httpHelperService' ];\r\n\r\n    angular.module('plingUi').service('httpService', HttpService);\r\n\r\n}());\r\n","(function () {\r\n\r\n    'use strict';\r\n\r\n    function ProfilesService(httpService) {\r\n\r\n        this.getProfileDefault = function (cb) {\r\n            httpService.get('accounts', 'profiles/profile-default')\r\n            .success(function (data) {\r\n                cb(null, data);\r\n            })\r\n            .error(function (reason) {\r\n                cb(reason);\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n    ProfilesService.$inject = [\r\n        'httpService' ];\r\n\r\n    angular.module('plingUi').service('profilesService', ProfilesService);\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function TokenService($http, $localstorage, coreApiService) {\r\n\r\n        this.get = function() {\r\n            return $localstorage.get('PLING-TOKEN');\r\n        };\r\n\r\n        this.set = function(token) {\r\n            if (token) {\r\n                $localstorage.set('PLING-TOKEN', token);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.validate = function (cb) {\r\n            $http.get(coreApiService.getAppCoreUrl('accounts', 'me'))\r\n                .success(function(credentialData) {\r\n                    cb(null, credentialData);\r\n                })\r\n                .error(function(reason) {\r\n                    cb(reason);\r\n                });\r\n        };\r\n\r\n    }\r\n\r\n    TokenService.$inject = [ '$http', '$localstorage', 'coreApiService' ];\r\n\r\n    angular.module('plingUi').service('tokenService', TokenService);\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function WebsocketService($rootScope, $window, $timeout, core) {\r\n\r\n        var\r\n            socket,\r\n            currentToken = $window.localStorage.getItem('PLING-TOKEN'),\r\n            coreUrl      = core.getAppCoreUrl().replace('/api/v1', '');\r\n\r\n        this.getInstance = function() {\r\n            return socket;\r\n        };\r\n\r\n        this.connect = function() {\r\n\r\n            try {\r\n\r\n                if ($rootScope.websocket) return false;\r\n                if (!io) return false; // eslint-disable-line\r\n\r\n                $rootScope.isWebsocketConnected = false;\r\n                $rootScope.isWebsocketLoading   = true;\r\n\r\n                socket = io(coreUrl, { // eslint-disable-line\r\n                    'query'      : 'token=' + currentToken,\r\n                    'transports' : [ 'websocket' ]\r\n                });\r\n\r\n                socket.on('connect_timeout', function() {\r\n                    $timeout(function() {\r\n                        $rootScope.isWebsocketLoading   = false;\r\n                        $rootScope.isWebsocketConnected = false;\r\n                        $rootScope.websocket            = null;\r\n                    });\r\n                });\r\n\r\n                socket.on('connect_error', function() {\r\n                    $timeout(function() {\r\n                        var errorObj = {\r\n                            'error': 'CONNECTION_ERROR'\r\n                        };\r\n\r\n                        $rootScope.isWebsocketLoading   = false;\r\n                        $rootScope.isWebsocketConnected = false;\r\n                        $rootScope.websocket            = null;\r\n\r\n                        $rootScope.$broadcast('PLING-WEBSOCKET-ERROR', errorObj);\r\n                    });\r\n                });\r\n\r\n                socket.on('connect', function() {\r\n                    var self = this;\r\n\r\n                    $timeout(function() {\r\n                        $rootScope.websocket            = self;\r\n                        $rootScope.isWebsocketConnected = true;\r\n                        $rootScope.isWebsocketLoading   = false;\r\n                    });\r\n                });\r\n\r\n                socket.on('reconnecting', function() {\r\n                    $timeout(function() {\r\n                        $rootScope.isWebsocketConnected = false;\r\n                        $rootScope.isWebsocketLoading   = true;\r\n                        $rootScope.websocket            = null;\r\n                    });\r\n                });\r\n\r\n                socket.on('reconnect_error', function() {\r\n                    $timeout(function() {\r\n                        $rootScope.isWebsocketLoading   = false;\r\n                        $rootScope.isWebsocketConnected = false;\r\n                        $rootScope.websocket            = null;\r\n                    });\r\n                });\r\n\r\n                socket.on('error', function() {\r\n                    $timeout(function() {\r\n                        $rootScope.isWebsocketLoading   = false;\r\n                        $rootScope.isWebsocketConnected = false;\r\n                        $rootScope.websocket            = null;\r\n                    });\r\n                });\r\n\r\n            } catch (err) {\r\n                $timeout(function() {\r\n                    $rootScope.isWebsocketLoading   = false;\r\n                    $rootScope.isWebsocketConnected = false;\r\n                    $rootScope.websocket            = null;\r\n                });\r\n            }\r\n        };\r\n\r\n        this.send = function(channel, message) {\r\n            if (!$rootScope.websocket) throw new Error('Websocket is null');\r\n\r\n            $rootScope.websocket.emit(channel, message);\r\n        };\r\n    }\r\n\r\n    WebsocketService.$inject = [ '$rootScope', '$window', '$timeout', 'coreApiService' ];\r\n\r\n    angular.module('plingUi').service('websocketService', WebsocketService);\r\n\r\n}());\r\n","(function (context, logger) {\r\n    'use strict';\r\n\r\n    // creating namespace\r\n    function Bootstrapper() {\r\n        this.isBootstrapped = false;\r\n    }\r\n\r\n    // boot a module\r\n    Bootstrapper.prototype.Angular = function (root, appname, source, cb) {\r\n        var self = this;\r\n\r\n        window.localStorage.setItem('PLING-CURRENT-APP', appname);\r\n\r\n        // loading file\r\n        context.loader.load(source, function (err, options) {\r\n\r\n            var\r\n                token         = window.localStorage['PLING-TOKEN'],\r\n                queryString   = window.localStorage['PLING-QUERY-STRING'] || window.location.search,\r\n                coreUrl       = options.core_url,\r\n                environment   = options.environment,\r\n                defApiVersion = options.def_api_version,\r\n                initInjector  = angular.injector(['ng']),\r\n                $http         = initInjector.get('$http'),\r\n                currentUrl    = window.location.href,\r\n                localCallbackUrl;\r\n\r\n            window.localStorage.setItem('PLING-CURRENT-ENV', environment);\r\n\r\n            // checking errors...\r\n            if (err) {\r\n                logger.warn('Arquivo de configuracao nao encontrado!');\r\n                logger.debug(err);\r\n\r\n                return false;\r\n            }\r\n\r\n            // Sem validacao, aplicacao site\r\n            if ('auth' in options && options.auth === false) {\r\n                window.localStorage.setItem('PLING-TOKEN', false);\r\n                return false;\r\n            }\r\n\r\n            // checking for the token\r\n            if (!token && queryString.indexOf('token=') === 1) {\r\n                window.localStorage.setItem('PLING-TOKEN', queryString.split('=')[1]);\r\n            }\r\n\r\n            // if there's no token it must redirect to login\r\n            if (!token && coreUrl) {\r\n                window.localStorage.clear();\r\n                localCallbackUrl = currentUrl ? '?callbackurl=' + currentUrl : '';\r\n                $http\r\n                    .get(coreUrl + defApiVersion + '/accounts/products/Login/' + environment)\r\n                    .success(function(urlData) {\r\n                        window.location.href = urlData.callbackUrl + localCallbackUrl;\r\n                        return false;\r\n                    })\r\n                    .error(function(reason) {\r\n                        logger.error(reason);\r\n                        return false;\r\n                    });\r\n            }\r\n\r\n            // else it must validate it and then start the application\r\n            else {\r\n                $http\r\n                    .get(coreUrl + defApiVersion + '/accounts/me' + '?appmodule=' + appname + '&environment=' + environment, {\r\n                        'headers': { 'Authorization': token }\r\n                    })\r\n                    .success(function(credentialData) {\r\n\r\n                        window.localStorage.setItem('PLING-APPS', JSON.stringify(credentialData.profilesProducts));\r\n\r\n                        if (credentialData.modules) {\r\n                            window.localStorage.setItem('PLING-MODULES', JSON.stringify(credentialData.modules));\r\n\r\n                            pling.loader.settings.menu    = []; // eslint-disable-line\r\n                            pling.loader.settings.submenu = []; // eslint-disable-line\r\n\r\n                            credentialData.modules.forEach(function(module) {\r\n                                if (module.config.isSubMenu) {\r\n                                    pling.loader.settings.submenu.push(module); // eslint-disable-line\r\n                                } else if (module.config.isMenu && !module.config.isSubMenu) {\r\n                                    pling.loader.settings.menu.push(module);    // eslint-disable-line\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        if (credentialData.viewPreferences)\r\n                            window.localStorage.setItem('PLING-CURRENT-VIEW-PREFERENCES', JSON.stringify(credentialData.viewPreferences));\r\n\r\n                        delete credentialData.profilesProducts;\r\n                        delete credentialData.iat;\r\n                        delete credentialData.exp;\r\n\r\n                        window.localStorage.setItem('PLING-USER', JSON.stringify(credentialData));\r\n\r\n                        // saving boot settings\r\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\r\n\r\n                        // starting app\r\n                        angular.bootstrap(root, [appname]);\r\n                        self.isBootstrapped = true;\r\n\r\n                        // calling callback\r\n                        if (cb) cb();\r\n                    })\r\n                    .error(function(reason) {\r\n                        logger.error(reason);\r\n                        window.localStorage.clear();\r\n                        localCallbackUrl = currentUrl ? '?callbackurl=' + currentUrl : '';\r\n                        $http\r\n                            .get(coreUrl + defApiVersion + '/accounts/Login/' + environment)\r\n                            .success(function(urlData) {\r\n                                window.location.href = urlData.callbackUrl + localCallbackUrl;\r\n                                return false;\r\n                            })\r\n                            .error(function(reason) {\r\n                                logger.error(reason);\r\n                                return false;\r\n                            });\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    // creating instance\r\n    context.boot = new Bootstrapper();\r\n\r\n}(window.pling, window.console));\r\n","(function (dom, logger, context) {\r\n    'use strict';\r\n\r\n    // Content Loaded listener\r\n    function onDOMLoaded() {\r\n\r\n        // detect angular application 'directive'\r\n        var root,\r\n            directive = 'plg-app',\r\n            source    = 'src',\r\n            filter    = '[' + directive + ']';\r\n\r\n        // retrieving root element\r\n        root = dom.querySelector(filter);\r\n\r\n        // working on root\r\n        if (root) {\r\n\r\n            // retrieving app name\r\n            context.name   = root.getAttribute(directive);\r\n            context.source = root.getAttribute(source) || 'pling.conf.json';\r\n\r\n            // loading config file\r\n            logger.info('AngularJS 1.5.x spa check:', true);\r\n            context.boot.Angular(root, context.name, context.source, function (err) {\r\n\r\n                if (err) logger.error('Could not boot app ', context.name);\r\n                else logger.info('Bootstrapped:', context.boot.isBootstrapped);\r\n\r\n            });\r\n\r\n        } else {\r\n            logger.info('AngularJS 1.5.x spa check:', false);\r\n        }\r\n    }\r\n\r\n    dom.addEventListener('DOMContentLoaded', onDOMLoaded);\r\n\r\n}(document, window.console, window.pling));\r\n","/* global window, XMLHttpRequest */\r\n(function (context) {\r\n    'use strict';\r\n    // creating namespace\r\n    function ConfLoader() {\r\n        this.settings = null;\r\n    }\r\n\r\n    // loading file\r\n    ConfLoader.prototype.load = function (filepath, cb) {\r\n        var self = this,\r\n            parsed,\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // sending result\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n\r\n                    parsed = JSON.parse(xhr.responseText);\r\n                    self.settings = parsed;\r\n\r\n                    cb(null, parsed);\r\n                } else {\r\n                    cb('Error loading file - status ' + xhr.status, {});\r\n                }\r\n            }\r\n        };\r\n\r\n        // handling error\r\n        xhr.onerror = function (err) {\r\n            cb(err);\r\n        };\r\n\r\n        // fetching file\r\n        xhr.open('GET', filepath, true);\r\n        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n        xhr.send();\r\n    };\r\n\r\n    // creating instance\r\n    context.loader = new ConfLoader();\r\n}(window.pling));\r\n","/* global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    function CachingService($templateCache, $route, $http) {\r\n\r\n\r\n        this.cacheViews = function (cacheObj, routeObj) {\r\n            // setting defaults\r\n            var partial, r,\r\n                viewCache = cacheObj || $templateCache,\r\n                router = routeObj || $route;\r\n\r\n            // looping routes\r\n            for (r in router.routes) {\r\n                // jslint -object protection\r\n                if (router.routes.hasOwnProperty(r)) {\r\n                    // evaluate partial\r\n                    partial = router.routes[r].templateUrl;\r\n                    if (partial) {\r\n                        // caching route\r\n                        $http.get(partial, {'cache': viewCache});\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    CachingService.$inject = ['$templateCache', '$route', '$http'];\r\n\r\n    // registering service\r\n    angular.module('plingUi').service('cacheService', CachingService);\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function $LocalStorage($window) {\r\n        return {\r\n\r\n            'clearAll': function () {\r\n                $window.localStorage.clear();\r\n            },\r\n\r\n            'set': function (key, value) {\r\n                $window.localStorage[key] = value;\r\n            },\r\n\r\n            'get': function (key) {\r\n                return $window.localStorage[key];\r\n            },\r\n\r\n            'setObject': function (key, value) {\r\n                $window.localStorage[key] = JSON.stringify(value);\r\n            },\r\n\r\n            'getObject': function (key) {\r\n                return JSON.parse($window.localStorage[key] || '{}');\r\n            }\r\n        };\r\n    }\r\n\r\n    $LocalStorage.$inject = [ '$window' ];\r\n\r\n    angular.module('plingUi').service('$localstorage', $LocalStorage);\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function $SessionStorage($window) {\r\n        return {\r\n\r\n            'clearAll': function () {\r\n                $window.localStorage.clear();\r\n            },\r\n\r\n            'set': function (key, value) {\r\n                $window.localStorage[key] = value;\r\n            },\r\n\r\n            'get': function (key) {\r\n                return $window.localStorage[key];\r\n            },\r\n\r\n            'setObject': function (key, value) {\r\n                $window.localStorage[key] = JSON.stringify(value);\r\n            },\r\n\r\n            'getObject': function (key) {\r\n                return JSON.parse($window.localStorage[key] || '{}');\r\n            }\r\n        };\r\n    }\r\n\r\n    $SessionStorage.$inject = [ '$window' ];\r\n\r\n    angular.module('plingUi').service('sessionstorage', $SessionStorage);\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    function ToastrService() {\r\n\r\n        // this.emit = function(message, type) {\r\n        //     $mdToast.show(\r\n        //         $mdToast.simple()\r\n        //             .textContent(message)\r\n        //             .position($scope.getToastPosition())\r\n        //             .hideDelay(delay || 2000)\r\n        //     );\r\n        // };\r\n\r\n    }\r\n\r\n    ToastrService.$inject = [ '$mdToast' ];\r\n\r\n    angular.module('plingUi').service('toastrService', ToastrService);\r\n\r\n}());\r\n","(function () {\r\n    'use strict';\r\n\r\n    PlingRequestInterceptor.$inject = [ '$q', '$window' ];\r\n\r\n    angular.module('plingUi').factory('plingRequestInterceptor', PlingRequestInterceptor);\r\n\r\n    function PlingRequestInterceptor($q, $window) {\r\n\r\n        return {\r\n\r\n            // On request\r\n            'request': function (config) {\r\n                var isAuth = $window.localStorage.getItem('PLING-TOKEN');\r\n\r\n                // Add Token info to every request\r\n                if (isAuth !== false)\r\n                    config.headers.Authorization = $window.localStorage.getItem('PLING-TOKEN');\r\n\r\n                return config;\r\n            },\r\n\r\n            // On request error\r\n            'requestError': function (reason) {\r\n\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            },\r\n\r\n            // On response success\r\n            'response': function (response) {\r\n\r\n                // Return the response or promise.\r\n                return response || $q.when(response);\r\n            },\r\n\r\n            // On response error\r\n            'responseError': function (reason) {\r\n\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n}(document, window.console, window.pling));\r\n","/* global angular, console */\r\n(function () {\r\n    'use strict';\r\n\r\n    // defining behaviour\r\n    function PlingUiExceptionHandler($injector) {\r\n\r\n        return function (exception, cause) {\r\n\r\n            // preparing message to be dispatched\r\n            var dispatcher = null,\r\n                logger = null,\r\n                data = {\r\n                    'error': exception,\r\n                    'details': cause\r\n                };\r\n\r\n            // logging\r\n            logger = $injector.get('$log');\r\n            logger.error(exception);\r\n\r\n            if (cause) {\r\n                logger.debug(cause);\r\n            }\r\n\r\n            // dispatching message\r\n            dispatcher = $injector.get('$rootScope');\r\n            dispatcher.$broadcast('PLINGUI_INTERNAL_ERROR', data);\r\n        };\r\n    }\r\n\r\n    // injecting\r\n    PlingUiExceptionHandler.$inject = ['$injector'];\r\n\r\n    // registering on angular\r\n    angular\r\n        .module('plingUi')\r\n        .factory('$exceptionHandler', PlingUiExceptionHandler);\r\n\r\n}());\r\n","/* global angular, console */\r\n(function () {\r\n    'use strict';\r\n\r\n    // logger definition\r\n    function PlingUiLogger() {\r\n        return function ($delegate) {\r\n            return {\r\n                'dispatch': function (method, params) {\r\n                    // defining method\r\n                    var proc = $delegate[method] || $delegate.log,\r\n                        stamp = new Date().toString(),\r\n                        prefix = '[' + stamp + '][' + method + ']::',\r\n                        msg = [],\r\n                        arg;\r\n\r\n                    if (method) {\r\n                        // preparing msg\r\n                        msg.push(prefix);\r\n\r\n                        // joining params\r\n                        for (arg in params) {\r\n                            if (params.hasOwnProperty(arg)) {\r\n                                msg.push(params[arg]);\r\n                            }\r\n                        }\r\n\r\n                        // applying log info\r\n                        proc.apply(null, msg);\r\n                    }\r\n                },\r\n\r\n                'log': function () {\r\n                    this.dispatch('log', arguments);\r\n                },\r\n\r\n                'info': function () {\r\n                    this.dispatch('info', arguments);\r\n                },\r\n\r\n                'error': function () {\r\n                    this.dispatch('error', arguments);\r\n                },\r\n\r\n                'warn': function () {\r\n                    this.dispatch('warn', arguments);\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    // registering on angular\r\n    angular\r\n        .module('plingUi')\r\n        .factory('shadowLogger', PlingUiLogger);\r\n}());\r\n","angular.module(\"plingUi.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"plg-app-bar.html\",\"<md-toolbar ng-class=\\\"{\\'toolbar-container-with-menu\\': hasMenu}\\\" class=toolbar-container><md-menu class=menu-content md-offset=\\\"0 47\\\"><md-button class=current-app-button ng-click=\\\"openMenu($mdOpenMenu, $event)\\\"><div layout=row><md-icon class=\\\"icon app-icon\\\" md-svg-src=\\\"{{ currentApp.iconPath }}\\\"></md-icon>{{currentApp.name}}<md-icon class=icon md-svg-src=../../../vendor/pling-ui/assets/icons/icon_expand.svg></md-icon></div></md-button><md-menu-content width=4 class=menu-content-app><md-menu-item ng-repeat=\\\"app in applications\\\"><md-button ng-click=getCallbackUrl(app)><div layout=row><md-icon class=\\\"icon apps-icon-menu\\\" md-svg-src=\\\"{{ app.iconPath }}\\\"></md-icon><p flex=\\\"\\\">{{ app.name }}</p></div></md-button></md-menu-item></md-menu-content></md-menu><md-divider></md-divider></md-toolbar>\");\n$templateCache.put(\"myComponentSample.html\",\"<div class=myComponentSample>My Component Sample: <span ng-bind=tagline></span></div>\");\n$templateCache.put(\"plgCalendar.html\",\"<div class=plg-calendar-container><div layout=row layout-align=\\\"space-between center\\\" class=plg-calendar-sidebarCalendar-header><div class=plg-calendar-sidebarCalendar-sub-header layout=row ng-class=\\\"{ \\'plg-calendar-year-colunm\\': $ctrl.monthsLimit < 2, \\'plg-calendar-sidebarCalendar-sub-header-2\\': $ctrl.monthsLimit > 1 }\\\"><div flex=100><md-button aria-label=\\\"previous month\\\" class=\\\"md-icon-button plg-calendar-year-button\\\" ng-click=\\\"$ctrl.prevDate(\\'year\\');\\\" md-prevent-menu-close=true><md-icon>keyboard_arrow_left</md-icon></md-button></div><span flex=100 style=\\\"margin-top:11px;min-width: 55px;font-size: 14px;\\\">{{ $ctrl.todayYear }}</span><div flex=100><md-button aria-label=\\\"next month\\\" class=\\\"md-icon-button plg-calendar-year-button\\\" ng-click=\\\"$ctrl.nextDate(\\'year\\');\\\" md-prevent-menu-close=true><md-icon>keyboard_arrow_right</md-icon></md-button></div></div><div layout=row layout-align=\\\"space-between center\\\" class=plg-calendar-monthyear ng-if=\\\"$ctrl.monthsLimit < 2\\\" style=\\\"margin-bottom: 10px;\\\"><md-button aria-label=\\\"previous month\\\" class=\\\"md-icon-button plg-calendar-year-button\\\" ng-click=\\\"$ctrl.prevDate(\\'month\\');\\\" md-prevent-menu-close=true><md-icon>keyboard_arrow_left</md-icon></md-button>{{ $ctrl.getMonth(i) }}<md-button aria-label=\\\"next month\\\" class=\\\"md-icon-button plg-calendar-year-button\\\" ng-click=\\\"$ctrl.nextDate(\\'month\\');\\\" md-prevent-menu-close=true><md-icon>keyboard_arrow_right</md-icon></md-button></div><div class=plg-calendar-fast-actions ng-class=\\\"{\\'plg-calendar-fast-actions-2\\': $ctrl.monthsLimit > 1 }\\\"><md-button ng-if=!$ctrl.disableDayChoice class=md-primary md-prevent-menu-close=true ng-click=$ctrl.setToday()>Hoje</md-button><md-button ng-if=\\\"!$ctrl.disableRange && !$ctrl.disableMonthChoice\\\" class=md-primary md-prevent-menu-close=true ng-click=$ctrl.setThisMonth()>Mês</md-button><md-button ng-if=\\\"!$ctrl.disableRange && !$ctrl.disableYearChoice\\\" class=md-primary md-prevent-menu-close=true ng-click=$ctrl.setThisYear()>Ano</md-button></div></div><div class=plg-calendar-sidebarCalendar><div layout=column layout-align=\\\"start center\\\" class=plg-calendar-calendar ng-repeat=\\\"i in $ctrl.monthsNumbers\\\"><div layout=row layout-align=\\\"space-between center\\\" class=plg-calendar-monthyear ng-if=\\\"$ctrl.monthsLimit > 1\\\"><md-button aria-label=\\\"previous month\\\" class=md-icon-button ng-click=\\\"$ctrl.prevDate(\\'month\\');\\\" md-prevent-menu-close=true><md-icon>keyboard_arrow_left</md-icon></md-button>{{ $ctrl.getMonth(i) }}<md-button aria-label=\\\"next month\\\" class=md-icon-button ng-click=\\\"$ctrl.nextDate(\\'month\\');\\\" md-prevent-menu-close=true><md-icon>keyboard_arrow_right</md-icon></md-button></div><div layout=row layout-align=\\\"space-around center\\\" class=plg-calendar-week-days><div class=md-body-2 layout=\\\"\\\" layout-align=\\\"center center\\\" ng-repeat=\\\"d in $ctrl.weekDays track by $index\\\">{{ d }}</div></div><div layout=row layout-wrap=\\\"\\\" class=plg-calendar-days><div layout=\\\"\\\" layout-align=\\\"center center\\\" ng-repeat-start=\\\"objD in $ctrl.daysInMonth[i] track by $index\\\"><md-button class=\\\"md-icon-button md-raised\\\" aria-label=\\\"Selecionar dia\\\" ng-if=\\\"objD.day !== false\\\" md-prevent-menu-close=true ng-class=\\\"{\\'md-primary\\': $ctrl.isSelected(objD.day, i), \\'plg-calendar-days-in-range\\': $ctrl.isInRange(objD.day, i), \\'plg-calendar-today\\': $ctrl.isToday(objD.day, i), \\'plg-calendar-event\\': objD.events && objD.events.length > 0 && !$ctrl.isSelected(objD.day, i) && !$ctrl.isInRange(objD.day, i)}\\\" ng-click=\\\"$ctrl.selectDate(objD.day, i)\\\">{{ objD.day }}</md-button></div><div flex=\\\"\\\" ng-if=\\\"($index + 1) % 7 == 0\\\" ng-repeat-end=\\\"\\\"></div></div></div><div style=\\\"clear: both;\\\"></div></div></div>\");\n$templateCache.put(\"plgComboBox.html\",\"<span class=formCombo ng-if=$ctrl.loadingStart><md-input-container><label ng-class=\\\"{\\'md-multiple-select-label\\': $ctrl.focusChoice || $ctrl.selectChoiceName.length > 0, \\'md-multiple-select-label-nofocus\\': $ctrl.focusBlur && !$ctrl.focusChoice && $ctrl.selectChoiceName.length === 0, \\'errors-combo-box-label\\': $ctrl.params.isRequired && $ctrl.focusBlur && !$ctrl.focusChoice && $ctrl.selectChoiceName.length === 0}\\\">{{$ctrl.params.label}}</label><div flex=\\\"\\\" class=md-multiple-select ng-click=\\\"$ctrl.focus(this, $event)\\\"><span class=md-multiple-select-text>{{$ctrl.selectChoiceName}}</span> <span class=md-multiple-select-icon><i class=material-icons>arrow_drop_down</i></span><md-divider class=md-default-theme ng-class=\\\"{\\'errors-combo-box-divider\\': $ctrl.params.isRequired && $ctrl.focusBlur && !$ctrl.focusChoice && $ctrl.selectChoiceName.length === 0}\\\"></md-divider></div><div class=errors-combo-box ng-if=\\\"$ctrl.params.isRequired && $ctrl.focusBlur && !$ctrl.focusChoice && $ctrl.selectChoiceName.length === 0\\\"><div>{{$ctrl.params.requiredMessage}}</div></div><div flex=\\\"\\\" class=\\\"md-multiple-select-choice md-whiteframe-1dp\\\" ng-if=$ctrl.focusChoice><span flex=\\\"\\\" class=md-multiple-select-choice-insert ng-show=!$ctrl.params.isNotSearch><input type=text placeholder=Pesquisar ng-model=$ctrl.filterSelect id=$ctrl.params.ref {$ctrl.params.maxlength=\\\"\\\" ?=\\\"\\\" maxlength=$ctrl.params.maxlength }=\\\"\\\"> <a ng-show=!$ctrl.loading ng-click=$ctrl.saveChoice(this) ng-if=\\\"$ctrl.addChoice && $ctrl.params.isInsert\\\" md-prevent-menu-close=md-prevent-menu-close>Adicionar</a><md-icon ng-show=$ctrl.loading md-svg-src=/assets/img/icone_loading.svg aria-label=loading></md-icon></span> <span flex=\\\"\\\" ng-class=\\\"{\\'md-multiple-select-padding\\': $ctrl.params.isNotSearch}\\\" layout=row layout-align=\\\"start center\\\" class=md-multiple-select-choice-all-none ng-if=\\\"$ctrl.filterChoices(this, $ctrl.filterSelect).length > 0 && ($ctrl.params.isMultiple || (!$ctrl.params.isMultiple && !$ctrl.params.isRequired))\\\"><a ng-if=$ctrl.params.isMultiple ng-click=\\\"$ctrl.allNoneChoice(this, $ctrl.filterChoices(this, $ctrl.filterSelect), \\'check_box\\')\\\" md-prevent-menu-close=md-prevent-menu-close>Todos</a> <a ng-if=$ctrl.params.isMultiple ng-click=\\\"$ctrl.allNoneChoice(this, $ctrl.filterChoices(this, $ctrl.filterSelect), \\'check_box_outline_blank\\')\\\" md-prevent-menu-close=md-prevent-menu-close>Nenhum</a> <a ng-if=\\\"!$ctrl.params.isMultiple && !$ctrl.params.isRequired\\\" ng-click=$ctrl.noneChoice(this)>Nenhum</a></span> <span layout=column layout-align=\\\"start top\\\" ng-class=\\\"{\\'md-multiple-select-choice-list\\': $ctrl.filterChoices(this, $ctrl.filterSelect).length > 5}\\\"><span flex=\\\"\\\" ng-repeat=\\\"choice in $ctrl.filterChoices(this, $ctrl.filterSelect) | orderBy: name\\\" class=md-multiple-select-choice-line ng-class=\\\"{\\'action-mouse\\': actionMouse || choice._id === $ctrl.ngModel || choice.id === $ctrl.ngModel}\\\" ng-click=\\\"$ctrl.selectChoice(this.$ctrl, choice)\\\" ng-mouseover=\\\"actionMouse = true\\\" ng-mouseleave=\\\"actionMouse = false\\\" md-prevent-menu-close=md-prevent-menu-close ng-if=$ctrl.params.isMultiple><span class=md-multiple-select-span-icon><i class=material-icons ng-class=\\\"{\\'action-selected\\': choice.icon === check_box}\\\">{{choice.icon}}</i></span> <span>{{ choice[$ctrl.params.refName] }}</span></span> <span flex=\\\"\\\" ng-repeat=\\\"choice in $ctrl.filterChoices(this, $ctrl.filterSelect) | orderBy: name\\\" class=md-multiple-select-choice-line ng-class=\\\"{\\'action-mouse\\': actionMouse || choice._id === $ctrl.ngModel || choice.id === $ctrl.ngModel}\\\" ng-click=\\\"$ctrl.selectChoice(this.$ctrl, choice)\\\" ng-mouseover=\\\"actionMouse = true\\\" ng-mouseleave=\\\"actionMouse = false\\\" ng-if=!$ctrl.params.isMultiple><span>{{ choice[$ctrl.params.refName] }}</span></span></span></div></md-input-container></span><div ng-class=\\\"{\\'md-multiple-select-div\\': $ctrl.focusChoice}\\\" ng-click=$ctrl.getOut(this)></div><input type=hidden ng-model=$ctrl.ngModel>\");\n$templateCache.put(\"plgDatePicker.html\",\"<form name=datePickerForm><md-menu off-set=\\\"0 10\\\"><md-input-container layout=row class=\\\"md-icon-float md-block plg-date-picker-input-container\\\" ng-class=\\\"{\\'plg-date-picker-input-size-min\\': $ctrl.disableRange}\\\"><label ng-if=$ctrl.label>{{ $ctrl.label }}</label><md-icon ng-click=$mdOpenMenu($event)>date_range</md-icon><input flex=100 ng-model=$ctrl.selected.display ui-mask={{$ctrl.mask}} model-view-value=true ui-options=\\\"{ \\'clearOnBlur\\': false }\\\" aria-label=hidden ng-change=$ctrl.validate($ctrl.selected); ng-blur=$ctrl.setDates($ctrl.selected) ng-class=\\\"{\\'plg-date-picker-input-size-min\\': $ctrl.disableRange}\\\" md-menu-origin=\\\"\\\"><p ng-show=\\\"$ctrl.selected.$invalid && $ctrl.selected && $ctrl.selected.display && $ctrl.selected.display.length > 0\\\" class=help-block>Por favor informe uma data valida.</p></md-input-container><md-menu-content><plg-calendar disable-range=$ctrl.disableRange months-limit=$ctrl.monthsLimit selected=$ctrl.selected disable-day-choice=true disable-month-choice=true disable-year-choice=true style=\\\"margin-top: -5px;overflow: hidden;\\\"></plg-calendar></md-menu-content></md-menu></form>\");\n$templateCache.put(\"plgEditFabSpeedDial.template.html\",\"\");\n$templateCache.put(\"plgElasticSearch.html\",\"<div layout=column style=\\\"position: relative;\\\"><md-autocomplete flex=\\\"\\\" placeholder=Pesquisa md-selected-item=$ctrl.selectedItem md-search-text=$ctrl.searchText md-item-text=item._source[$ctrl.getDocumentName()] md-min-length=1 md-items=\\\"item in $ctrl.querySearch($ctrl.searchText)\\\" md-search-text-change=$ctrl.searchTextChange($ctrl.searchText) md-selected-item-change=$ctrl.selectedItemChange(item) md-no-cache=true ng-keyup=\\\"$event.keyCode == 13 && $ctrl.selectedItemChange($ctrl.items)\\\" ng-click=\\\"$ctrl.showMenu = true\\\"><md-item-template><span md-highlight-text=$ctrl.searchText md-highlight-flags=^i>{{item._source[$ctrl.getDocumentName()]}}</span></md-item-template><md-not-found>Nenhum resultado para \\\"{{$ctrl.searchText}}\\\".</md-not-found></md-autocomplete><div flex=\\\"\\\" ng-if=$ctrl.showMenu class=plg-elastic-search-shit2 layout=row><md-button class=plg-elastic-search-shit ng-repeat=\\\"f in $ctrl.getFields()\\\" ng-click=\\\"f.isSelected = !f.isSelected;\\\" ng-class=\\\"{ \\'plg-es-selected\\': f.isSelected }\\\">{{ f.label }}</md-button></div></div>\");\n$templateCache.put(\"plg-service-bar.html\",\"<md-toolbar class=plg-service-bar-background><div class=md-toolbar-tools><div flex=50 layout=row style=\\\"margin-left: -12px;\\\" class=\\\"flex flex-40 layout layout-row\\\"><div class=plg-service-bar-app-name-container><img src=../../vendor/pling-ui/assets/img/pling_topbar_logo.png class=plg-service-bar-app-name></div><span class=plg-service-bar-current-customer ng-bind=customerName></span></div><section class=plg-service-bar-container style=\\\"flex: 1\\\"><div class=md-toolbar-tools><span flex=\\\"\\\"></span><md-menu md-position-mode=\\\"target-right target\\\" md-offset=\\\"0 68\\\"><md-button class=md-icon-button aria-label=Notificações ng-click=\\\"openMenu($mdOpenMenu, $event)\\\"><i class=material-icons ng-class=\\\"{ \\'plg-service-bar-anim-rotate\\': isNotificationAdded }\\\">notifications</i><div ng-show=\\\"arrayNotifications.length > 0 && $root.isWebsocketConnected && !$root.isWebsocketLoading\\\" class=plg-service-bar-notification-badge>5</div><div ng-hide=\\\"$root.isWebsocketLoading || $root.isWebsocketConnected\\\" style=\\\"color: black\\\" class=\\\"plg-service-bar-notification-badge plg-service-bar-notification-error\\\"><i class=material-icons style=\\\"font-size: 8pt; top: 2px; left: 1px; position: absolute;\\\">close</i></div><div ng-show=$root.isWebsocketLoading class=\\\"plg-service-bar-notification-badge plg-service-bar-notification-loading\\\" style=\\\"color: black\\\"><i class=\\\"material-icons plg-service-bar-refresh-animate\\\" style=\\\"top: 0px; left: 0px;\\\">refresh</i></div></md-button><md-menu-content class=plg-service-bar-notification-window><div class=plg-service-bar-no-notifications ng-show=\\\"arrayNotifications.length === 0 && $root.isWebsocketConnected\\\"><h4 class=plg-service-bar-notifications>Não existem notificações no momento</h4></div><md-menu-item class=plg-service-bar-notification-window-header ng-show=\\\"arrayNotifications.length > 0 && $root.isWebsocketConnected\\\"><h4 class=plg-service-bar-notifications>Notificações ({{ arrayNotifications.length }})</h4></md-menu-item><md-menu-item class=plg-service-bar-notification-window-connection-lost ng-hide=$root.isWebsocketConnected><h4 class=plg-service-bar-notifications>Conexão indisponível com o servidor</h4><div><md-button aria-label=Reconectar class=md-raised ng-disabled=$root.isWebsocketLoading ng-click=reconnectWebsocket();>{{ $root.isWebsocketLoading ? \\'Aguarde..\\' : \\'Reconectar\\' }}</md-button></div></md-menu-item><div class=plg-service-bar-notification-items ng-hide=\\\"arrayNotifications.length === 0 || !$root.isWebsocketConnected\\\"><md-menu-item class=plg-service-bar-notification-item-bind ng-repeat=\\\"not in arrayNotifications\\\" ng-show=$root.isWebsocketConnected><md-item class=plg-service-bar-notification-item-bind-content><div layout=row><div class=plg-service-bar-notification-item-bind-description><span style=\\\"font-weight: bold;\\\">{{ not.options.key }}</span> <span class=truncate style=\\\"margin-left: 20px; margin-top: 10px;\\\">{{ not.doc.description }}</span></div><div class=plg-service-bar-notification-item-bind-datetime><span>{{ not.doc.date | date}}</span></div></div></md-item></md-menu-item></div><div class=plg-service-bar-notification-footer ng-hide=\\\"arrayNotifications.length === 0 || !$root.isWebsocketConnected\\\"><span>Ver todas notificações</span></div></md-menu-content></md-menu><md-menu md-position-mode=\\\"target-right target\\\" md-offset=\\\"0 60\\\"><div class=plg-service-bar-user-actions ng-click=\\\"openMenu($mdOpenMenu, $event)\\\" ng-class=\\\"{ \\'plg-service-bar-scale-up\\': user }\\\"><img ng-if=\\\"user && user.profileImage\\\" ng-src=\\\"{{ user.profileImage }}\\\" class=plg-service-bar-avatar alt=foto><div ng-if=\\\"user && !user.profileImage\\\" class=\\\"plg-service-bar-avatar plg-service-bar-no-avatar\\\"><i class=material-icons>person<i></i></i></div><md-progress-circular ng-if=!user style=float:left;top:-25px;right:0px; md-mode=indeterminate md-diameter=30></md-progress-circular><span ng-show=user class=plg-service-bar-avatar-message>Olá {{ user.fullname }}</span></div><md-menu-content width=4><md-menu-item ng-hide=\\\"currentAppModule === \\'painelDoClienteApp\\'\\\"><md-button ng-click=myAccount()>Minha Conta</md-button></md-menu-item><md-menu-item><md-button ng-click=\\\"redirect(\\'/configuracoes\\')\\\">Configurações</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click=logout()>Logout</md-button></md-menu-item></md-menu-content></md-menu></div></section></div></md-toolbar><md-tabs ng-if=\\\"menu && menu.length > 0 && currentMenuIndex !== undefined\\\" md-selected=currentMenuIndex class=plg-service-bar-menu><md-tab ng-repeat=\\\"item in menu\\\" ng-click=\\\"changeRoute(item.route, false)\\\"><md-icon class=\\\"plg-service-bar-horizontal-menu plg-service-bar-horizontal-menu-position plg-service-bar-icon\\\" md-svg-src=\\\"../../assets/icons/icone_{{ item.icon }}.svg\\\" aria-label={{item.icon}}></md-icon><span class=plg-service-bar-menu-text ng-bind=item.name></span></md-tab></md-tabs><md-tabs md-selected=currentSubmenuIndex ng-hide=\\\"availableSubmenu.length === 0\\\" class=plg-service-bar-submenu><md-tab ng-repeat=\\\"item in availableSubmenu track by $index\\\" ng-click=\\\"changeRoute(item.route, true)\\\"><span class=plg-service-bar-menu-text ng-bind=item.name></span></md-tab></md-tabs>\");\n$templateCache.put(\"plgSimpleCombo.html\",\"<md-input-container md-position-mode=\\\"target-right target\\\" class=\\\"{{ class }} plgSimpleCombo-container\\\"><label for=\\\"{{\\'plgsc-\\' + label }}\\\" ng-hide=\\\"ngModel && ngModel.length < 1\\\">{{ label }}</label><md-select md-position-mode=\\\"target-right target\\\" ng-model=ngModel class=plgSimpleCombo-text id=\\\"{{\\'plgsc-\\' + label }}\\\" md-on-close=\\\"searchTermPSC = \\'\\'; onHandler()\\\" data-md-container-class=selectdemoSelectHeader md-selected-text=getSelectedText() ng-model-options=trackBy multiple=\\\"\\\"><md-select-header class=demo-select-header><input ng-model=searchTermPSC type=search placeholder=Pesquisar class=\\\"demo-header-searchbox _md-text\\\"></md-select-header><md-optgroup><div layout=row layout-align=\\\"start center\\\" class=plg-simplecombo-smart-options ng-hide=\\\"multiple === undefined\\\"><a ng-click=\\\"ngModel = items\\\">Todos</a><a ng-click=\\\"ngModel = []\\\">Nenhum</a></div><md-option ng-value=item ng-repeat=\\\"item in items | filter:searchTermPSC\\\">{{ isArrayOfObjects ? item[options.refName] : item}}</md-option></md-optgroup></md-select></md-input-container>\");}]);"],"sourceRoot":"/source/"}